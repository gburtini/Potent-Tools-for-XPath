{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 75e01607dfe0517fa8a9","webpack:///./~/css-xpath/index.js","webpack:///./~/js-xpath/xpath.js","webpack:///./src/types/XPathNode.js","webpack:///./src/evaluators.js","webpack:///./src/generators.js","webpack:///./src/patterns.js","webpack:///./index.js","webpack:///./~/css-xpath/src/cssXPath.js","webpack:///./~/css-xpath/src/patterns.js","webpack:///./~/process/browser.js","webpack:///./~/separated-attributes/index.js","webpack:///./~/util/~/inherits/inherits_browser.js","webpack:///./~/util/support/isBufferBrowser.js","webpack:///./~/util/util.js","webpack:///(webpack)/buildin/global.js","webpack:///./~/xpath/xpath.js","webpack:///./src/types/XPathNodes.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AChEA;;;;;;;YCAA,yBAAa,SAA2D,mBAAmB,gDAAgD,aAAa,KAAK,MAAM,gCAAgC,SAAS,qCAAqC,SAAS,mCAAmC,OAAO,KAAK,OAAO,eAAe,aAAa,0BAA0B,0BAA0B,gBAAgB,UAAU,UAAU,0CAA0C,8BAAwB,0BAAoB,8CAA8C,kCAAkC,YAAY,YAAY,mCAAmC,iBAAiB,gBAAgB,sBAAsB,oBAAoB,0CAA0C,YAAY,WAAW,YAAY,SAAS,GAAG;AACzyB;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,oBAAoB,6CAA6C;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,cAAc;AACrC,uBAAuB,aAAa;AACpC,uBAAuB,UAAU;AACjC,uBAAuB,aAAa;;AAEpC;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,8BAA8B;AAC7C,eAAe,yBAAyB;AACxC,eAAe,yBAAyB;AACxC,gBAAgB,wBAAwB;AACxC,gBAAgB,yBAAyB;AACzC,gBAAgB,yBAAyB;;AAEzC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,aAAa;AACpC,uBAAuB,YAAY;;AAEnC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,gDAAgD;AAChD,gDAAgD;AAChD,6CAA6C;AAC7C,6CAA6C;AAC7C,6CAA6C;AAC7C,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,0BAA0B;;AAE1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,6BAA6B;AAC7B,iCAAiC;AACjC;AACA,2BAA2B;AAC3B,+BAA+B;AAC/B,mCAAmC;;AAEnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,iCAAiC;;AAEjC;AACA;;AAEA,uCAAuC;AACvC,yCAAyC;;AAEzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B;AAC3B,2CAA2C;;AAE3C;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,4BAA4B;AAC5B,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,uCAAuC;AAC1D,mBAAmB,uCAAuC;;AAE1D,uBAAuB,+CAA+C;AACtE,uBAAuB,+CAA+C;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B;;AAE3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0CAA0C;AAC1C,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB,UAAU,QAAQ,EAAE;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC,8BAA8B;AAC/D,iCAAiC,8BAA8B;AAC/D,iCAAiC,0CAA0C;AAC3E,iCAAiC,0CAA0C;AAC3E,iCAAiC,0CAA0C;AAC3E,iCAAiC,0CAA0C;;AAE3E;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,mBAAmB;AACvD,oCAAoC,mBAAmB;AACvD,oCAAoC,iBAAiB;AACrD,oCAAoC,iBAAiB;AACrD,oCAAoC,kBAAkB;AACtD,oCAAoC,kBAAkB;;AAEtvD,6BAA6B,0BAA0B;AACvD,6BAA6B,0BAA0B;AACvD,6BAA6B,0BAA0B;;AAEvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,8BAA8B,YAAY;;AAE1C;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,+BAA+B;AAC3D,4BAA4B,+BAA+B;AAC3D,4BAA4B,gCAAgC;AAC5D,4BAA4B,gCAAgC;;AAE5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC;;AAExC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,kDAAkD,EAAE;;AAE7E;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,gBAAgB;AAC3D,2CAA2C,gBAAgB;;AAE3D,4CAA4C,6BAA6B;AACzE,4CAA4C,+BAA+B;;AAE3E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC,wBAAwB;;AAE5D;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,+BAA+B,aAAa;;AAE5C;AACA,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC;;AAErC;AACA,oCAAoC;;AAEpC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,SAAS;;AAEnE;;AAEA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,wBAAwB,gBAAgB,SAAS,wBAAwB;;AAEpH;AACA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC,EAAE,eAAe;;AAElB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kCAAkC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,8BAA8B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,+BAA+B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,mCAAmC;AACnC;;AAEA,+BAA+B;AAC/B;AACA;;AAEA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,gCAAgC;AAChC;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,yBAAyB,EAAE;;AAE1F;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,0CAA0C;AAC1C;AACA;AACA,+BAA+B,iCAAiC;AAChE;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sCAAsC;AACrE;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,gCAAgC;AAChC;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,kFAAkF;AACnG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qCAAqC;AAClE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,uDAAuD;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC,EAAE,0BAA0B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,6BAA6B;AAC7B,6BAA6B;;AAE7B;AACA,4CAA4C;AAC5C;;AAEA,mBAAmB;;AAEnB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB,8BAA8B;AAC9B,4BAA4B;AAC5B,2BAA2B;;AAE3B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACbkCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B;AAC3B,kCAAkC;AAClC,wCAAwC;;AAExC;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sDAAsD;AACtD;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,QAAQ;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;;AAEA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,QAAQ;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;;AAEA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;;AAEA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,YAAY;AACxB;AACA;AACA,qBAAqB,YAAY;AACjpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;;AAEA,cAAc,4BAA4B;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,aAAa,kBAAkB;AAC/B;AACA;AACA;;AAEA,aAAa,mBAAmB;AAChC;AACA;AACA;;AAEA,aAAa,oBAAoB;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF,CAAC;;AAED;AACA,CAAC;;AAED,CAAC,GAAG;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA,eAAe,kCAAkC;AACjD,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mJAAmJ;AACnJ,SAAS;;AAET;AACA;AACA,qBAAqB,+BAA+B;AACpD;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW,YAAY,IAAI,WAAW,SAAS;AACvE,cAAc,yBAAyB,EAAE;AACzC,MAAM;AACN,WAAW,quBAAquB;AAChvB,aAAa,sbAAsb;AACnc;AACA;AACA;;AAEA;AACA;AACA;AACA,iB;AACA;AACA;AACA,kB;AACA;AACA;AACA,wBAAwB,mB;AACxB;AACA;AACA,4D;AACA;AACA;AACA,4CAA4C,gDAAgD,E;AAC5F;AACA;AACA,4CAA4C,iDAAiD,E;AAC7F;AACA;AACA,0CAA0C,gDAAgD,E;AAC1F;AACA;AACA,0CAA0C,gDAAgD,E;AAC1F;AACA;AACA,2CAA2C,8CAA8C,E;AACzF;AACA;AACA,2CAA2C,+CAA+C,E;AAC1F;AACA;AACA,2CAA2C,8CAA8C,E;AACzF;AACA;AACA,2CAA2C,+CAA+C,E;AAC1F;AACA;AACA,6CAA6C,8CAA8C,E;AAC3F;AACA;AACA,6CAA6C,8CAA8C,E;AAC3F;AACA;AACA,6CAA6C,8CAA8C,E;AAC3F;AACA;AACA,6CAA6C,8CAA8C,E;AAC3F;AACA;AACA,6CAA6C,8CAA8C,E;AAC3F;AACA;AACA,8CAA8C,kCAAkC,E;AAChF;AACA;AACA,6CAA6C,kDAAkD,E;AAC/F;AACA;AACA,4CAA4C,6BAA6B,E;AACzE;AACA;AACA,4CAA4C,uBAAuB,E;AACnE;AACA;AACA;AACA;AACA,oD;AACA;AACA;AACA,mB;AACA;AACA;AACA;AACA;AACA,oGAAoG,E;AACpG;AACA;AACA;AACA;AACA;AACA,6HAA6H;AAC7H;AACA;AACA,mGAAmG,E;AACnG;AACA;AACA;AACA,2GAA2G,eAAe;AAC1H;AACA;AACA,sGAAsG,E;AACtG;AACA;AACA;AACA;AACA,2GAA2G,eAAe;AAC1H;AACA;AACA,6HAA6H;AAC7H;AACA;AACA,qGAAqG,E;AACrG;AACA;AACA,8CAA8C,qCAAqC,E;AACnF;AACA;AACA;AACA;AACA,4D;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,oFAAoF,E;AACpF;AACA;AACA,0CAA0C;AAC1C;AACA,gFAAgF,E;AAChF;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA,mB;AACA;AACA;AACA,4CAA4C;AAC5C,oFAAoF,E;AACpF;AACA;AACA,4CAA4C;AAC5C,oFAAoF,E;AACpF;AACA;AACA;AACA;AACA,+FAA+F;AAC/F,6HAA6H;AAC7H,yFAAyF;AACzF,mFAAmF,E;AACnF;AACA;AACA,4CAA4C;AAC5C,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0D;AACA;AACA;AACA;AACA,oFAAoF;AACpF,kHAAkH;AAClH;AACA,0D;AACA;AACA;AACA,iB;AACA;AACA;AACA,wCAAwC;AACxC,uGAAuG,E;AACvG;AACA;AACA,wCAAwC;AACxC,uGAAuG,E;AACvG;AACA;AACA;AACA;AACA,0D;AACA;AACA;AACA,uBAAuB;AACvB;AACA,0F;AACA;AACA;AACA,uBAAuB;AACvB,mEAAmE;AACnE,0F;AACA;AACA;AACA,oD;AACA;AACA;AACA,iD;AACA;AACA;AACA,WAAW,2D;AACX;AACA;AACA,WAAW,oD;AACX;AACA;AACA,WAAW,8E;AACX;AACA;AACA,WAAW,gD;AACX;AACA;AACA,WAAW,gD;AACX;AACA;AACA,WAAW,mD;AACX;AACA;AACA,WAAW,mF;AACX;AACA;AACA,WAAW,uF;AACX;AACA;AACA,wD;AACA;AACA;AACA,yD;AACA;AACA;AACA,CAAC;AACD,SAAS,gNAAgN,EAAE,MAAM,EAAE,2GAA2G,cAAc,iCAAiC,yCAAyC,iCAAiC,gBAAgB,6MAA6M,0CAA0C,6MAA6M,gBAAgB,UAAU,YAAY,iBAAiB,4CAA4C,cAAc,gBAAgB,0GAA0G,GAAG,0GAA0G,6BAA6B,aAAa,2DAA2D,0DAA0D,8BAA8B,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,gBAAgB,QAAQ,EAAE,6MAA6M,EAAE,6MAA6M,EAAE,6MAA6M,EAAE,6MAA6M,EAAE,6MAA6M,EAAE,6MAA6M,EAAE,6MAA6M,EAAE,6MAA6M,EAAE,6MAA6M,EAAE,6MAA6M,EAAE,6MAA6M,EAAE,6MAA6M,EAAE,6MAA6M,EAAE,6MAA6M,EAAE,0GAA0G,EAAE,0GAA0G,gBAAgB,6MAA6M,EAAE,0GAA0G,EAAE,0GAA0G,gBAAgB,4GAA4G,eAAe,OAAO,gBAAgB,UAAU,GAAG,6NAA6N,gBAAgB,oGAAoG,EAAE,oGAAoG,eAAe,cAAc,aAAa,OAAO,gBAAgB,cAAc,0CAA0C,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,sBAAsB,wBAAwB,kGAAkG,4BAA4B,2FAA2F,gBAAgB,sEAAsE,gBAAgB,sEAAsE,gBAAgB,0CAA0C,gBAAgB,0CAA0C,gBAAgB,0CAA0C,gBAAgB,0CAA0C,gBAAgB,4BAA4B,gBAAgB,4BAA4B,gBAAgB,OAAO,gBAAgB,OAAO,gBAAgB,OAAO,8BAA8B,cAAc,gBAAgB,cAAc,GAAG,6GAA6G,eAAe,cAAc,gBAAgB,cAAc,gBAAgB,kBAAkB,EAAE,sBAAsB,6BAA6B,kGAAkG,uFAAuF,WAAW,6BAA6B,WAAW,+BAA+B,8MAA8M,gBAAgB,WAAW,eAAe,kGAAkG;AACp8O,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,wDAAwD,wB;AACxD;AACA,wDAAwD,wB;AACxD;AACA,wDAAwD,2B;AACxD;AACA,wDAAwD,6B;AACxD;AACA,iCAAiC,gDAAgD,4CAA4C,c;AAC7H;AACA,iC;AACA;AACA,uFAAuF,qB;AACvF;AACA,iCAAiC,8CAA8C,gB;AAC/E;AACA,iCAAiC,iDAAiD,mB;AAClF;AACA,kCAAkC,6CAA6C,e;AAC/E;AACA,mCAAmC,4CAA4C,c;AAC/E;AACA,mCAAmC,2CAA2C,a;AAC9E;AACA,mCAAmC,4CAA4C,c;AAC/E;AACA,mCAAmC,4CAA4C,c;AAC/E;AACA,kCAAkC,4CAA4C,c;AAC9E;AACA,mCAAmC,2CAA2C,a;AAC9E;AACA,mCAAmC,4CAA4C,c;AAC/E;AACA,mCAAmC,4CAA4C,c;AAC/E;AACA,mCAAmC,2CAA2C,a;AAC9E;AACA,mCAAmC,4CAA4C,c;AAC/E;AACA,mCAAmC,2CAA2C,a;AAC9E;AACA,mCAAmC,6CAA6C,e;AAChF;AACA,mCAAmC,8CAA8C,gB;AACjF;AACA,mCAAmC,8CAA8C,gB;AACjF;AACA,mCAAmC,4CAA4C,oB;AAC/E;AACA,mCAAmC,8CAA8C,gB;AACjF;AACA,mCAAmC,+CAA+C,iB;AAClF;AACA,kCAAkC,gDAAgD,iB;AAClF;AACA,mCAAmC,+CAA+C,iB;AAClF;AACA,kCAAkC,gDAAgD,iB;AAClF;AACA,kCAAkC,6CAA6C,kB;AAC/E;AACA,kCAAkC,6CAA6C,c;AAC/E;AACA,mCAAmC,2CAA2C,a;AAC9E;AACA,mCAAmC,4CAA4C,oB;AAC/E;AACA,mCAAmC,8CAA8C,gB;AACjF;AACA,mCAAmC,6CAA6C,e;AAChF;AACA,kCAAkC,4CAA4C,c;AAC9E;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,aAAa,WAAW,qHAAqH,eAAe,6HAA6H,gBAAgB;AACzS,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,CAAC;;;AAGD;AACA;AACA;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC,EAAE,6BAA6B;;AAEhC,CAAC,GAAG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,IAAI;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,8BAA8B;AAClE;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,oBAAoB;AAC9B;AACA;;AAEA;AACA,UAAU,UAAU;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,sBAAsB;AACrD;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC,EAAE,aAAa;AAChB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;AAEtC,CAAC,GAAG;AACJ;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,CAAC,EAAE,gCAAgC,EAAE,GAAG;AACxC,CAAC,E;;;;;;AC9/ND,OAAO,kBAAkB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,yDAAyD,EAAE,aAAa,EAAE;AAC1E;AACA;AACA,KAAK;AACL,kBAAkB,EAAE,IAAI,UAAU;AAClC;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB;;AAEA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,sCAAsC;AACtC,gCAAgC;AAChC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mEAAmE,mBAAmB;AACtF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,QAAQ,iBAAiB;AACpE,mBAAmB;AACnB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA,iCAAiC;AACjC,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC1IA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,WAAW,IAAI;AACf;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2CAA2C,MAAM;AACjD;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,2BAA2B;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtHA;AACA;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,aAAa,OAAO;AACpB,yDAAyD,0BAA0B;AACnF;AACA;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,QAAQ;AACnB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yCAAyC,eAAe;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,2DAA2D,WAAW;AACtE;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACrGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtHA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACLA;;AAEA;AACA;AACA;AACA,sBAAsB,6BAA6B;AACnD;AACA,qEAAqE,6BAA6B;AAClG;AACA;AACA,0CAA0C,4BAA4B;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB,KAAK,gBAAgB;AACtE,OAAO;AACP,wBAAwB,gBAAgB,IAAI,gBAAgB;AAC5D;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA,wBAAwB,gCAAgC;;AAExD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACvGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtHA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;ACnLtC;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC;;AAEjC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA,C;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,uBAAuB,SAAS;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C,KAAK;;AAEjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;AAGA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACzkBA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;ACpyBAAiD;;AAEjeAAe,IAAI,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX,WAAW;AACX,WAAW;AACX,WAAW;AACX,WAAW;AACX,WAAW;AACX,WAAW;AACX,WAAW;AACX,WAAW;AACX,SAAS,EAAE;AACX,WAAW;AACX,WAAW;AACX,WAAW;AACX;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kCAAkC;AACpD;AACA;AACA;AACA,iCAAiC,wCAAwC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,iBAAiB,oCAAoC;AACrD;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,WAAW;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,8CAA8C,8EAA8E;AAC5H;AACA;AACA;AACA,6BAA6B,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,WAAW;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oDAAoD;AACxF,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,6BAA6B,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD,WAAW;AAC9D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,4BAA4B;AAC9C;AACA;AACA;AACA,iCAAiC,wCAAwC;AACzE;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kCAAkC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mBAAmB;AAC/B;AACA;AACA;AACA,YAAY,0BAA0B;AACtgBAAgB,2BAA2B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gBAAgB,kBAAkB;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,mBAAmB;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,oBAAoB;;AAExD,gBAAgB,gBAAgB;AAChyDAAyD;AACnE;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB;;AAEA;AACA,kBAAkB,WAAW;AAC7B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yBAAyB,kBAAkB;AAC3C;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qDAAqD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,gCAAgC,qCAAqC,EAAE;AACjF;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;;;;;;ACvnJD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,cAAc,QAAQ,EAAE,iBAAiB;AACzC;AACA;;AAEA","file":"potentTools-2.1.4.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"potentTools\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"potentTools\"] = factory();\n\telse\n\t\troot[\"potentTools\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 75e01607dfe0517fa8a9","module.exports = require('./src/cssXPath');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-xpath/index.js\n// module id = 0\n// module chunks = 0","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.xpath = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// Scheme numerical tower in JavaScript.  Described in README.\n// Copyright (c) 2011 by John Tobey <John.Tobey@gmail.com>\n\n/*\n    File: schemeNumber.js\n\n    Exports:\n\n        <SchemeNumber>\n\n    Depends:\n\n        <biginteger.js> for <BigInteger>\n */\n\n// Grab the BigInteger library.\nvar BigInteger;\nif (!this.BigInteger && typeof require !== \"undefined\")\n    BigInteger = require(\"biginteger\").BigInteger;\nelse\n    BigInteger = this.BigInteger;\n\nif (!BigInteger) {\n    if (typeof load !== \"undefined\")\n        load(\"biginteger.js\");\n    else if (this.readFile)\n        eval(this.readFile(\"biginteger.js\"));\n    else\n        throw new Error(\"BigInteger is not defined.\");\n}\n\n/*\n    Class: SchemeNumber\n    A number object as <defined by the Scheme language at\n    http://www.r6rs.org/>.\n\n    Scheme supports *exact* arithmetic and mixing exact with standard\n    (*inexact*) numbers.  Several basic operations, including\n    addition, subtraction, multiplication, and division, when given\n    only exact arguments, must return an exact, numerically correct\n    result.\n\n    These operations are allowed to fail due to running out of memory,\n    but they are not allowed to return approximations the way\n    ECMAScript operators may, unless given one or more inexact\n    arguments.\n\n    For example, adding exact *1/100* to exact *0* one hundred times\n    produces exactly *1*, not 1.0000000000000007 as in JavaScript.\n    Raising exact *2* to the power of exact *1024* returns a 308-digit\n    integer with complete precision, not *Infinity* as in ECMAScript.\n\n    This implementation provides all functions listed in the <R6RS\n    Scheme specification at http://www.r6rs.org/>, Section 11.7, along\n    with <eqv?> from Section 11.5.  (<eqv?> uses JavaScript's *===* to\n    compare non-numbers.)\n\n    Exact numbers support the standard ECMA Number formatting methods\n    (toFixed, toExponential, and toPrecision) without a fixed upper\n    limit to precision.\n\n    The schemeNumber.js file exports an object <SchemeNumber>.  It\n    contains a property <fn>, which in turn contains the functions\n    implementing the numeric types.\n\n    The <SchemeNumber> object is in fact a function that converts its\n    argument to a Scheme number: similar to a constructor, but it may\n    not always return an object, let alone a unique object.\n\n    Parameters:\n\n        obj - Object to be converted to a Scheme number.\n\n    *obj* may have any of the following\n    types:\n\n        Scheme number - returned unchanged.\n        String        - converted as if by *string->number*.\n        Native ECMAScript number - treated as an inexact real.\n\n    Returns:\n\n        A Scheme number.\n\n    Exceptions:\n\n        If *obj* can not be parsed, <SchemeNumber> will <raise> an\n        exception with condition type *&assertion*.\n\n    See Also:\n\n        <fn>, <raise>, <R6RS Chapter 3: Numbers at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-6.html#node_chap_3>\n*/\nvar SchemeNumber = (function() {\n\nfunction assert(x) { if (!x) throw new Error(\"assertion failed\"); }\n\nvar abs      = Math.abs;\nvar floor    = Math.floor;\nvar ceil     = Math.ceil;\nvar round    = Math.round;\nvar pow      = Math.pow;\nvar sqrt     = Math.sqrt;\nvar atan2    = Math.atan2;\nvar log      = Math.log;\nvar exp      = Math.exp;\nvar atan     = Math.atan;\nvar cos      = Math.cos;\nvar sin      = Math.sin;\nvar tan      = Math.tan;\nvar LN2      = Math.LN2;\nvar LN10     = Math.LN10;\nvar _isFinite = isFinite;\nvar _isNaN    = isNaN;\nvar _parseInt = parseInt;\nvar _parseFloat = parseFloat;\n\nfunction retFalse()   { return false; }\nfunction retTrue()    { return true;  }\nfunction retFirst(a)  { return a; }\nfunction retThis()    { return this; }\n\nfunction unimpl() {\n    throw new Error(\"BUG: unimplemented\");\n}\nfunction pureVirtual() {\n    throw new Error(\"BUG: Abstract method not overridden\");\n}\n\nfunction N() {}   N.prototype = new Number();  // Scheme numbers.\nfunction C() {}   C.prototype = new N();       // Complex numbers.\nfunction R() {}   R.prototype = new C();       // Reals.\nfunction ER() {} ER.prototype = new R();       // Exact reals.\nfunction EQ() {} EQ.prototype = new ER();      // Exact rationals.\nfunction EI() {} EI.prototype = new EQ();      // Exact integers.\n\n// How to split a rectangular literal into real and imaginary components:\nvar decimalComplex = /^(.*[^a-zA-Z]|)([-+].*)i$/;\nvar radixComplex = /^(.*)([-+].*)i$/;\n\nvar nanInfPattern = /^[-+](nan|inf)\\.0$/;\nvar exponentMarkerPattern = /[eEsSfFdDlL]/;\nvar decimal10Pattern = /^([0-9]+\\.?|[0-9]*\\.[0-9]+)([eEsSfFdDlL][-+]?[0-9]+)?$/;\n\nvar uintegerPattern = {\n    2: /^[01]+$/, 8: /^[0-7]+$/, 10: /^[0-9]+$/, 16: /^[0-9a-fA-F]+$/\n};\n\nfunction retZero()    { return ZERO; }\nfunction retOne()     { return ONE; }\n\nfunction divisionByExactZero() {\n    raise(\"&assertion\", \"division by exact zero\");\n}\n\n// Is the Flonum class simply the native Number?  In that case we will\n// add methods to Number.prototype.\n\nvar Flonum;\n\n// Users who wish to optimize the library by stripping support for\n// Number.prototype cleanliness may simply replace \"toFlonum(\"\n// globally with \"(\" and change false to true here.\n\nif (false) {  // XXX Should expose a way to choose this branch.\n    // Flonum is Number.\n    Flonum = Number;\n}\nelse {\n    // Flonum is a regular class in the hierarchy.\n    Flonum = function(x) {\n        this._ = x;\n    };\n}\n\nvar toFlonum, isNumber;\nvar flo = {};\nvar FLO_FUNCS = [[],\n                 [\"log\", \"floor\", \"ceil\", \"sqrt\", \"abs\", \"atan\",\n                  \"cos\", \"sin\", \"tan\", \"exp\"],\n                 [\"pow\", \"atan2\"]];\n\nif (Flonum === Number) {\n    toFlonum = retFirst;\n\n    isNumber = function(x) {\n        return x instanceof Number || typeof x === \"number\";\n    };\n    FLO_FUNCS[1].concat(FLO_FUNCS[2]).forEach(function(name) {\n            flo[name] = Math[name];\n        });\n}\nelse {\n    Flonum.prototype = new R();\n\n    (function() {\n        var inexactZero = new Flonum(0);\n        toFlonum = function(x) {\n            //assert(typeof x === \"number\");\n            return (x === 0 ? inexactZero : new Flonum(x));\n        };\n    })();\n\n    isNumber = function(x) {\n        return x instanceof N;\n    };\n    FLO_FUNCS[1].forEach(function(name) {\n            var math = Math[name];\n            flo[name] = function(a) {\n                return toFlonum(math(a));\n            };\n        });\n    FLO_FUNCS[2].forEach(function(name) {\n            var math = Math[name];\n            flo[name] = function(a, b) {\n                return toFlonum(math(a, b));\n            };\n        });\n    [\"toFixed\", \"toExponential\", \"toPrecision\"].forEach(function(name) {\n            var number = Number.prototype[name];\n            Flonum.prototype[name] = function(a) {\n                return number.call(this._, a);\n            };\n        });\n    Flonum.prototype.valueOf = function() {\n        return this._;\n    };\n}\n\n/* Internal class hierarchy:\n\n   Number\n     ^\n     N\n     ^\n     C  <----  Rectangular\n                   |\n                   `--  R  <----  Flonum[1]\n                             |\n                             `--  ER  <---  EQ  <----  EQFraction\n                                                  |\n                                                  `--  EI  <----  EINative\n                                                             |\n                                                             `--  EIBig\n\n   [1] In some configurations, the Flonum class actually equals Number\n   for reasons of efficiency.  Logically, Flonum should be a direct\n   subclass of R.  Initialization code populates missing slots in\n   Flonum.prototype as if that were the case.\n\n   The concrete classes are:\n\n   Flonum      - inexact real as a native number, possibly NaN or infinite.\n   Rectangular - complex number as real and imaginary parts of same exactness.\n   EQFraction  - exact rational as numerator and denominator in lowest terms.\n   EINative    - exact integer as (wrapped) native number.\n   EIBig       - exact integer as BigInteger.\n\n   The abstract C, R, ER, EQ, and EI classes hold information about\n   the respective number types (complex, real, exact real, exact\n   rational, and exact integer) and stimulate thought about new\n   concrete classes.\n\n   Possible future classes:\n   C <-- Polar - possibly exact complex number in polar coordinates;\n   EQ <-- EQNative - exact rational as native number (power-of-2 denominator);\n   EQ <-- EQDecimal - exact rational as BigInteger times a power of 10;\n   R <-- BigFloat - inexact real of non-standard precision.\n*/\n\n// SN: private alias for the public SchemeNumber object.\nfunction SN(obj) {\n    if (obj instanceof N) {\n        return obj;\n    }\n\n    var ret = obj;\n\n    if (typeof ret !== \"string\") {\n        if (typeof ret === \"number\") {\n            return toFlonum(ret);\n        }\n        if (ret instanceof Number) {\n            return toFlonum(+ret);\n        }\n\n        if (ret == null) {\n            // XXX Rethink this.\n            return (ret === null ? INEXACT_ZERO : NAN);\n        }\n\n        ret = ret.valueOf();\n        if (typeof ret === \"number\") {\n            return toFlonum(ret);\n        }\n        ret = String(ret);\n    }\n    ret = stringToNumber(ret);\n    if (ret === false) {\n        raise(\"&assertion\", \"not a number\", obj);\n    }\n    return ret;\n}\n// For NaturalDocs:\nvar SchemeNumber = SN;\n\n/*\n    Property: VERSION\n    Library version as an array of integers.\n\n    For example, *[1,2,4]* corresponds to Version 1.2.4.\n*/\nSchemeNumber.VERSION = [1,1,4];\n\nvar floPow   = flo.pow;\nvar floLog   = flo.log;\nvar floFloor = flo.floor;\nvar floCeil  = flo.ceil;\nvar floSqrt  = flo.sqrt;\nvar floAtan2 = flo.atan2;\nvar floAbs   = flo.abs;\nvar floAtan  = flo.atan;\nvar floCos   = flo.cos;\nvar floSin   = flo.sin;\nvar floTan   = flo.tan;\nvar floExp   = flo.exp;\n\nvar HIERARCHY = {\n    C: [\"Rectangular\", \"R\"],\n    R: [\"Flonum\", \"ER\"],\n    ER: [\"EQ\"],\n    EQ: [\"EQFraction\", \"EI\"],\n    EI: [\"EINative\", \"EIBig\"]\n};\n\nvar CLASSES = {\n    C:C, R:R, ER:ER, EQ:EQ, EI:EI,\n    Rectangular:Rectangular, Flonum:Flonum,\n    EQFraction:EQFraction, EINative:EINative, EIBig:EIBig\n};\n\nvar DISP = {};\nfor (var className in CLASSES) {\n    DISP[className] = {};  // Contents will go into class prototype.\n}\n\n//\n// Input functions.\n//\n\nvar PARSE_ERROR = new Object();\n\n// Scheme number syntaxes, e.g. #e1.1@-2d19, 2/3\nfunction stringToNumber(s, radix, exact) {\n    function lose() {\n        throw PARSE_ERROR;\n    }\n    function setExact(value) {\n        if (exact !== undefined) lose();\n        exact = value;\n    }\n    function setRadix(value) {\n        if (radix) lose();\n        radix = value;\n    }\n    function parseUinteger(s, sign) {\n        if (!uintegerPattern[radix].test(s))\n            lose();\n\n        if (exact === false)\n            return toFlonum(sign * _parseInt(s, radix));\n\n        return parseEI(sign, s, radix);\n    }\n    function parseReal(s) {\n        if (nanInfPattern.test(s)) {\n            if (exact)\n                lose();\n            switch (s) {\n            case \"+inf.0\": return INFINITY;\n            case \"-inf.0\": return M_INFINITY;\n            default: return NAN;\n            }\n        }\n\n        var sign = 1;\n        switch (s[0]) {\n        case '-': sign = -1;  // fall through\n        case '+': s = s.substring(1);\n        }\n\n        var slash = s.indexOf('/');\n        if (slash != -1)\n            return parseUinteger(s.substring(0, slash), sign)\n                .SN_divide(parseUinteger(s.substring(slash + 1), 1));\n\n        if (radix !== 10)\n            lose();\n\n        var pipe = s.indexOf('|');\n        if (pipe !== -1) {\n\n            // WHOA!!!  Explicit mantissa width!  Somebody really\n            // cares about correctness.  However, I haven't got all\n            // day, so execution speed loses.\n\n            var afterPipe = s.substring(pipe + 1);\n            if (!uintegerPattern[10].test(afterPipe))\n                lose();\n\n            s = s.substring(0, pipe);\n            var precision = _parseInt(afterPipe);\n\n            if (precision === 0)\n                s = \"0.0\";\n            else if (precision < 53)\n                return parseWithWidth(s, precision, exact);\n        }\n\n        // We have only one floating point width.\n        s = s.replace(exponentMarkerPattern, 'e');\n\n        var dot = s.indexOf('.');\n        var e = s.indexOf('e');\n        if (dot === -1 && e === -1)\n            return parseUinteger(s, sign);\n\n        if (!decimal10Pattern.test(s))\n            lose();\n\n        if (!exact)\n            return toFlonum(sign * _parseFloat(s));\n\n        var integer = s.substring(0, dot === -1 ? e : dot);\n        var exponent = 0;\n        var fraction;\n\n        if (e === -1)\n            fraction = s.substring(dot + 1);\n        else {\n            if (dot === -1)\n                fraction = \"\";\n            else\n                fraction = s.substring(dot + 1, e);\n            exponent = _parseInt(s.substring(e + 1));\n        }\n\n        return parseDecimal(sign, integer + fraction,\n                            exponent - fraction.length);\n    }\n    function parseComplex(s) {\n        var a = s.indexOf('@');\n        if (a !== -1) {\n            var ret = makePolar(parseReal(s.substring(0, a)),\n                                parseReal(s.substring(a + 1)));\n            if (exact && ret.SN_isInexact())\n                ret = ret.SN_toExact();  // XXX is this right?\n            return ret;\n        }\n\n        if (s[s.length - 1] !== \"i\")\n            return parseReal(s);\n\n        if (s === \"i\") {\n            if (exact === false)\n                return inexactRectangular(INEXACT_ZERO, toFlonum(1));\n            return I;\n        }\n        if (s === \"-i\") {\n            if (exact === false)\n                return inexactRectangular(INEXACT_ZERO, toFlonum(-1));\n            return M_I;\n        }\n\n        var match = (radix === 10 ? decimalComplex : radixComplex).exec(s);\n        var x, y;\n        if (match) {\n            x = match[1];\n            y = match[2];\n            x = (x ? parseReal(x) : (exact === false ? INEXACT_ZERO : ZERO));\n            y = (y === \"+\" ? ONE : (y === \"-\" ? M_ONE : parseReal(y)));\n        }\n        else {\n            // Could be \"3i\" for example.\n            x = (exact === false ? INEXACT_ZERO : ZERO);\n            y = parseReal(s.substring(0, s.length - 1));\n        }\n\n        return makeRectangular(x, y);\n    }\n\n    // Parse a real that had a |p attached.\n    // See the second half of R6RS Section 4.2.8 and also\n    // http://www.mail-archive.com/r6rs-discuss@lists.r6rs.org/msg01676.html.\n    function parseWithWidth(s, precision) {\n\n        // First, parse it as exact.\n        var x = stringToNumber(s, radix, true);\n        if (x === false || !x.SN_isReal())\n            lose();\n\n        if (!x.SN_isZero()) {\n            var xabs = x.SN_abs();\n\n            var shift = precision - floor(xabs.SN_log() / LN2) - 1;\n            var scale = TWO.SN_expt(toEINative(abs(shift)));\n            if (shift < 0)\n                scale = scale.SN_reciprocal();\n            var shifted = xabs.SN_multiply(scale);\n\n            // Correct for log() imprecision.\n            var denom = TWO.SN_expt(toEINative(precision));\n            while (shifted.SN_ge(denom)) {\n                shifted = shifted.SN_divide(TWO);\n                scale = scale.SN_divide(TWO);\n            }\n            for (var twiceShifted = shifted.SN_add(shifted);\n                 twiceShifted.SN_lt(denom);\n                 twiceShifted = shifted.SN_add(shifted)) {\n                shifted = twiceShifted;\n                scale = scale.SN_add(scale);\n            }\n\n            // 0.5 <= shifted/denom < 1.\n            var rounded = shifted.SN_round().SN_divide(scale);\n            if (x.SN_isNegative())\n                rounded = rounded.SN_negate();\n            x = rounded;\n        }\n\n        // Then make it inexact unless there is #e.\n        if (!exact)\n            x = x.SN_toInexact();\n\n        return x;\n    }\n\n    // Common cases first.\n    if (!radix || radix == 10) {\n        if (/^-?[0-9]{1,15}$/.test(s)) {\n            if (exact === false)\n                return toFlonum(_parseInt(s));\n            return toEINative(_parseInt(s));\n        }\n        radix = 10;\n    }\n\n    var i = 0;\n\n    try {\n        while (s[i] === \"#\") {\n            switch (s[i+1]) {\n            case 'i': case 'I': setExact(false); break;\n            case 'e': case 'E': setExact(true ); break;\n            case 'b': case 'B': setRadix( 2); break;\n            case 'o': case 'O': setRadix( 8); break;\n            case 'd': case 'D': setRadix(10); break;\n            case 'x': case 'X': setRadix(16); break;\n            default: return false;\n            }\n            i += 2;\n        }\n        return parseComplex(s.substring(i));\n    }\n    catch (e) {\n        if (e === PARSE_ERROR)\n            return false;\n        if (s == undefined)\n            raise(\"&assertion\", \"missing argument\");\n        throw e;\n    }\n}\n\nfunction makeRectangular(x, y) {\n    if (x.SN_isExact() && y.SN_isExact())\n        return exactRectangular(x, y);\n    return inexactRectangular(x.SN_toInexact(), y.SN_toInexact());\n}\n\nfunction makePolar(r, theta) {\n    return inexactRectangular(r.SN_multiply(theta.SN_cos()),\n                              r.SN_multiply(theta.SN_sin()));\n}\n\nfunction assertReal(x) {\n    if (!x.SN_isReal())\n        raise(\"&assertion\", \"not a real number\", x);\n    return x;\n}\n\nfunction toReal(x) {\n    x = SN(x);\n    x.SN_isReal() || assertReal(x);\n    return x;\n}\n\nfunction assertInteger(n) {\n    n = SN(n);\n    if (!n.SN_isInteger())\n        raise(\"&assertion\", \"not an integer\", n);\n    return n;\n}\n\nfunction toInteger(n) {\n    n = SN(n);\n    n.SN_isInteger() || assertInteger(n);\n    return n;\n}\n\nfunction assertRational(q) {\n    if (!q.SN_isRational())\n        raise(\"&assertion\", \"not a rational number\", q);\n    return q;\n}\n\nfunction assertNonNegative(n) {\n    if (n.SN_isNegative())\n        raise(\"&assertion\", \"negative number\", n);\n    return n;\n}\n\nfunction assertExact(z) {\n    if (z.SN_isInexact())\n        raise(\"&assertion\", \"inexact number\", z);\n    return z;\n}\n\n/*\n    Property: raise\n    Function that translates a Scheme exception to ECMAScript.\n\n    When a library function encounters a situation where the Scheme\n    specification requires it to raise an exception with a certain\n    condition type, the function calls <SchemeNumber.raise>.\n\n    Programs may assign a custom function to <SchemeNumber.raise> to\n    intercept such exceptions.\n\n    Parameters:\n\n        conditionType - The specified condition, for example, \"&assertion\".\n        message       - A string describing the error.\n        irritants...  - Zero or more erroneous data arguments.\n\n    Returns:\n\n        The default <SchemeNumber.raise> function simply throws an\n        *Error*.\n\n    See Also:\n\n        <fn>, <SchemeNumber>\n*/\nSchemeNumber.raise = defaultRaise;\n\nfunction defaultRaise(conditionType, message, irritant) {\n    var msg = \"SchemeNumber: \" + conditionType + \": \" + message;\n    if (arguments.length > 2) {\n        if (isNumber(irritant))\n            irritant = irritant.SN_numberToString();\n        msg += \": \" + irritant;\n    }\n    throw new Error(msg);\n}\n\nfunction raise() {\n    var len = arguments.length;\n    var args = new Array(len);\n    while (len--)\n        args[len] = arguments[len];\n\n    // Call the exception hook.\n    SN.raise.apply(SN, args);\n\n    // Oops, it returned.  Fall back to our known good raiser.\n    defaultRaise.apply(this, args);\n}\n\n/*\n    Property: maxIntegerDigits\n    Maximum size of integers created by the <fn.expt(z1, z2)>\n    function.\n\n    To avoid using up all system memory, exact results of a call to\n    <fn.expt(z1, z2)> are capped at a configurable number of digits,\n    by default one million.  <SchemeNumber.maxIntegerDigits> holds\n    this limit.\n\n    The size limit does *not* currently protect against other means of\n    creating large exact integers.  For example, when passed\n    \"#e1e9999999\", the <SchemeNumber> function tries to allocate 10\n    million digits, regardless of <maxIntegerDigits>.\n\n    In a future release, cases such as the preceeding example may be\n    checked.  If there is any possibility of legitimately creating\n    such large integers, either as number objects or components\n    thereof, code should increase <maxIntegerDigits>.\n\n    Default Value:\n\n        - 1000000 (1e6 or 1 million)\n*/\n\n// Configurable maximum integer magnitude.\nSN.maxIntegerDigits = 1e6;  // 1 million digits.\n\n/*\n    Method: toString(radix)\n    Converts this Scheme number to a string.\n\n    The *toString* method converts inexact numbers as in JavaScript\n    and exact numbers as if by <fn[\"number->string\"](z, radix)>.\n\n    Method: toFixed(fractionDigits)\n    Returns this Scheme number as a string with *fractionDigits*\n    digits after the decimal point.\n\n    Examples:\n\n    > SchemeNumber(\"#e1.2\").toFixed(2)  // \"1.20\"\n    > SchemeNumber(\"1/7\").toFixed(24)   // \"0.142857142857142857142857\"\n\n    Specified by: <ECMA-262, 5th edition at http://www.ecma-international.org/publications/standards/Ecma-262.htm>\n\n    Method: toExponential(fractionDigits)\n    Converts this Scheme number to scientific \"e\" notation with\n    *fractionDigits* digits after the decimal point.\n\n    Examples:\n\n    > SchemeNumber(\"1/11\").toExponential(3)  // \"9.091e-2\"\n    > SchemeNumber(\"1/2\").toExponential(2)   // \"5.00e-1\"\n\n    Specified by: <ECMA-262, 5th edition at http://www.ecma-international.org/publications/standards/Ecma-262.htm>\n\n    Method: toPrecision(precision)\n    Converts this Scheme number to decimal (possibly \"e\" notation)\n    with *precision* significant digits.\n\n    Examples:\n\n    > SchemeNumber(\"12300\").toPrecision(2)  // \"1.2e+4\"\n    > SchemeNumber(\"12300\").toPrecision(4)  // \"1.230e+4\"\n    > SchemeNumber(\"12300\").toPrecision(5)  // \"12300\"\n    > SchemeNumber(\"12300\").toPrecision(6)  // \"12300.0\"\n\n    Specified by: <ECMA-262, 5th edition at http://www.ecma-international.org/publications/standards/Ecma-262.htm>\n */\n\n/*\n    Property: fn\n    Container of <Scheme functions>.\n\n    The <SchemeNumber> object contains a property, <SchemeNumber.fn>,\n    which in turn contains the functions implementing the Scheme\n    numeric types.\n\n    These functions are stored in <fn> under their Scheme names, so\n    [\"quotation\"] is needed where the names contain characters that\n    are incompatible with dot.notation.  (In JavaScript, *X.Y* and\n    *X[\"Y\"]* are equivalent expressions where Y is a valid identifier.\n    Not all Scheme function names are valid JavaScript identifiers, so\n    one needs the second syntax to extract them from <fn>.)\n\n    You may find it convenient to copy <SchemeNumber>, <fn>, and the\n    output function <number->string> into short-named variables, by\n    convention *sn*, *fn*, and *ns*.  The rest of this section assumes\n    you have done this:\n\n    > var sn = SchemeNumber;\n    > var fn = sn.fn;\n    > var ns = fn[\"number->string\"];\n\n    Functions that require a Scheme number argument automatically\n    filter the argument through <SchemeNumber>.\n\n    For example, *\"2\"* (string) would be exact (parsed as Scheme) but\n    *2* (equal to *2.0*) would be inexact, as demonstrated:\n\n    > a1 = fn[\"exact?\"](\"2\");       // a1 === true\n    > a1 = fn[\"exact?\"](sn(\"2\"));   // same\n    > \n    > a2 = fn[\"exact?\"](2);         // a2 === false\n    > a2 = fn[\"exact?\"](\"2.0\");     // same\n    > a2 = fn[\"exact?\"](sn(\"2.0\")); // same\n\n    Note that the following functions accept arguments of any type and\n    therefore do not apply <SchemeNumber> to their arguments:\n\n    - <eqv?>\n    - <number?>\n    - <complex?>\n    - <real?>\n    - <rational?>\n    - <integer?>\n    - <real-valued?>\n    - <rational-valued?>\n    - <integer-valued?>\n\n    Here, for example, is 2 to the 1,024th power, as a decimal\n    string:\n\n    > a3 = ns(fn.expt(\"2\", \"1024\"));\n\n    Fractional\n    arithmetic:\n\n    > a4 = fn[\"+\"](\"1/3\", \"4/5\");  // 17/15\n\n    Numerator and denominator of a floating-point value,\n    hexadecimal:\n\n    > a5 = ns(fn.numerator(1/3), \"16\");    // \"#i15555555555555\"\n    > a6 = ns(fn.denominator(1/3), \"16\");  // \"#i40000000000000\"\n\n    The *#i* prefix denotes an inexact number, as detailed in <R6RS at\n    http://www.r6rs.org/>.  Since 1/3 is a native JavaScript number,\n    the library regards it as inexact, and operations such as\n    numerator yield inexact integer results.  If we used *\"1/3\"*\n    (quoted) instead of *1/3*, the numerator and denominator would be\n    the mathematically correct 1 and 3.\n\n    Functions specified to return two values (such as <div-and-mod>\n    and <exact-integer-sqrt>) return a two-element array as per\n    JavaScript conventions.\n\n    Caveats:\n\n      o Arcane features such as explicit mantissa widths or complex\n        transcendental functions, while believed complete, are\n        unoptimized.\n\n      o The library exhibits other visible behaviors besides those\n        described herein.  However, they are not part of its public\n        API and may change or disappear from one release to the next.\n\n      o In particular, Scheme numbers' *toString* property sometimes\n        produces output that is incorrect in the Scheme sense.  (This\n        stems from the decision to represent inexact reals as\n        unadorned native numbers.)\n\n    To serialize numbers as Scheme would, use\n    <SchemeNumber.fn[\"number->string\"]>.\n\n    > \"\" + SchemeNumber(2);                  // \"2\"\n    > SchemeNumber.fn[\"number->string\"](2);  // \"2.\"\n\n    To test a Scheme number for numerical equality with another Scheme\n    number or a native value, use <fn[\"=\"]>.  Likewise for <fn[\">\"]>\n    etc.\n\n    See Also:\n\n        <Scheme functions>\n*/\nSchemeNumber.fn = {\n\n/*\n    About: Function list\n\n    All <Scheme functions> are specified by <R6RS at\n    http://www.r6rs.org/>.  In the list below, argument names indicate\n    applicable types as follows:\n\n    obj - any value\n    z - any Scheme number\n    x - a real number\n    y - a real number\n    q - a rational number (excludes infinities and NaN)\n    n - an integer\n    k - an exact, non-negative integer\n    radix - an exact integer, either 2, 8, 10, or 16\n    precision - an exact, positive integer\n\n    Functions: Scheme functions\n    Elements of <fn>.\n\n    Refer to the argument type key under <Function list>.\n\n    fn[\"number?\"](obj)   - Returns true if *obj* is a Scheme number.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_440>.\n\n    fn[\"complex?\"](obj)  - Returns true if *obj* is a Scheme complex number.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_442>.\n\n    fn[\"real?\"](obj)     - Returns true if *obj* is a Scheme real number.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_444>.\n\n    fn[\"rational?\"](obj) - Returns true if *obj* is a Scheme rational number.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_446>.\n\n    fn[\"integer?\"](obj)  - Returns true if *obj* is a Scheme integer.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_448>.\n\n    fn[\"real-valued?\"](obj) - Returns true if *obj* is a Scheme complex number\n                              and *fn[\"imag-part\"](obj)* is zero.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_450>.\n\n    fn[\"rational-valued?\"](obj) - Returns true if *obj* is real-valued and\n                                  *fn[\"real-part\"](obj)* is rational.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_452>.\n\n    fn[\"integer-valued?\"](obj)  - Returns true if *obj* is real-valued and\n                                  *fn[\"real-part\"](obj)* is an integer.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_454>.\n\n    fn[\"exact?\"](z)   - Returns true if *z* is exact.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_456>.\n\n    fn[\"inexact?\"](z) - Returns true if *z* is inexact.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_458>.\n\n    fn.inexact(z) - Returns an inexact number equal to *z*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_460>.\n\n    fn.exact(z)   - Returns an exact number equal to *z*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_462>.\n\n    fn[\"eqv?\"](obj1, obj2) - Returns true if *obj1 === obj2* or both arguments\n                             are Scheme numbers and behave identically.\n                             Specified by <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_428>.\n\n    fn[\"=\"](z, z, z...) - Returns true if all arguments are mathematically\n                          equal, though perhaps differing in exactness.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_464>.\n\n    fn[\"<\"](x, x, x...) - Returns true if arguments increase monotonically.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_466>.\n\n    fn[\">\"](x, x, x...) - Returns true if arguments decrease monotonically.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_468>.\n\n    fn[\"<=\"](x, x, x...) - Returns true if arguments are monotonically\n                           nondecreasing.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_470>.\n\n    fn[\">=\"](x, x, x...) - Returns true if arguments are monotonically\n                           nonincreasing.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_472>.\n\n    fn[\"zero?\"](z)      - Returns true if *z* equals zero.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_474>.\n\n    fn[\"positive?\"](x)  - Returns true if *x* is positive.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_476>.\n\n    fn[\"negative?\"](x)  - Returns true if *x* is negative.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_478>.\n\n    fn[\"odd?\"](n)       - Returns true if *n* is odd.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_480>.\n\n    fn[\"even?\"](n)      - Returns true if *n* is even.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_482>.\n\n    fn[\"finite?\"](x)    - Returns true if *x* is finite.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_484>.\n\n    fn[\"infinite?\"](x)  - Returns true if *x* is plus or minus infinity.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_486>.\n\n    fn[\"nan?\"](x)       - Returns true if *x* is a NaN.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_488>.\n\n    fn.max(x, x...)     - Returns the greatest argument.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_490>.\n\n    fn.min(x, x...)     - Returns the least argument.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_492>.\n\n    fn[\"+\"](z...)       - Returns the sum of the arguments.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_494>.\n\n    fn[\"*\"](z...)       - Returns the product of the arguments.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_496>.\n\n    fn[\"-\"](z)          - Returns the negation of *z* (-*z*).\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_498>.\n\n    fn[\"-\"](z1, z2...)  - Returns *z1* minus the sum of the number(s) *z2*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_500>.\n\n    fn[\"/\"](z)          - Returns the reciprocal of *z* (1 / *z*).\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_502>.\n\n    fn[\"/\"](z1, z2...)  - Returns *z1* divided by the product of the number(s)\n    *z2*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_504>.\n\n    fn.abs(x)           - Returns the absolute value of *x*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_506>.\n\n    fn[\"div-and-mod\"](x, y) - Returns *fn.div(x, y)* and *fn.mod(x, y)*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_508>.\n\n    fn.div(x, y)        - Returns the greatest integer less than or equal to\n                          *x* / *y*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_510>.\n\n    fn.mod(x, y)        - Returns *x* - (*y* * fn.div(*x*, *y*)).\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_512>.\n\n    fn[\"div0-and-mod0\"](x, y) - Returns *fn.div0(x, y)* and *fn.mod0(x, y)*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_514>.\n\n    fn.div0(x, y)       - Returns the integer nearest *x* / *y*, ties go lower.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_516>.\n\n    fn.mod0(x, y)       - Returns *x* - (*y* * fn.div0(*x*, *y*)).\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_518>.\n\n    fn.gcd(n...) - Returns the arguments' greatest common non-negative divisor.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_520>.\n\n    fn.lcm(n...) - Returns the arguments' least common positive multiple.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_522>.\n\n    fn.numerator(q)     - Returns *q* * *fn.denominator(q)*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_524>.\n\n    fn.denominator(q)   - Returns the smallest positive integer which when\n                          multiplied by *q* yields an integer.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_526>.\n\n    fn.floor(x)         - Returns the greatest integer not greater than *x*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_528>.\n\n    fn.ceiling(x)       - Returns the least integer not less than *x*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_530>.\n\n    fn.truncate(x)      - Returns the closest integer between 0 and *x*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_532>.\n\n    fn.round(x)         - Returns the closest integer to *x*, ties go even.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_534>.\n\n    fn.rationalize(x, y) - Returns the simplest fraction within *y* of *x*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_536>.\n\n    fn.exp(z)           - Returns e to the *z*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_540>.\n\n    fn.log(z)           - Returns the natural logarithm of *z*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_542>.\n\n    fn.log(z1, z2)      - Returns the base-*z2* logarithm of *z1*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_544>.\n\n    fn.sin(z)           - Returns the sine of *z*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_546>.\n\n    fn.cos(z)           - Returns the cosine of *z*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_548>.\n\n    fn.tan(z)           - Returns the tangent of *z*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_550>.\n\n    fn.asin(z)          - Returns a number whose sine is *z*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_552>.\n\n    fn.acos(z)          - Returns a number whose cosine is *z*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_554>.\n\n    fn.atan(z)          - Returns a number whose tangent is *z*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_556>.\n\n    fn.atan(y, x)       - Returns the angle that passes through *(x,y)*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_558>.\n\n    fn.sqrt(z)          - Returns the square root of *z*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_560>.\n\n    fn[\"exact-integer-sqrt\"](k) - Returns maximal exact s and non-negative r\n                                  such that s*s + r = *k*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_562>.\n\n    fn.expt(z1, z2) - Returns *z1* to the power *z2*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_564>.\n\n    fn[\"make-rectangular\"](x, y) - Returns the complex number *x + iy*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_566>.\n\n    fn[\"make-polar\"](r, theta) - Returns the complex number with magnitude *r*\n                                 and angle *theta*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_568>.\n\n    fn[\"real-part\"](z) - Returns x such that *z* = x + iy.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_570>.\n\n    fn[\"imag-part\"](z) - Returns y such that *z* = x + iy.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_572>.\n\n    fn.magnitude(z)    - Returns the magnitude of *z*.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_574>.\n\n    fn.angle(z)        - Returns *fn.atan(y,x)* where *z* = x + iy.\n    Specified by: <R6RS at http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_576>.\n\n    Function: fn[\"number->string\"](z)\n    Converts *z* to a string, base 10.\n\n    For exact *z*, *number->string* retains full precision.  Exact\n    fractions are expressed as numerator + \"/\" + denominator.\n    Examples:\n\n    > fn[\"number->string\"](fn[\"string->number\"](\"#e1.2\"))  // \"6/5\"\n    > fn[\"number->string\"](fn[\"/\"](\"12\", \"-8\"))            // \"-3/2\"\n\n    Infinities are \"+inf.0\" and \"-inf.0\".  NaN is \"+nan.0\".\n\n    The result always yields a number equal to *z* (in the sense of\n    <fn[\"eqv?\"](obj1, obj2)>) when passed to\n    <fn[\"string->number\"](string)>.\n\n    Specified by: <R6RS at\n    http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_578>\n\n    See Also: <fn[\"string->number\"](string)>.\n\n    Function: fn[\"number->string\"](z, radix)\n    Converts *z* to a string, base *radix*.\n    *radix* must be exact 2, 8, 10, or 16.\n\n    The output never contains an explicit radix prefix.\n\n    The result always yields a value equal to *z* (in the sense of\n    <fn[\"eqv?\"](obj1, obj2)>) when converted back to a number by\n    <fn[\"string->number\"](string, radix)>.\n\n    Specified by: <R6RS at\n    http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_580>\n\n    See Also: <fn[\"string->number\"](string, radix)>.\n\n    Function: fn[\"number->string\"](z, radix, precision)\n    Converts and suffixes *z* with a count of significant bits.\n\n    Appends \"|p\" to each inexact real component of *z* where p is the\n    smallest mantissa width not less than *precision* needed to\n    represent the component exactly.\n\n    Specified by: <R6RS at\n    http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_582>\n\n    Function: fn[\"string->number\"](string)\n    Parses *string* as a Scheme number.  Returns *false* if unable.\n\n    Examples:\n\n    > \"1\"       - exact 1.\n    > \"1.\"      - inexact 1, same as \"1.0\".\n    > \"1/2\"     - exact one-half, same as \"2/4\" etc.\n    > \"0.5\"     - inexact 0.5.\n    > \"12e3\"    - inexact 12000.\n    > \"i\"       - the imaginary unit.\n    > \"-2+1/2i\" - exact complex number.\n    > \"2.@1\"    - complex in polar coordinates, r=2.0, theta=1.0.\n    > \"+inf.0\"  - positive infinity.\n    > \"-inf.0\"  - negative infinity.\n    > \"+nan.0\"  - IEEE NaN (not-a-number).\n    > \"#e0.5\"   - exact one-half, forced exact by prefix #e.\n    > \"#i1/2\"   - 0.5, inexact by prefix #i.\n    > \"#x22\"    - exact 34; prefix #x hexadecimal.\n    > \"#o177\"   - exact 127; prefix #o octal.\n    > \"#b101\"   - exact 5; prefix #b binary.\n    > \"#i#b101\" - inexact 5.0.\n    > \"#b#i101\" - same.\n    > \"1.2345678|24\" - rounded as if to single-precision (about 1.23456776).\n\n    Specified by: <R6RS at\n    http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_584>\n\n    See Also: <fn[\"number->string\"](z)>, <R6RS section 4.2.8: Lexical\n    syntax: Numbers at\n    http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-7.html#node_sec_4.2.8>\n\n    Function: fn[\"string->number\"](string, radix)\n    Parses *string* as a Scheme number using *radix* as default radix.\n\n    *radix* must be exact 2, 8, 10, or 16.  If *string* contains a\n    radix prefix, the prefix takes precedence over *radix*.\n\n    Specified by: <R6RS at\n    http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_586>\n\n    See Also: <fn[\"number->string\"](z, radix)>.\n*/\n\n    \"eqv?\"      : fn_isEqv,\n    \"number?\"   : fn_isNumber,\n    \"complex?\"  : fn_isComplex,\n    \"real?\"     : fn_isReal,\n    \"rational?\" : fn_isRational,\n    \"integer?\"  : fn_isInteger,\n    \"real-valued?\"     : fn_isRealValued,\n    \"rational-valued?\" : fn_isRationalValued,\n    \"integer-valued?\"  : fn_isIntegerValued,\n\n    \"exact?\"   : makeUnary(\"SN_isExact\"),\n    \"inexact?\" : makeUnary(\"SN_isInexact\"),\n\n    inexact : makeUnary(\"SN_toInexact\"),\n    exact   : makeUnary(\"SN_toExact\"),\n\n    \"=\"  : fn_equals,\n    \"<\"  : makeComparator(\"SN_lt\"),\n    \">\"  : makeComparator(\"SN_gt\"),\n    \"<=\" : makeComparator(\"SN_le\"),\n    \">=\" : makeComparator(\"SN_ge\"),\n\n    \"zero?\"     : makeUnary(\"SN_isZero\"),\n    \"positive?\" : makeUnary(\"SN_isPositive\"),\n    \"negative?\" : makeUnary(\"SN_isNegative\"),\n    \"odd?\"      : makeUnary(\"SN_isOdd\"),\n    \"even?\"     : makeUnary(\"SN_isEven\"),\n    \"finite?\"   : makeUnary(\"SN_isFinite\"),\n    \"infinite?\" : makeUnary(\"SN_isInfinite\"),\n    \"nan?\"      : makeUnary(\"SN_isNaN\"),\n\n    max : makeMaxMin(\"SN_gt\"),\n    min : makeMaxMin(\"SN_lt\"),\n\n    \"+\" : function() {\n        var ret = ZERO;\n        var len = arguments.length;\n        var i = 0;\n        while (i < len)\n            ret = ret.SN_add(SN(arguments[i++]));\n        return ret;\n    },\n\n    \"*\" : function() {\n        var ret = ONE;\n        var len = arguments.length;\n        var i = 0;\n        while (i < len)\n            ret = ret.SN_multiply(SN(arguments[i++]));\n        return ret;\n    },\n\n    \"-\" : function(a) {\n        var len = arguments.length;\n\n        switch (len) {\n        case 0: args1plus(arguments);\n        case 1: return SN(a).SN_negate();\n        }\n        var ret = SN(a);\n        var i = 1;\n        while (i < len)\n            ret = ret.SN_subtract(SN(arguments[i++]));\n        return ret;\n    },\n\n    \"/\" : function(a) {\n        var len = arguments.length;\n\n        switch (len) {\n        case 0: args1plus(arguments);\n        case 1: return SN(a).SN_reciprocal();\n        case 2: return SN(a).SN_divide(SN(arguments[1]));\n        }\n        var product = ONE;\n        var i = 1;\n        while (i < len)\n            product = product.SN_multiply(SN(arguments[i++]));\n        return SN(a).SN_divide(product);\n    },\n\n    abs             : makeUnary(\"SN_abs\"),\n    \"div-and-mod\"   : makeDivMod(false, 2),\n    div             : makeDivMod(false, 0),\n    mod             : makeDivMod(false, 1),\n    \"div0-and-mod0\" : makeDivMod(true, 2),\n    div0            : makeDivMod(true, 0),\n    mod0            : makeDivMod(true, 1),\n\n    gcd : function() {\n        var ret = ZERO;\n        var len = arguments.length;\n        var exact = true;\n        for (var i = 0; i < len; i++) {\n            var arg = toInteger(arguments[i]);\n            exact = exact && arg.SN_isExact();\n            ret = gcdNonneg(ret, arg.SN_abs().SN_toExact());\n        }\n        ret = ret.SN_abs();\n        return (exact ? ret : ret.SN_toInexact());\n    },\n\n    lcm : function() {\n        var ret = ONE;\n        var len = arguments.length;\n        var exact = true;\n        for (var i = 0; i < len; i++) {\n            var arg = toInteger(arguments[i]);\n            exact = exact && arg.SN_isExact();\n            arg = arg.SN_abs().SN_toExact();\n            ret = ret.SN_multiply(arg).SN_divide(gcdNonneg(ret, arg.SN_abs()));\n        }\n        return (exact ? ret : ret.SN_toInexact());\n    },\n\n    numerator   : makeUnary(\"SN_numerator\"),\n    denominator : makeUnary(\"SN_denominator\"),\n    floor       : makeUnary(\"SN_floor\"),\n    ceiling     : makeUnary(\"SN_ceiling\"),\n    truncate    : makeUnary(\"SN_truncate\"),\n    round       : makeUnary(\"SN_round\"),\n    rationalize : rationalize,\n    exp         : makeUnary(\"SN_exp\"),\n\n    log : function(z, base) {\n        var ret = SN(z).SN_log();\n        switch (arguments.length) {\n        case 2: ret = ret.SN_divide(SN(base).SN_log());  // fall through\n        case 1: return ret;\n        default: wrongArgCount(\"1-2\", arguments);\n        }\n    },\n\n    sin  : makeUnary(\"SN_sin\"),\n    cos  : makeUnary(\"SN_cos\"),\n    tan  : makeUnary(\"SN_tan\"),\n    asin : makeUnary(\"SN_asin\"),\n    acos : makeUnary(\"SN_acos\"),\n\n    atan : function(y, x) {\n        switch (arguments.length) {\n        case 1: return SN(y).SN_atan();\n        case 2: return toReal(y).SN_atan2(toReal(x));\n        default: wrongArgCount(\"1-2\", arguments);\n        }\n    },\n\n    sqrt : makeUnary(\"SN_sqrt\"),\n    \"exact-integer-sqrt\" : makeUnary(\"SN_exactIntegerSqrt\"),\n    expt : makeBinary(\"SN_expt\"),\n\n    \"make-rectangular\" : function(x, y) {\n        arguments.length === 2 || args2(arguments);\n        return makeRectangular(toReal(x), toReal(y));\n    },\n\n    \"make-polar\" : function(r, theta) {\n        arguments.length === 2 || args2(arguments);\n        return makePolar(toReal(r), toReal(theta));\n    },\n\n    \"real-part\" : makeUnary(\"SN_realPart\"),\n    \"imag-part\" : makeUnary(\"SN_imagPart\"),\n    magnitude   : makeUnary(\"SN_magnitude\"),\n    angle       : makeUnary(\"SN_angle\"),\n\n    \"number->string\" : function(z, radix, precision) {\n        var r = radix;\n        switch (arguments.length) {\n        case 3:\n            precision = toInteger(precision);\n            assertExact(precision);\n            // fall through\n        case 2:\n            r = assertExact(toInteger(r)).valueOf();\n            if (!uintegerPattern[r])\n                raise(\"&assertion\", \"invalid radix\", radix);\n            // fall through\n        case 1: break;\n        default: wrongArgCount(\"1-3\", arguments);\n        }\n        return SN(z).SN_numberToString(r, precision);\n    },\n\n    \"string->number\" : function(s, radix) {\n        switch (arguments.length) {\n        case 1:\n        case 2: return stringToNumber(String(s), radix);\n        default: wrongArgCount(\"1-2\", arguments);\n        }\n    }\n};\n\n// Scheme function helpers.\n\nfunction wrongArgCount(expected, a) {\n    var msg = \"Function\"\n\n    for (name in fn) {\n        if (fn[name] === a.callee) {\n            msg += \" '\" + name + \"'\";\n            break;\n        }\n    }\n    raise(\"&assertion\", msg + \" expected \" + expected +\n          \" argument\" + (expected == \"1\" ? \"\" : \"s\") + \", got \" + a.length);\n}\n\nfunction args1(a) { a.length === 1 || wrongArgCount(1, a); }\nfunction args2(a) { a.length === 2 || wrongArgCount(2, a); }\n\nfunction args1plus(a) { a.length > 0 || wrongArgCount(\"1 or more\", a); }\nfunction args2plus(a) { a.length > 1 || wrongArgCount(\"2 or more\", a); }\n\nfunction fn_isEqv(a, b) {\n    arguments.length === 2 || args2(arguments);\n    if (a === b)\n        return true;\n    a = SN(a);\n    b = SN(b);\n    return (a.SN_eq(b) && a.SN_isExact() === b.SN_isExact());\n}\n\nfunction fn_isNumber(x) {\n    arguments.length === 1 || args1(arguments);\n    return isNumber(x);\n}\n\nfunction fn_isComplex(x) {\n    arguments.length === 1 || args1(arguments);\n    return isNumber(x) && x.SN_isComplex();\n}\n\nfunction fn_isReal(x) {\n    arguments.length === 1 || args1(arguments);\n    return isNumber(x) && x.SN_isReal();\n}\n\nfunction fn_isRational(x) {\n    arguments.length === 1 || args1(arguments);\n    return isNumber(x) && x.SN_isRational();\n}\n\nfunction fn_isInteger(x) {\n    arguments.length === 1 || args1(arguments);\n    return isNumber(x) && x.SN_isInteger();\n}\n\nfunction fn_isRealValued(x) {\n    arguments.length === 1 || args1(arguments);\n    return isNumber(x) && x.SN_imagPart().SN_isZero();\n}\n\nfunction fn_isRationalValued(x) {\n    arguments.length === 1 || args1(arguments);\n    return fn_isRealValued(x) && x.SN_realPart().SN_isRational();\n}\n\nfunction fn_isIntegerValued(x) {\n    arguments.length === 1 || args1(arguments);\n    return fn_isRealValued(x) && x.SN_realPart().SN_isInteger();\n}\n\nfunction fn_equals(a, b) {\n    var len = arguments.length;\n    len > 1 || args2plus(arguments);\n    a = SN(a);\n    for (var i = 1; i < len; i++) {\n        if (!a.SN_eq(SN(arguments[i])))\n            return false;\n    }\n    return true;\n}\n\nfunction makeUnary(method) {\n    function unary(a) {\n        arguments.length === 1 || args1(arguments);\n        return SN(a)[method]();\n    }\n    return unary;\n}\n\nfunction makeBinary(method) {\n    function binary(a, b) {\n        arguments.length === 2 || args2(arguments);\n        return SN(a)[method](SN(b));\n    }\n    return binary;\n}\n\nfunction makeComparator(cmp) {\n    function comparator(a, b) {\n        var len = arguments.length;\n        len > 1 || args2plus(arguments);\n        b = toReal(b);\n        if (!toReal(a)[cmp](b))\n            return false;\n        for (var i = 2; i < len; i++) {\n            var c = toReal(arguments[i]);\n            if (!b[cmp](c))\n                return false;\n            b = c;\n        }\n        return true;\n    }\n    return comparator;\n}\n\nfunction makeMaxMin(cmp) {\n    function maxMin(a) {\n        var len = arguments.length;\n        len > 0 || args1plus(arguments);\n\n        var ret = toReal(a);\n        var exact = ret.SN_isExact();\n\n        for (var i = 1; i < len; i++) {\n            var x = toReal(arguments[i]);\n            if (x.SN_isNaN())\n                return x;\n            if (exact) {\n                exact = x.SN_isExact();\n                if (!exact)\n                    ret = ret.SN_toInexact();  // XXX Cheaper comparisons?\n            }\n            if (x[cmp](ret) !== false) {\n                ret = x;\n            }\n        }\n        return exact ? ret : ret.SN_toInexact();\n    }\n    return maxMin;\n}\n\nfunction divModArg2Zero(arg) {\n    raise(\"&assertion\", \"div/mod second argument is zero\", arg);\n}\n\nfunction makeDivMod(is0, which) {\n    function divMod(x, y) {\n        arguments.length === 2 || args2(arguments);\n        x = toReal(x);\n        y = toReal(y);\n\n        if (!x.SN_isFinite())\n            raise(\"&assertion\", \"div/mod first argument is not finite\", x);\n        if (y.SN_isZero())\n            divModArg2Zero(y);\n\n        if (!is0) {\n            switch (which) {\n            case 0: return x.SN_div(y);\n            case 1: return x.SN_mod(y);\n            case 2: default: return x.SN_divAndMod(y);\n            }\n        }\n\n        var dm = x.SN_divAndMod(y);\n        var m = dm[1];\n        var yabs = y.SN_abs();\n\n        if (m.SN_add(m).SN_ge(yabs)) {\n            switch (which) {\n            case 0: return dm[0].SN_add(y.SN_isNegative() ? M_ONE : ONE);\n            case 1: return m.SN_subtract(yabs);\n            case 2: default: return [dm[0].SN_add(y.SN_isNegative() ?\n                                                  M_ONE : ONE),\n                                     m.SN_subtract(yabs)];\n            }\n        }\n        switch (which) {\n        case 0: return dm[0];\n        case 1: return m;\n        case 2: default: return dm;\n        }\n    }\n    return divMod;\n}\n\nfunction rationalize(x, delta) {\n    args2(arguments);\n    x = SN(x);\n    delta = SN(delta);\n\n    // Handle weird cases first.\n    if (!x.SN_isFinite() || !delta.SN_isFinite()) {\n        assertReal(x);\n        assertReal(delta);\n        if (delta.SN_isInfinite())\n            return (x.SN_isFinite() ? INEXACT_ZERO : NAN);\n        if (delta.SN_isNaN())\n            return delta;\n        return x;\n    }\n\n    if (delta.SN_isZero())\n        return x;\n\n    delta = delta.SN_abs();  // It's what PLT and Mosh seem to do.\n\n    var x0 = x.SN_subtract(delta);\n    var x1 = x.SN_add(delta);\n    var a = x0.SN_floor();\n    var b = x1.SN_floor();\n\n    if (a.SN_ne(b)) {\n        var negative = a.SN_isNegative();\n        if (b.SN_isNegative() != negative)\n            return (a.SN_isExact() ? ZERO : INEXACT_ZERO);\n        return (negative ? b : x0.SN_ceiling());\n    }\n    var cf = [];  // Continued fraction, b implied.\n\n    while (true) {\n        x0 = x0.SN_subtract(a);\n        if (x0.SN_isZero())\n            break;\n        x1 = x1.SN_subtract(a);\n        if (x1.SN_isZero())\n            break;\n\n        x0 = x0.SN_reciprocal();\n        x1 = x1.SN_reciprocal();\n        a = x0.SN_floor();\n\n        switch (a.SN_compare(x1.SN_floor())) {\n        case -1: cf.push(x0.SN_ceiling()); break;\n        case  1: cf.push(x1.SN_ceiling()); break;\n        case 0: default:\n            cf.push(a);\n            continue;\n        }\n        break;\n    }\n    var ret = ZERO;\n    var i = cf.length;\n    while (i--)\n        ret = ret.SN_add(cf[i]).SN_reciprocal();\n    return ret.SN_add(b);\n}\n\n//\n// Flonum: Inexact real as a native number.\n//\n\nDISP.Flonum.SN_isExact    = retFalse;\nDISP.Flonum.SN_isInexact  = retTrue;\nDISP.Flonum.SN_isComplex  = retTrue;\nDISP.Flonum.SN_isReal     = retTrue;\n\nDISP.Flonum.SN_debug = function() {\n    return \"Flonum(\" + this.SN_numberToString() + \")\";\n};\n\n// Return a string of \"0\" and \"1\" characters, possibly including a \".\"\n// and possibly a leading \"-\", that in base 2 equals x.  This works by\n// calling Number.prototype.toString with a radix of 2.  Specification\n// ECMA-262 Edition 5 (December 2009) does not strongly assert that\n// this works.  As an alternative, should this prove non-portable,\n// nativeDenominator could instead do:\n// for (d = 1; x !== floor(x); d *= 2) { x *= 2; } return d;\nfunction numberToBinary(x) {\n    return x.toString(2);\n}\n\nfunction nativeDenominatorLog2(x) {\n    //assert(typeof x === \"number\");\n    //assert(_isFinite(x));\n    var s = numberToBinary(abs(x));\n    var i = s.indexOf(\".\");\n    if (i === -1)\n        return 0;\n    return s.length - i - 1;\n}\n\nfunction nativeDenominator(x) {\n    // Get the \"denominator\" of a floating point value.\n    // The result will be a power of 2.\n    //assert(_isFinite(x));\n    return pow(2, nativeDenominatorLog2(x));\n}\n\nDISP.Flonum.SN_numberToString = function(radix, precision) {\n    if (radix && radix != 10 && _isFinite(this))\n        return \"#i\" + this.SN_toExact().SN_numberToString(radix);\n\n    if (!_isFinite(this)) {\n        if (_isNaN(this))\n            return(\"+nan.0\");\n        return (this > 0 ? \"+inf.0\" : \"-inf.0\");\n    }\n\n    var s = (+this).toString();\n\n    if (s.indexOf('.') === -1) {\n        // Force the result to contain a decimal point as per R6RS.\n        var e = s.indexOf('e');\n        if (e === -1)\n            s += \".\";\n        else\n            s = s.substring(0, e) + \".\" + s.substring(e);\n    }\n\n    if (precision != undefined) {\n        if (precision < 53) {\n            var bits = numberToBinary(+this).replace(/[-+.]/g, \"\")\n                .replace(/^0+/, \"\").replace(/0+$/, \"\").length;\n            if (precision < bits)\n                precision = bits;\n        }\n        s += \"|\" + precision;\n    }\n\n    return s;\n};\n\nDISP.Flonum.SN_realPart = retThis;\n\nDISP.Flonum.SN_imagPart = function() {\n    return ZERO;\n};\n\nDISP.Flonum.SN_denominator = function() {\n    return floPow(2, nativeDenominatorLog2(+assertRational(this)));\n};\n\nDISP.Flonum.SN_numerator = function() {\n    return toFlonum(this * nativeDenominator(+assertRational(this)));\n};\n\nDISP.Flonum.SN_isInteger = function() {\n    return _isFinite(this) && this == floor(this);\n};\n\nDISP.Flonum.SN_isFinite = function() {\n    return _isFinite(this);\n};\nDISP.Flonum.SN_isRational = DISP.Flonum.SN_isFinite;\n\nDISP.Flonum.SN_isZero = function() {\n    return this == 0;\n};\n\nDISP.Flonum.SN_isPositive = function() {\n    return this > 0;\n};\n\nDISP.Flonum.SN_isNegative = function() {\n    return this < 0;\n};\n\nDISP.Flonum.SN_sign = function() {\n    return (this == 0 ? 0 : (this > 0 ? 1 : -1));\n};\n\n// XXX I think we can do without SN_isUnit.\nDISP.Flonum.SN_isUnit = function() {\n    return this == 1 || this == -1;\n};\n\nDISP.Flonum.SN_isInfinite = function() {\n    return !_isFinite(this) && !_isNaN(this);\n};\n\nDISP.Flonum.SN_isNaN = function() {\n    return _isNaN(this);\n};\n\nDISP.Flonum.SN_isEven = function() {\n    //assert(this == floor(this));\n    return (this & 1) === 0;\n};\n\nDISP.Flonum.SN_isOdd = function() {\n    //assert(this == floor(this));\n    return (this & 1) === 1;\n};\n\nDISP.Flonum.SN_eq = function(z) { return z.SN__eq_Flonum(this); };\nDISP.Flonum.SN_ne = function(z) { return z.SN__ne_Flonum(this); };\nDISP.Flonum.SN_gt = function(x) { return assertReal(x).SN__gt_Flonum(this); };\nDISP.Flonum.SN_lt = function(x) { return assertReal(x).SN__lt_Flonum(this); };\nDISP.Flonum.SN_ge = function(x) { return assertReal(x).SN__ge_Flonum(this); };\nDISP.Flonum.SN_le = function(x) { return assertReal(x).SN__le_Flonum(this); };\n\n// XXX I think we can do without SN_compare and SN__compare_*.\nDISP.Flonum.SN_compare = function(x) {\n    return assertReal(x).SN__compare_Flonum(this);\n};\n\n// Note operand order!\nDISP.Flonum.SN__eq_R = function(x) { return +x == this; };\nDISP.Flonum.SN__ne_R = function(x) { return +x != this; };\nDISP.Flonum.SN__gt_R = function(x) { return x > this; };\nDISP.Flonum.SN__lt_R = function(x) { return x < this; };\nDISP.Flonum.SN__ge_R = function(x) { return x >= this; };\nDISP.Flonum.SN__le_R = function(x) { return x <= this; };\n\nDISP.Flonum.SN__compare_R = function(x) {\n    if (+x == this) return 0;\n    if (x < this) return -1;\n    if (x > this) return 1;\n    return NaN;\n};\n\nfunction numberToEI(n) {\n    if (n < 9007199254740992 && n > -9007199254740992)\n        return toEINative(n);\n    return new EIBig(numberToBigInteger(n));\n}\n\nfunction nativeToExact(x) {\n    if (!_isFinite(x))\n        raise(\"&implementation-violation\",\n              \"inexact argument has no reasonably close exact equivalent\", x);\n\n    var d = nativeDenominator(x);\n    var n;\n\n    if (d === 1)\n        return numberToEI(x);\n\n    if (_isFinite(d)) {\n        n = x * d;\n        d = numberToEI(d);\n    }\n    else {\n        // Denormal x.\n        var dl2 = nativeDenominatorLog2(x);\n        n = x * 9007199254740992;\n        n *= pow(2, dl2 - 53);\n        d = TWO.SN_expt(toEINative(dl2));\n    }\n    //assert(_isFinite(n));\n    return canonicalEQ(numberToEI(n), d);\n}\n\nDISP.Flonum.SN_toExact = function() {\n    return nativeToExact(+this);\n};\n\nDISP.Flonum.SN_toInexact = retThis;\n\nDISP.Flonum.SN_add = function(z) {\n    return z.SN__add_Flonum(this);\n};\nDISP.Flonum.SN_subtract = function(z) {\n    return z.SN__subtract_Flonum(this);\n};\nDISP.Flonum.SN_multiply = function(z) {\n    return z.SN__multiply_Flonum(this);\n};\nDISP.Flonum.SN_divide = function(z) {\n    return z.SN__divide_Flonum(this);\n};\n\nDISP.Flonum.SN__add_R = function(x) {\n    return toFlonum(x + this);\n};\nDISP.Flonum.SN__subtract_R = function(x) {\n    return toFlonum(x - this);\n};\nDISP.Flonum.SN__multiply_R = function(x) {\n    return toFlonum(x * this);\n};\nDISP.Flonum.SN__divide_R = function(x) {\n    return toFlonum(x / this);\n};\n\nDISP.Flonum.SN_negate = function() {\n    return toFlonum(-this);\n};\n\nDISP.Flonum.SN_abs = function() {\n    return (this < 0 ? toFlonum(-this) : this);\n};\n\nDISP.Flonum.SN_reciprocal = function() {\n    return toFlonum(1 / this);\n};\n\nfunction div_Flonum_R(x, y) {\n    if (y > 0)\n        return floor(x / y);\n    if (y < 0)\n        return ceil(x / y);\n    if (y == 0)\n        divModArg2Zero(toFlonum(y));\n    return NaN;\n}\nDISP.Flonum.SN_divAndMod = function(x) {\n    x = +x;\n    var div = div_Flonum_R(this, x);\n    return [toFlonum(div), toFlonum(this - (x * div))];\n};\nDISP.Flonum.SN_div = function(x) {\n    return toFlonum(div_Flonum_R(this, x));\n};\nDISP.Flonum.SN_mod = function(x) {\n    return toFlonum(this - x * div_Flonum_R(this, x));\n};\n\nDISP.Flonum.SN_square = function() {\n    return toFlonum(this * this);\n};\n\nDISP.Flonum.SN_round = function() {\n    var ret = floor(this);\n    var diff = this - ret;\n    if (diff < 0.5) return toFlonum(ret);\n    if (diff > 0.5) return toFlonum(ret + 1);\n    return toFlonum(2 * round(this / 2));\n};\n\nDISP.Flonum.SN_truncate = function() {\n    return this < 0 ? floCeil(this) : floFloor(this);\n};\n\nDISP.Flonum.SN_ceiling = function() {\n    return floCeil(this);\n};\n\nfunction funcToMeth(fn) {\n    return function() {\n        return fn(this);\n    };\n}\nDISP.Flonum.SN_abs   = funcToMeth(floAbs);\nDISP.Flonum.SN_atan  = funcToMeth(floAtan);\nDISP.Flonum.SN_cos   = funcToMeth(floCos);\nDISP.Flonum.SN_exp   = funcToMeth(floExp);\nDISP.Flonum.SN_floor = funcToMeth(floFloor);\nDISP.Flonum.SN_sin   = funcToMeth(floSin);\nDISP.Flonum.SN_tan   = funcToMeth(floTan);\n\nfunction cplxFuncToMeth(mathFunc, complexFunc) {\n    return function() {\n        var ret = mathFunc(this);\n        if (_isNaN(ret))\n            return complexFunc(this);\n        return toFlonum(ret);\n    };\n}\nDISP.Flonum.SN_acos = cplxFuncToMeth(Math.acos, complexAcos);\nDISP.Flonum.SN_asin = cplxFuncToMeth(Math.asin, complexAsin);\n\nDISP.Flonum.SN_log = function() {\n    if (this < 0)\n        return complexLog(this);\n    return floLog(this);\n};\n\nDISP.Flonum.SN_sqrt = function() {\n    if (this >= 0)\n        return toFlonum(sqrt(this));\n    if (_isNaN(this))\n        return this;\n    return inexactRectangular(INEXACT_ZERO, floSqrt(-this));\n};\n\nDISP.Flonum.SN_atan2 = function(x) {\n    return floAtan2(this, x);\n};\n\nDISP.Flonum.SN_expt = function(z) {\n    return z.SN__expt_Flonum(this);\n};\n\n// Some famous flonums:\n\nvar INEXACT_ZERO = toFlonum(0);\n\nvar INFINITY     = toFlonum(Number.POSITIVE_INFINITY);\nvar M_INFINITY   = toFlonum(Number.NEGATIVE_INFINITY);\nvar NAN          = toFlonum(Number.NaN);\n\nvar PI           = toFlonum(Math.PI);\n\n//\n// C: Complex abstract base class.\n//\n\nDISP.C.SN_isReal     = retFalse;\nDISP.C.SN_isRational = retFalse;\nDISP.C.SN_isInteger  = retFalse;\nDISP.C.SN_isZero     = retFalse;\nDISP.C.SN_isUnit     = retFalse;\n\nDISP.C.SN_isComplex  = retTrue;\n\nDISP.C.SN_numberToString = pureVirtual;\n\nDISP.C.toString = function(radix) {\n    return this.SN_numberToString(radix);\n};\nDISP.C.valueOf = function() {\n    if (this.SN_imagPart().SN_isZero())\n        return this.SN_realPart().valueOf();\n    return NaN;\n};\n\nDISP.C.toFixed = pureVirtual;\nDISP.C.toExponential = pureVirtual;\nDISP.C.toPrecision = pureVirtual;\n\nDISP.C.toLocaleString = function() {\n    return this.toString();\n};\n\nDISP.C.SN_debug = function() { return \"C\"; };\n\n// vvvv You shouldn't need this if you use only real numbers. vvvv\n\nDISP.C.SN_sqrt = function() {\n    return makePolar(this.SN_magnitude().SN_sqrt(),\n                     this.SN_angle().SN_divide(TWO));\n};\n\n// Complex transcendental functions here for completeness, not optimized.\n\nfunction complexLog(z) {\n    return makeRectangular(z.SN_magnitude().SN_log(), z.SN_angle());\n};\n\nfunction complexAsin(z) {\n    return M_I.SN_multiply(I.SN_multiply(z)\n                           .SN_add(ONE.SN_subtract(z.SN_square()).SN_sqrt())\n                           .SN_log());\n}\n\nfunction complexAcos(z) {\n    return PI.SN_divide(TWO).SN_subtract(complexAsin(z));\n}\n\nfunction complexAtan(z) {\n    var iz = I.SN_multiply(z);\n    return ONE.SN_add(iz).SN_log().SN_subtract(ONE.SN_subtract(iz).SN_log())\n        .SN_divide(TWO).SN_divide(I);\n}\n\nDISP.C.SN_log  = function() { return complexLog (this); };\nDISP.C.SN_asin = function() { return complexAsin(this); };\nDISP.C.SN_acos = function() { return complexAcos(this); };\nDISP.C.SN_atan = function() { return complexAtan(this); };\n\nDISP.C.SN_sin = function() {\n    var iz = I.SN_multiply(this);\n    return iz.SN_exp().SN_subtract(iz.SN_negate().SN_exp())\n        .SN_divide(TWO).SN_divide(I);\n};\n\nDISP.C.SN_cos = function() {\n    var iz = I.SN_multiply(this);\n    return iz.SN_exp().SN_add(iz.SN_negate().SN_exp()).SN_divide(TWO);\n};\n\nDISP.C.SN_tan = function() {\n    return this.SN_sin().SN_divide(this.SN_cos());\n};\n\n// ^^^^ You shouldn't need this if you use only real numbers. ^^^^\n\n//\n// R: Real abstract base class.\n//\n\nDISP.R.SN_isReal = retTrue;\n\nDISP.R.SN_debug = function() { return \"R\"; };\n\nDISP.R.SN_realPart = retThis;\n\n// Methods implemented generically using more basic operations.\n\nDISP.R.SN_magnitude = function() {\n    return this.SN_abs();\n};\n\nDISP.R.SN_angle = function() {\n    return this.SN_isNegative() ? PI : ZERO;\n};\n\n// Commented because they are always overridden.\n// DISP.R.SN_isPositive = function() {\n//     return this.SN_sign() > 0;\n// };\n// DISP.R.SN_isNegative = function() {\n//     return this.SN_sign() < 0;\n// };\n// DISP.R.SN_sign = function() {\n//     return this.SN_compare(ZERO);\n// };\n\n// Dispatches.\n\nDISP.R.SN__eq_Flonum = DISP.Flonum.SN__eq_R;\nDISP.R.SN__ne_Flonum = DISP.Flonum.SN__ne_R;\n\nDISP.R.SN__eq_Rectangular = function(z) {\n    return z._y.SN_isZero() && z._x.SN_eq(this);\n};\nDISP.R.SN__ne_Rectangular = function(z) {\n    return !z._y.SN_isZero() || z._x.SN_ne(this);\n};\n\nDISP.R.SN__gt_Flonum = DISP.Flonum.SN__gt_R;\nDISP.R.SN__lt_Flonum = DISP.Flonum.SN__lt_R;\nDISP.R.SN__ge_Flonum = DISP.Flonum.SN__ge_R;\nDISP.R.SN__le_Flonum = DISP.Flonum.SN__le_R;\nDISP.R.SN__compare_Flonum = DISP.Flonum.SN__compare_R;\n\nDISP.R.SN_compare = pureVirtual;\nDISP.R.SN_gt = function(x) { return this.SN_compare(x) > 0; };\nDISP.R.SN_lt = function(x) { return this.SN_compare(x) < 0; };\nDISP.R.SN_ge = function(x) { return this.SN_compare(x) >= 0; };\nDISP.R.SN_le = function(x) { return this.SN_compare(x) <= 0; };\n\nDISP.R.SN_add = function(z) {\n    return z.SN__add_R(this);\n};\nDISP.R.SN__add_Flonum = DISP.Flonum.SN__add_R;\n\nDISP.R.SN_subtract = function(z) {\n    return z.SN__subtract_R(this);\n};\nDISP.R.SN__subtract_Flonum = DISP.Flonum.SN__subtract_R;\n\nDISP.R.SN_multiply = function(z) {\n    return z.SN__multiply_R(this);\n};\nDISP.R.SN__multiply_Flonum = DISP.Flonum.SN__multiply_R;\n\nDISP.R.SN_divide = function(z) {\n    return z.SN__divide_R(this);\n};\nDISP.R.SN__divide_Flonum = DISP.Flonum.SN__divide_R;\n\nfunction complexExpt(b, p) {\n    if (b.SN_isZero()) {\n        if (p.SN_isZero())\n            return toFlonum(1);\n        if (p.SN_realPart().SN_isPositive())\n            return INEXACT_ZERO;\n        raise(\"&implementation-restriction\", \"invalid power for zero expt\", p);\n    }\n    return b.SN_log().SN_multiply(p).SN_exp();\n}\n\nDISP.R.SN__expt_R = function(x) {\n    // Return x to the power of this number.\n    if (x.SN_isNegative())\n        return complexExpt(x, this);\n    return floPow(x, this);\n};\n\nDISP.R.SN__expt_EI = DISP.R.SN__expt_R;\n\nDISP.R.SN__expt_EQ = function(q) {\n    // Return q to the power of this number.\n    if (q.SN_isNegative())\n        return complexExpt(q, this);\n    var num = q.SN_numerator().SN_expt(this);\n    var den = q.SN_denominator().SN_expt(this);\n\n    if (num.SN_isExact() && num.SN_isInteger() &&\n        den.SN_isExact() && den.SN_isInteger())\n        return new EQFraction(num, den);  // Known to be in lowest terms.\n\n    return num.SN_divide(den);\n};\n\nfunction divAndMod_R_R(x, y) {\n    var div = div_R_R(x, y);\n    return [div, x.SN_subtract(div.SN_multiply(y))];\n}\nfunction div_R_R(x, y) {\n    return (y.SN_isNegative()\n            ? x.SN_divide(y).SN_ceiling()\n            : x.SN_divide(y).SN_floor());\n}\nfunction mod_R_R(x, y) {\n    return x.SN_subtract(div_R_R(x, y).SN_multiply(y));\n}\n\nDISP.R.SN_divAndMod = function(x) {\n    return divAndMod_R_R(this, x);\n};\nDISP.R.SN_div = function(x) {\n    return div_R_R(this, x);\n};\nDISP.R.SN_mod = function(x) {\n    return mod_R_R(this, x);\n};\n\nDISP.R.SN__divAndMod_R = function(x) {\n    return divAndMod_R_R(x, this);\n};\nDISP.R.SN__div_R = function(x) {\n    return div_R_R(x, this);\n};\nDISP.R.SN__mod_R = function(x) {\n    return mod_R_R(x, this);\n};\n\n// These functions are always allowed to return inexact.  We, however,\n// override a few of these in ZERO and ONE.\n[\"sqrt\", \"exp\", \"log\", \"sin\", \"cos\", \"tan\", \"asin\", \"acos\", \"atan\", \"atan2\"]\n.forEach(function(name) { DISP.R[\"SN_\" + name] = DISP.Flonum[\"SN_\" + name]; });\n\n// vvvv You shouldn't need this if you use only real numbers. vvvv\n\n//\n// Rectangular: Complex numbers as xy-coordinate pairs.\n//\n\nfunction exactRectangular(x, y) {\n    //assert(x.SN_isExact());\n    //assert(y.SN_isExact());\n    if (y.SN_isZero())\n        return x;\n    if (x.SN_isZero() && y.SN_isUnit())\n        return (y.SN_isPositive() ? I : M_I);\n    return new Rectangular(x, y);\n}\n\nfunction inexactRectangular(x, y) {\n    //assert(x.SN_isInexact());\n    //assert(y.SN_isInexact());\n    return new Rectangular(x, y);\n}\n\nfunction toRectangular(x, y) {\n    //assert(x.SN_isExact() === y.SN_isExact())\n    if (x.SN_isExact())\n        return exactRectangular(x, y);\n    return new Rectangular(x, y);\n}\n\nfunction Rectangular(x, y) {\n    this._x = x;\n    this._y = y;\n}\n\nRectangular.prototype = new C();\n\nfunction xyToString(xString, yString) {\n    if (yString[0] === '-' || yString[0] === '+')\n        return xString + yString + \"i\";\n    return xString + \"+\" + yString + \"i\";\n}\n\nDISP.Rectangular.SN_numberToString = function(radix, precision) {\n    return xyToString(this._x.SN_numberToString(radix, precision),\n                      this._y.SN_numberToString(radix, precision));\n};\n\nDISP.Rectangular.toString = function(radix) {\n    radix = radix || 10;\n    return xyToString(this._x.toString(radix), this._y.toString(radix));\n};\n\nDISP.Rectangular.SN_debug = function() {\n    return \"Rectangular(\" + this._x.SN_debug()\n        + \", \" + this._y.SN_debug() + \")\";\n};\n\nDISP.Rectangular.toFixed = function(dig) {\n    return xyToString(this._x.toFixed(dig), this._y.toFixed(dig));\n};\nDISP.Rectangular.toExponential = function(dig) {\n    return xyToString(this._x.toExponential(dig), this._y.toExponential(dig));\n};\nDISP.Rectangular.toPrecision = function(prec) {\n    return xyToString(this._x.toPrecision(prec), this._y.toPrecision(prec));\n};\n\nDISP.Rectangular.SN_realPart = function() { return this._x; };\nDISP.Rectangular.SN_imagPart = function() { return this._y; };\n\nDISP.Rectangular.SN_isExact   = function() { return this._x.SN_isExact(); };\nDISP.Rectangular.SN_isInexact = function() { return this._x.SN_isInexact(); };\n\nDISP.Rectangular.SN_toInexact = function() {\n    if (this._x.SN_isInexact())\n        return this;\n    return inexactRectangular(this._x.SN_toInexact(), this._y.SN_toInexact());\n};\n\nDISP.Rectangular.SN_toExact = function() {\n    if (this._x.SN_isExact())\n        return this;\n    return exactRectangular(this._x.SN_toExact(), this._y.SN_toExact());\n};\n\nDISP.Rectangular.SN_isZero = function() {\n    return this._x.SN_isZero() && this._y.SN_isZero();\n};\n\nfunction rectMagnitude2(z) {\n    return z._x.SN_square().SN_add(z._y.SN_square());\n}\n\nDISP.Rectangular.SN_isUnit = function() {\n    return rectMagnitude2(this).SN_eq(ONE);\n};\n\nDISP.Rectangular.SN_magnitude = function() {\n    if (this._x.SN_isZero())\n        return this._y.SN_abs();\n    return rectMagnitude2(this).SN_sqrt();\n};\n\nDISP.Rectangular.SN_angle = function() {\n    return this._y.SN_atan2(this._x);\n};\n\nDISP.C.SN__eq_Rectangular = pureVirtual;\nDISP.Rectangular.SN_eq = function(z) {\n    return z.SN__eq_Rectangular(this);\n};\nDISP.Rectangular.SN__eq_Rectangular = function(z) {\n    return z._x.SN_eq(this._x) && z._y.SN_eq(this._y);\n};\nDISP.Rectangular.SN__eq_R = function(x) {\n    return this._y.SN_isZero() && x.SN_eq(this._x);\n};\n\nDISP.C.SN__ne_Rectangular = pureVirtual;\nDISP.Rectangular.SN_ne = function(z) {\n    return z.SN__ne_Rectangular(this);\n};\nDISP.Rectangular.SN__ne_Rectangular = function(z) {\n    return z._x.SN_ne(this._x) || z._y.SN_ne(this._y);\n};\nDISP.Rectangular.SN__ne_R = function(x) {\n    return !this._y.SN_isZero() || x.SN_ne(this._x);\n};\n\n// Arithmetic where the left operand is Rectangular and the right is\n// this Flonum.\n\nDISP.Flonum.SN__add_Rectangular = function(z) {\n    return inexactRectangular(toFlonum(z._x + this), z._y.SN_toInexact());\n};\nDISP.Flonum.SN__subtract_Rectangular = function(z) {\n    return inexactRectangular(toFlonum(z._x - this), z._y.SN_toInexact());\n};\nDISP.Flonum.SN__multiply_Rectangular = function(z) {\n    return inexactRectangular(toFlonum(z._x * this), toFlonum(z._y * this));\n};\nDISP.Flonum.SN__divide_Rectangular = function(z) {\n    return inexactRectangular(toFlonum(z._x / this), toFlonum(z._y / this));\n};\nDISP.Flonum.SN__expt_Rectangular = function(z) {\n    // XXX Is this any cheaper than complexExpt??\n    return makePolar(floPow(rectMagnitude2(z), this / 2),\n                     toFlonum(atan2(z._y, z._x) * this));\n};\n\n// Arithmetic where the left operand is Rectangular and the right is\n// this real number.\n\nDISP.R.SN__add_Rectangular = function(z) {\n    return makeRectangular(z._x.SN_add(this), z._y);\n};\n\nDISP.R.SN__subtract_Rectangular = function(z) {\n    return makeRectangular(z._x.SN_subtract(this), z._y);\n};\n\nDISP.R.SN__multiply_Rectangular = function(z) {\n    return toRectangular(z._x.SN_multiply(this), z._y.SN_multiply(this));\n};\n\nDISP.R.SN__divide_Rectangular = function(z) {\n    return toRectangular(z._x.SN_divide(this), z._y.SN_divide(this));\n};\n\nDISP.C.SN__add_Rectangular = pureVirtual;\nDISP.Rectangular.SN_add = function(z) {\n    return z.SN__add_Rectangular(this);\n};\nDISP.Rectangular.SN__add_R = function(x) {\n    return makeRectangular(x.SN_add(this._x), this._y);\n};\nDISP.Rectangular.SN__add_Rectangular = function(z) {\n    var x = z._x.SN_add(this._x);\n    var y = z._y.SN_add(this._y);\n    return (x.SN_isExact() ? exactRectangular : inexactRectangular)(x, y);\n};\n\nDISP.Rectangular.SN_negate = function() {\n    return toRectangular(this._x.SN_negate(), this._y.SN_negate());\n};\n\nDISP.C.SN__subtract_Rectangular = pureVirtual;\nDISP.Rectangular.SN_subtract = function(z) {\n    return z.SN__subtract_Rectangular(this);\n};\nDISP.Rectangular.SN__subtract_R = function(x) {\n    return makeRectangular(x.SN_subtract(this._x), this._y.SN_negate());\n};\nDISP.Rectangular.SN__subtract_Rectangular = function(z) {\n    var x = z._x.SN_subtract(this._x);\n    var y = z._y.SN_subtract(this._y);\n    return (x.SN_isExact() ? exactRectangular : inexactRectangular)(x, y);\n};\n\nDISP.C.SN__multiply_Rectangular = pureVirtual;\nDISP.Rectangular.SN_multiply = function(z) {\n    return z.SN__multiply_Rectangular(this);\n};\nDISP.Rectangular.SN__multiply_R = function(x) {\n    return toRectangular(x.SN_multiply(this._x), x.SN_multiply(this._y));\n};\nfunction complexMultiply(ax, ay, bx, by) {\n    return toRectangular(ax.SN_multiply(bx).SN_subtract(ay.SN_multiply(by)),\n                         ax.SN_multiply(by).SN_add(ay.SN_multiply(bx)));\n}\nDISP.Rectangular.SN__multiply_Rectangular = function(z) {\n    return complexMultiply(z._x, z._y, this._x, this._y);\n};\n\nDISP.Rectangular.SN_square = function() {\n    return toRectangular(this._x.SN_square().SN_subtract(this._y.SN_square()),\n                         this._x.SN_multiply(this._y).SN_multiply(TWO));\n};\n\nDISP.Rectangular.SN_reciprocal = function() {\n    var m2 = rectMagnitude2(this);\n    return toRectangular(this._x.SN_divide(m2),\n                         this._y.SN_divide(m2).SN_negate());\n};\n\nDISP.C.SN__divide_Rectangular = pureVirtual;\nDISP.Rectangular.SN_divide = function(z) {\n    return z.SN__divide_Rectangular(this);\n};\nfunction complexDivide(x, y, z) {  // returns (x + iy) / z\n    var m2 = rectMagnitude2(z);\n    return complexMultiply(x, y,\n                           z._x.SN_divide(m2),\n                           z._y.SN_divide(m2).SN_negate());\n}\nDISP.Rectangular.SN__divide_R = function(x) {\n    return complexDivide(x, x.SN_isExact() ? ZERO : INEXACT_ZERO, this);\n};\nDISP.Rectangular.SN__divide_Rectangular = function(z) {\n    return complexDivide(z._x, z._y, this);\n};\n\nDISP.Rectangular.SN_expt = function(z) {\n    return z.SN__expt_Rectangular(this);\n};\nDISP.Rectangular.SN__expt_C = function(z) {\n    return complexExpt(z, this);\n};\nDISP.C.SN__expt_Rectangular = DISP.Rectangular.SN__expt_C;\n\nDISP.Rectangular.SN_exp = function() {\n    return makePolar(this._x.SN_exp(), this._y);\n};\n\n// ^^^^ You shouldn't need this if you use only real numbers. ^^^^\n\n//\n// ER: Exact real abstract base class.\n//\n\nDISP.ER.SN_isExact    = retTrue;\nDISP.ER.SN_isInexact  = retFalse;\n\nDISP.ER.SN_toExact    = retThis;\nDISP.ER.SN_toInexact  = function() { return toFlonum(+this); };\n\nDISP.ER.SN_isNaN      = retFalse;\nDISP.ER.SN_isFinite   = retTrue;\nDISP.ER.SN_isInfinite = retFalse;\n\nDISP.ER.SN_imagPart   = retZero;\n\nfunction zeroes(count) {\n    var ret = \"000000000000000\".substring(0, count & 15);\n    if (count > 15)\n        ret += new Array((count >> 4) + 1).join(\"0000000000000000\");\n    return ret;\n}\n\n// Specified by ECMA-262, 5th edition, 15.7.4.5.\nDISP.ER.toFixed = function(fractionDigits) {\n    var f = (fractionDigits === undefined ? 0 : _parseInt(fractionDigits));\n    if (f > SN.maxIntegerDigits)\n        throw new RangeError(\"fractionDigits exceeds \" +\n                             \"SchemeNumber.maxIntegerDigits: \" +\n                             fractionDigits);\n\n    var x = this;\n    var s = \"\";\n    if (x.SN_isNegative()) {\n        x = x.SN_negate();\n        s = \"-\";\n    }\n\n    var p = ONE.SN__exp10(-f);\n    var dm = x.SN_divAndMod(p);\n    var n = dm[0];\n    if (dm[1].SN_add(dm[1]).SN_ge(p))\n        n = ONE.SN_add(n);\n    if (n.SN_isZero())\n        return s + \"0\" +\n            (fractionDigits > 0 ? \".\" + zeroes(fractionDigits) : \"\");\n    n = n.SN_numberToString();\n    if (f === 0)\n        return s + n;\n\n    var z = f - n.length;\n    if (f > 0) {\n        if (z >= 0)\n            n = zeroes(z + 1) + n;\n        var point = n.length - f;\n        return s + n.substring(0, point) + \".\" + n.substring(point);\n    }\n    return s + n + zeroes(-f);\n};\n\nDISP.ER.toExponential = function(fractionDigits) {\n    var f = (fractionDigits === undefined ? 20 : _parseInt(fractionDigits));\n    if (f < 0)\n        throw new RangeError(\"SchemeNumber toExponential: negative \" +\n                             \"argument: \" + f);\n    if (f > SN.maxIntegerDigits)\n        throw new RangeError(\"fractionDigits exceeds \" +\n                             \"SchemeNumber.maxIntegerDigits: \" +\n                             fractionDigits);\n\n    var x = this;\n    var s = \"\";\n    if (x.SN_isNegative()) {\n        x = x.SN_negate();\n        s = \"-\";\n    }\n    else if (x.SN_isZero())\n        return \"0\" + (fractionDigits > 0 ? \".\" + zeroes(f) : \"\") + \"e+0\";\n\n    var e = floor(x.SN_log() / LN10);\n    var p = ONE.SN__exp10(e - f);\n    var dm = x.SN_divAndMod(p);\n    var n = dm[0];\n    if (dm[1].SN_add(dm[1]).SN_ge(p))\n        n = ONE.SN_add(n);\n    n = n.SN_numberToString();\n\n    // Adjust for inaccuracy in log().\n    if (n.length != f + 1) {\n        //print(\"Guessed wrong length: \" + n.length + \" != \" + (f + 1));\n        e += n.length - (f + 1);\n        p = ONE.SN__exp10(e - f);\n        dm = x.SN_divAndMod(p);\n        n = dm[0];\n        if (dm[1].SN_add(dm[1]).SN_ge(p))\n            n = ONE.SN_add(n);\n        n = n.SN_numberToString();\n        if (n.length != f + 1)\n            throw new Error(\"Can not format as exponential: \"\n                            + this.SN_numberToString());\n    }\n\n    if (fractionDigits === undefined)\n        n = n.replace(/(\\d)0+$/, \"$1\");\n    if (n.length > 1)\n        n = n[0] + \".\" + n.substring(1);\n    return s + n + \"e\" + (e < 0 ? \"\" : \"+\") + e;\n};\n\nDISP.ER.toPrecision = function(precision) {\n    var p, x;\n    if (precision === undefined) {\n        x = this.SN_toInexact();\n        if (x.SN_isFinite())\n            return (+x).toString();\n        p = 21;\n    }\n    else {\n        p = _parseInt(precision);\n        if (p < 1)\n            throw new RangeError(\"SchemeNumber toPrecision: expected a \" +\n                                 \"positive precision, got: \" + precision);\n        if (p > SN.maxIntegerDigits)\n            throw new RangeError(\"precision exceeds \" +\n                                 \"SchemeNumber.maxIntegerDigits: \" +\n                                 precision);\n    }\n\n    x = this;\n    var s = \"\";\n    if (x.SN_isNegative()) {\n        x = x.SN_negate();\n        s = \"-\";\n    }\n    else if (x.SN_isZero())\n        return \"0\" + (p > 1 ? \".\" + zeroes(p - 1) : \"\");\n\n    var ret = x.toExponential(p - 1);\n    var eIndex = ret.indexOf('e');\n    var exponent = _parseInt(ret.substring(eIndex + 1));\n    if (exponent >= -6 && exponent < p) {\n        if (exponent === 0)\n            ret = ret.substring(0, eIndex);\n        else {\n            ret = ret.substring(0, 1)\n                + (ret.indexOf('.') === -1 ? \"\" : ret.substring(2, eIndex));\n            if (exponent < 0)\n                ret = \"0.\" + zeroes(-1 - exponent) + ret;\n            else if (exponent < p - 1)\n                ret = ret.substring(0, exponent + 1) + \".\" +\n                    ret.substring(exponent + 1);\n        }\n    }\n    else if (precision === undefined) {\n        ret = ret.substring(0, eIndex).replace(/\\.?0+/, \"\")\n            + ret.substring(eIndex);\n    }\n\n    return s + ret;\n};\n\n//\n// EQ: Exact rational abstract base class.\n//\n\nfunction parseDecimal(sign, significand, exponent) {\n    return parseEI(sign, significand).SN__exp10(exponent);\n}\n\nDISP.EQ.SN_isRational = retTrue;\n\nDISP.EQ.SN_eq = function(z) {\n    return z.SN__eq_EQ(this);\n};\nDISP.EQ.SN__eq_EQ = pureVirtual;\n\nDISP.EQ.SN_ne = function(z) {\n    return z.SN__ne_EQ(this);\n};\nDISP.EQ.SN__ne_EQ = pureVirtual;\n\nDISP.EQ.SN_compare = function(x) {\n    return x.SN__compare_EQ(this);\n};\nDISP.EQ.SN__compare_EQ = pureVirtual;\n\nDISP.EQ.SN_add = function(z) {\n    return z.SN__add_EQ(this);\n};\nDISP.EQ.SN__add_EQ = pureVirtual;\n\nDISP.EQ.SN_subtract = function(z) {\n    return z.SN__subtract_EQ(this);\n};\nDISP.EQ.SN__subtract_EQ = pureVirtual;\n\nDISP.EQ.SN_multiply = function(z) {\n    return z.SN__multiply_EQ(this);\n};\nDISP.EQ.SN__multiply_EQ = pureVirtual;\n\nDISP.EQ.SN_divide = function(z) {\n    return z.SN__divide_EQ(this);\n};\nDISP.EQ.SN__divide_EQ = pureVirtual;\n\nDISP.EQ.SN_expt = function(z) {\n    return z.SN__expt_EQ(this);\n};\n\nfunction reduceEQ(n, d) {\n    if (d.SN_isZero())\n        divisionByExactZero();\n\n    var g = gcdNonneg(n.SN_abs(), d.SN_abs());\n\n    n = n.SN_div(g);\n    d = d.SN_div(g);\n\n    if (d.SN_isNegative())\n        return canonicalEQ(n.SN_negate(), d.SN_negate());\n    return canonicalEQ(n, d);\n}\n\nfunction canonicalEQ(n, d) {\n    return (d === ONE ? n : new EQFraction(n, d));\n}\n\n//\n// EQFraction: Exact rational as numerator (exact integer) and\n// denominator (exact positive integer) with no factors in common.\n//\n\nfunction EQFraction(n, d) {\n    //assert(d.SN_gt(ONE));\n    //assert(gcdNonneg(n.SN_abs(), d).SN_eq(ONE));\n    this._n = n;\n    this._d = d;\n}\n\nEQFraction.prototype = new EQ();\n\nDISP.EQFraction.SN_numberToString = function(radix, precision) {\n    return (this._n.SN_numberToString(radix) +\n            \"/\" + this._d.SN_numberToString(radix));\n};\n\nDISP.EQFraction.valueOf = function() {\n    var n = this._n;\n    var d = this._d;\n    var ret = n / d;\n    if (!_isNaN(ret))\n        return ret;\n    if (n.SN_isNegative())\n        return -exp(n.SN_negate().SN_log() - d.SN_log());\n    return exp(n.SN_log() - d.SN_log());\n};\n\nDISP.EQFraction.SN_debug = function() {\n    return \"EQFraction(\" + this._n.SN_debug()\n        + \" / \" + this._d.SN_debug() + \")\";\n};\n\nDISP.EQFraction.SN_numerator = function () {\n    return this._n;\n};\n\nDISP.EQFraction.SN_denominator = function() {\n    return this._d;\n};\n\nDISP.EQFraction.SN_isPositive = function() {\n    return this._n.SN_isPositive();\n};\n\nDISP.EQFraction.SN_isNegative = function() {\n    return this._n.SN_isNegative();\n};\n\nDISP.EQFraction.SN__eq_EQ = function(q) {\n    return (q.SN_numerator().SN_eq(this._n) &&\n            q.SN_denominator().SN_eq(this._d));\n};\n\nDISP.EQFraction.SN__ne_EQ = function(q) {\n    return (q.SN_numerator().SN_ne(this._n) ||\n            q.SN_denominator().SN_ne(this._d));\n};\n\nDISP.EQFraction.SN__compare_EQ = function(q) {\n    var qn = q.SN_numerator();\n    var signDiff = q.SN_sign() - this._n.SN_sign();\n    if (signDiff !== 0)\n        return (signDiff > 0 ? 1 : -1);\n    var qd = q.SN_denominator();\n    if (qd === this._d)\n        return qn.SN_compare(this._n);\n    return qn.SN_multiply(this._d).SN_compare(qd.SN_multiply(this._n));\n};\n\nDISP.EQFraction.SN_negate = function() {\n    return new EQFraction(this._n.SN_negate(), this._d);\n};\n\nDISP.EQFraction.SN_square = function() {\n    return new EQFraction(this._n.SN_square(), this._d.SN_square());\n};\n\nDISP.EQFraction.SN_reciprocal = function() {\n    switch (this._n.SN_sign()) {\n    case -1: return canonicalEQ(this._d.SN_negate(), this._n.SN_negate());\n    case 1: return canonicalEQ(this._d, this._n);\n    case 0: default: divisionByExactZero();\n    }\n};\n\nDISP.EQFraction.SN_floor = function() {\n    return this._n.SN_div(this._d);\n};\n\nDISP.EQFraction.SN_ceiling = function() {\n    //assert(this._d.SN_gt(ONE));\n    return this._n.SN_div(this._d).SN_add(ONE);\n};\n\nDISP.EQFraction.SN_round = function() {\n    if (this._d.SN_eq(TWO)) {\n        var ret = this._n.SN_div(TWO);\n        return ret.SN_isEven() ? ret : ret.SN_add(ONE);\n    }\n    var dm = this._n.SN_divAndMod(this._d);\n    var mod = dm[1];\n    if (mod.SN_add(mod).SN_lt(this._d))\n        return dm[0];\n    return dm[0].SN_add(ONE);\n};\n\nDISP.EQFraction.SN_truncate = function() {\n    if (this._n.SN_isPositive())\n        return this._n.SN_div(this._d);\n    return this._d.SN_isUnit() ? this._n : this._n.SN_div(this._d).SN_add(ONE);\n};\n\nDISP.EQFraction.SN_sign = function() {\n    return this._n.SN_sign();\n};\n\nDISP.EQFraction.SN_abs = function() {\n    if (this._n.SN_sign() >= 0)\n        return this;\n    return this.SN_negate();\n};\n\nDISP.EQFraction.SN__add_EQ = function(q) {\n    var n1 = q.SN_numerator();\n    var d1 = q.SN_denominator();\n    var n2 = this._n;\n    var d2 = this._d;\n    return reduceEQ(n1.SN_multiply(d2).SN_add(n2.SN_multiply(d1)),\n                    d1.SN_multiply(d2));\n};\n\nDISP.EQFraction.SN__subtract_EQ = function(q) {\n    var n1 = q.SN_numerator();\n    var d1 = q.SN_denominator();\n    var n2 = this._n;\n    var d2 = this._d;\n    return reduceEQ(n1.SN_multiply(d2).SN_subtract(n2.SN_multiply(d1)),\n                    d1.SN_multiply(d2));\n};\n\nDISP.EQFraction.SN__multiply_EQ = function(q) {\n    return reduceEQ(q.SN_numerator().SN_multiply(this._n),\n                    q.SN_denominator().SN_multiply(this._d));\n};\n\nDISP.EQFraction.SN__divide_EQ = function(q) {\n    return reduceEQ(q.SN_numerator().SN_multiply(this._d),\n                    q.SN_denominator().SN_multiply(this._n));\n};\n\nDISP.EQFraction.SN__add_EI = function(n) {\n    return canonicalEQ(n.SN_multiply(this._d).SN_add(this._n), this._d);\n};\n\nDISP.EQFraction.SN__subtract_EI = function(n) {\n    return canonicalEQ(n.SN_multiply(this._d).SN_subtract(this._n), this._d);\n};\n\nDISP.EQFraction.SN__multiply_EI = function(n) {\n    return reduceEQ(n.SN_multiply(this._n), this._d);\n};\n\nDISP.EQFraction.SN__divide_EI = function(n) {\n    return reduceEQ(n.SN_multiply(this._d), this._n);\n};\n\nDISP.EQFraction.SN_sqrt = function() {\n    // This EQ may be too big for toValue(), but its square root may not be.\n    return this._n.SN_sqrt().SN_divide(this._d.SN_sqrt());\n};\n\nDISP.EQFraction.SN_log = function() {\n    return this._n.SN_log().SN_subtract(this._d.SN_log());\n};\n\n//\n// EI: Exact integer abstract base class.\n//\n\nfunction parseEI(sign, string, radix) {\n    var n = _parseInt(string, radix);\n\n    if (n < 9007199254740992)\n        return toEINative(sign * n);\n\n    return parseEIBig(string, sign, radix);\n}\n\nDISP.EI.SN_isInteger = retTrue;\n\nDISP.EI.SN_debug = function() { return \"EI\"; };\n\nDISP.EI.SN_numerator   = retThis;\nDISP.EI.SN_denominator = function() { return ONE; };\nDISP.EI.SN_floor       = retThis;\nDISP.EI.SN_ceiling     = retThis;\nDISP.EI.SN_round       = retThis;\nDISP.EI.SN_truncate    = retThis;\n\nDISP.EI.SN__toBigInteger = pureVirtual;\n\nDISP.EI.SN_eq = function(z) {\n    return z.SN__eq_EI(this);\n};\nDISP.EI.SN__eq_EI = function(n) {\n    return n.SN__toBigInteger().compare(this.SN__toBigInteger()) === 0;\n};\nDISP.EI.SN__eq_EQ = function(q) {\n    return q.SN_numerator().SN_eq(this) && q.SN_denominator().SN_eq(ONE);\n};\n\nDISP.EI.SN_ne = function(z) {\n    return z.SN__ne_EI(this);\n};\nDISP.EI.SN__ne_EI = function(n) {\n    return n.SN__toBigInteger().compare(this.SN__toBigInteger()) !== 0;\n};\nDISP.EI.SN__ne_EQ = function(q) {\n    return q.SN_numerator().SN_ne(this) || q.SN_denominator().SN_ne(ONE);\n};\n\nDISP.EI.SN_compare = function(x) {\n    return x.SN__compare_EI(this);\n};\nDISP.EI.SN__compare_EQ = function(q) {\n    return q.SN_numerator().SN_compare(q.SN_denominator().SN_multiply(this));\n};\nDISP.EI.SN__compare_EI = function(n) {\n    return n.SN__toBigInteger().compare(this.SN__toBigInteger());\n};\n\nDISP.EI.SN_add = function(z) {\n    return z.SN__add_EI(this);\n};\nDISP.EI.SN_subtract = function(z) {\n    return z.SN__subtract_EI(this);\n};\nDISP.EI.SN_multiply = function(z) {\n    return z.SN__multiply_EI(this);\n};\n//DISP.EI.SN_divide = function(z) {\n//    return z.SN__divide_EI(this);\n//};\n\nDISP.EI.SN_reciprocal = function() {\n    if (this.SN_isNegative())\n        return canonicalEQ(M_ONE, this.SN_negate());\n    return canonicalEQ(ONE, this);\n};\n\nDISP.EI.SN_divAndMod = function(x) {\n    return x.SN__divAndMod_EI(this);\n};\nDISP.EI.SN_div = function(x) {\n    return x.SN__div_EI(this);\n};\nDISP.EI.SN_mod = function(x) {\n    return x.SN__mod_EI(this);\n};\n\nDISP.EI.SN__add_EI = function(n) {\n    return reduceBigInteger(n.SN__toBigInteger()\n                            .add(this.SN__toBigInteger()));\n};\nDISP.EI.SN__subtract_EI = function(n) {\n    return reduceBigInteger(n.SN__toBigInteger()\n                            .subtract(this.SN__toBigInteger()));\n};\nDISP.EI.SN__multiply_EI = function(n) {\n    return reduceBigInteger(n.SN__toBigInteger()\n                            .multiply(this.SN__toBigInteger()));\n};\nDISP.EI.SN__divAndMod_EI = function(n) {\n    var t = this.SN__toBigInteger();\n    var dm = n.SN__toBigInteger().divRem(t);\n    var div = dm[0];\n    var mod = dm[1];\n\n    if (mod.isNegative()) {\n        mod = mod.add(t);\n        div = div.prev();\n    }\n    return [reduceBigInteger(div), reduceBigInteger(mod)];\n};\nDISP.EI.SN__div_EI = function(n) {\n    return this.SN__divAndMod_EI(n)[0];\n};\nDISP.EI.SN__mod_EI = function(n) {\n    return this.SN__divAndMod_EI(n)[1];\n};\n\nDISP.EI.SN__add_EQ = function(q) {\n    var d = q.SN_denominator();\n    return canonicalEQ(q.SN_numerator().SN_add(d.SN_multiply(this)), d);\n};\n\nDISP.EI.SN__subtract_EQ = function(q) {\n    var d = q.SN_denominator();\n    return canonicalEQ(q.SN_numerator().SN_subtract(d.SN_multiply(this)), d);\n};\n\nDISP.EI.SN__multiply_EQ = function(q) {\n    return reduceEQ(q.SN_numerator().SN_multiply(this), q.SN_denominator());\n};\n\nDISP.EI.SN__divide_EQ = function(q) {\n    return reduceEQ(q.SN_numerator(), q.SN_denominator().SN_multiply(this));\n};\n\nDISP.EI.SN_expt = function(z) {\n    return z.SN__expt_EI(this);\n};\n\nDISP.EI.SN__expt_EI = function(n) {\n    // Return n to the power of this integer.\n\n    var s = this.SN_sign();\n    var p = this.SN_abs().valueOf();\n\n    // If p != this due to inexactness, our result would exhaust memory,\n    // since |n| is at least 2.  (expt is specialized for -1, 0, and 1.)\n    //assert(n.SN_abs().SN_ge(2));\n\n    var result = pow(n, p);\n    var a;\n    if (result > -9007199254740992 && result < 9007199254740992) {\n        a = toEINative(result);\n    }\n    else {\n        var newLog = n.SN_log() * p;\n        if (newLog > SN.maxIntegerDigits * LN10)\n            raise(\"&implementation-restriction\",\n                  \"exact integer would exceed limit of \" +\n                  (+SN.maxIntegerDigits) +\n                  \" digits; adjust SchemeNumber.maxIntegerDigits\",\n                  newLog / LN10);\n\n        a = new EIBig(n.SN__toBigInteger().pow(p));\n    }\n    return (s > 0 ? a : a.SN_reciprocal());\n};\n\nfunction expt_E_EI(z, n) {\n    // Return z raised to the power of this integer.\n    // We don't get here if either z or this is 0, 1, or -1.\n    //assert(this.SN_abs().SN_gt(ONE));\n    //assert(z.SN_magnitude().SN_gt(ONE) || !z.SN_isInteger());\n    var bits = n.SN_abs();\n    var squarer = z;\n    var ret = ONE;\n    while (bits.SN_isPositive()) {\n        if (bits.SN_isOdd())\n            ret = ret.SN_multiply(squarer);\n        squarer = squarer.SN_square();\n        bits = bits.SN_div(TWO);\n    }\n    return (n.SN_isNegative() ? ret.SN_reciprocal() : ret);\n}\n\nDISP.EI.SN__expt_ER = function(x) {\n    return expt_E_EI(x, this);\n};\n\nDISP.EI.SN__expt_C = function(z) {\n    if (z.SN_isExact())\n        return expt_E_EI(z, this);\n    return complexExpt(z, this);\n};\n\n//\n// EINative: Exact integers as native numbers.\n//\n\nfunction EINative(x) {\n    //assert(x === floor(x));\n    this._ = x;\n}\n\nEINative.prototype = new EI();\n\nvar ZERO  = SN.ZERO  = new EINative(0);\nvar ONE   = SN.ONE   = new EINative(1);\nvar M_ONE = SN.M_ONE = new EINative(-1);\nvar TWO   = SN.TWO   = new EINative(2);\n\nvar EINativeSmall    = [ ZERO, ONE, TWO ];\n\nvar I     = SN.I   = new Rectangular(ZERO, ONE);\nvar M_I   = SN.M_I = new Rectangular(ZERO, M_ONE);\n\nfunction toEINative(n) {\n    //assert(floor(n) === n);\n    return EINativeSmall[n] || (n == -1 ? M_ONE : new EINative(n));\n}\n\nZERO.SN_isZero     = retTrue;\nZERO.SN_isPositive = retFalse;\nZERO.SN_isNegative = retFalse;\n\nZERO.SN_compare = function(x) {\n    return -x.SN_sign();\n};\n\nZERO.SN_add        = SN;\nZERO.SN_negate     = retThis;\nZERO.SN_abs        = retThis;\nZERO.SN_multiply   = retThis;\nZERO.SN_square     = retThis;\nZERO.SN_reciprocal = divisionByExactZero;\n\nZERO.SN_subtract = function(z) {\n    return z.SN_negate();\n};\n\nZERO.SN_divide   = function(z) {\n    if (z.SN_isZero() && z.SN_isExact())\n        divisionByExactZero();\n    return this;\n};\n\nZERO.SN_expt = function(z) {\n    switch (z.SN_realPart().SN_sign()) {\n    case 1: return this;\n    case 0: return ONE;\n    case -1: default: divisionByExactZero();\n    }\n};\n\nZERO.SN_sqrt = retThis;\nZERO.SN_exp = retOne;\nZERO.SN_sin = retThis;\nZERO.SN_cos = retOne;\nZERO.SN_tan = retThis;\nZERO.SN_asin = retThis;\nZERO.SN_atan = retThis;\n\nONE.SN_isUnit     = retTrue;\nONE.SN_abs        = retThis;\nONE.SN_multiply   = SN;\nONE.SN_reciprocal = retThis;\nONE.SN_square     = retThis;\nONE.SN_expt       = ZERO.SN_multiply;\nONE.SN_sqrt       = retThis;\nONE.SN_log        = retZero;\nONE.SN_acos       = retZero;\n\nM_ONE.SN_isUnit     = retTrue;\nM_ONE.SN_abs        = retOne;\nM_ONE.SN_multiply   = ZERO.SN_subtract;\nM_ONE.SN_reciprocal = retThis;\nM_ONE.SN_square     = retOne;\nM_ONE.SN_sqrt       = function() { return I; };\n\nM_ONE.SN_expt = function(z) {\n    if (!z.SN_isInteger())\n        return complexExpt(this, z);\n    var ret = (z.SN_isEven() ? ONE : M_ONE);\n    if (z.SN_isExact())\n        return ret;\n    return ret.SN_toInexact();\n}\n\nfunction negate(z) {\n    return z.SN_negate();\n}\nfunction reciprocal(z) {\n    return z.SN_reciprocal();\n}\n\nfor (className in CLASSES) {\n    ZERO[\"SN__add_\"      + className] = retFirst;\n    ZERO[\"SN__subtract_\" + className] = retFirst;\n    ZERO[\"SN__multiply_\" + className] = retThis;\n    ZERO[\"SN__divide_\"   + className] = divisionByExactZero;\n    ZERO[\"SN__expt_\"     + className] = retOne;\n    ONE[\"SN__multiply_\" + className] = retFirst;\n    ONE[\"SN__divide_\"   + className] = retFirst;\n    ONE[\"SN__expt_\"     + className] = retFirst;\n    M_ONE[\"SN__multiply_\" + className] = negate;\n    M_ONE[\"SN__divide_\"   + className] = negate;\n    M_ONE[\"SN__expt_\"     + className] = reciprocal;\n}\n\nDISP.EINative.valueOf = function() {\n    return this._;\n};\n\nDISP.EINative.SN_numberToString = function(radix, precision) {\n    return this._.toString(radix || 10);\n};\n\nDISP.EINative.SN_debug = function() {\n    return \"EINative(\" + this._ + \")\";\n};\n\nDISP.EINative.SN__toBigInteger = function() {\n    return BigInteger(this._);\n};\n\nDISP.EINative.SN_isPositive = function() {\n    return this._ > 0;\n};\n\nDISP.EINative.SN_isNegative = function() {\n    return this._ < 0;\n};\n\nDISP.EINative.SN_sign = function() {\n    return (this._ > 0 ? 1 : (this._ == 0 ? 0 : -1));\n};\n\nDISP.EINative.SN_isEven = function() {\n    return (this._ & 1) === 0;\n};\n\nDISP.EINative.SN_isOdd = function() {\n    return (this._ & 1) === 1;\n};\n\nDISP.EINative.SN_eq = function(z) {\n    return z.SN__eq_EINative(this);\n};\nDISP.EINative.SN__eq_EINative = function(n) {\n    return n._ === this._;\n};\n\nDISP.EINative.SN_ne = function(z) {\n    return z.SN__ne_EINative(this);\n};\nDISP.EINative.SN__ne_EINative = function(n) {\n    return n._ !== this._;\n};\n\nDISP.EINative.SN_compare = function(x) {\n    return x.SN__compare_EINative(this);\n};\nDISP.EINative.SN__compare_EINative = function(n) {\n    return (n._ === this._ ? 0 : (n._ > this._ ? 1 : -1));\n};\n\nfunction add_EINative_EINative(a, b) {\n    var ret = a + b;\n    if (ret > -9007199254740992 && ret < 9007199254740992)\n        return toEINative(ret);\n    return new EIBig(BigInteger.add(a, b));\n}\n\nDISP.EINative.SN_add = function(z) {\n    return z.SN__add_EINative(this);\n};\nDISP.EINative.SN__add_EINative = function(n) {\n    return add_EINative_EINative(n._, this._);\n};\n\nDISP.EINative.SN_negate = function() {\n    return toEINative(-this._);\n};\n\nDISP.EINative.SN_abs = function() {\n    return (this._ < 0 ? toEINative(-this._) : this);\n};\n\nDISP.EINative.SN_subtract = function(z) {\n    return z.SN__subtract_EINative(this);\n};\nDISP.EINative.SN__subtract_EINative = function(n) {\n    return add_EINative_EINative(n._, -this._);\n};\n\nDISP.EINative.SN_multiply = function(z) {\n    return z.SN__multiply_EINative(this);\n};\nDISP.EINative.SN__multiply_EINative = function(n) {\n    var ret = n._ * this._;\n    if (ret > -9007199254740992 && ret < 9007199254740992)\n        return toEINative(ret);\n    return new EIBig(BigInteger(n._).multiply(this._));\n};\n\nDISP.EINative.SN_square = function() {\n    var ret = this._ * this._;\n    if (ret < 9007199254740992)\n        return toEINative(ret);\n    return new EIBig(BigInteger(this._).square());\n};\n\nDISP.EINative.SN_reciprocal = function() {\n    var x = this._;\n    assert(x !== 0);\n    /*\n    if (x === 0)  // Removed this check, since ZERO overrides.\n        throw divisionByExactZero();\n    if (x === 1 || x === -1)  // Removed this optimization, similar reason.\n        return this;\n    */\n    if (x < 0)\n        return canonicalEQ(M_ONE, toEINative(-x));\n    return canonicalEQ(ONE, this);\n};\n\nfunction divAndMod_EINative(t, x, which) {\n    if (x === 0)\n        divisionByExactZero();\n\n    var div = (x > 0 ? floor(t / x) : ceil(t / x));\n    if (which === 0)\n        return toEINative(div);\n\n    var tmp = x * div;\n    var mod;\n\n    if (tmp > -9007199254740992)\n        mod = t - tmp;\n    else if (div > 0)\n        mod = (t - x) - (x * (div - 1));\n    else\n        mod = (t + x) - (x * (div + 1));\n\n    mod = toEINative(mod);\n    if (which === 1)\n        return mod;\n\n    return [toEINative(div), mod];\n};\n\nDISP.EINative.SN_div = function(x) {\n    return x.SN__div_EINative(this);\n};\nDISP.EINative.SN__div_EINative = function(n) {\n    return divAndMod_EINative(n._, this._, 0);\n};\n\nDISP.EINative.SN_mod = function(x) {\n    return x.SN__mod_EINative(this);\n};\nDISP.EINative.SN__mod_EINative = function(n) {\n    return divAndMod_EINative(n._, this._, 1);\n};\n\nDISP.EINative.SN_divAndMod = function(x) {\n    return x.SN__divAndMod_EINative(this);\n};\nDISP.EINative.SN__divAndMod_EINative = function(n) {\n    return divAndMod_EINative(n._, this._, 2);\n};\n\nDISP.EINative.SN__exp10 = function(n) {\n    if (this._ === 0 || n === 0)\n        return this;\n\n    if (n < 0) {\n        var num = String(this._);\n        var i = num.length - 1;\n\n        if (num[i] === '0') {\n            while (num[i] === '0' && n < 0) {\n                n += 1;\n                i -= 1;\n            }\n            num = toEINative(Number(num.substring(0, i + 1)));\n            if (n === 0)\n                return num;\n        }\n        else {\n            num = this;\n        }\n\n        var den;\n        if (n < -15)\n            den = new EIBig(BigInteger.ONE.exp10(-n));\n        else\n            // Could make this an array lookup.\n            den = toEINative(Number(\"1000000000000000\".substring(0, 1 - n)));\n        return reduceEQ(num, den);\n    }\n    if (n < 16) {\n        // Could make substring+parseInt an array lookup.\n        var result = _parseInt(\"1000000000000000\".substring(0, n + 1)) * this._;\n        if (result > -9007199254740992 && result < 9007199254740992)\n            return toEINative(result);\n    }\n    return new EIBig(BigInteger(this._).exp10(n));\n};\n\nDISP.EINative.SN_exactIntegerSqrt = function() {\n    var n = floor(sqrt(assertNonNegative(this)._));\n    return [toEINative(n), toEINative(this._ - n * n)];\n};\n\n//\n// EIBig: Exact integer as a BigInteger.\n//\n\n// 2 to the power 53, top of the range of consecutive integers\n// representable exactly as native numbers.\nvar FIRST_BIG_INTEGER = BigInteger(9007199254740992);\n\nfunction reduceBigInteger(n) {\n    if (n.compareAbs(FIRST_BIG_INTEGER) >= 0)\n        return new EIBig(n);\n    return toEINative(n.toJSValue());\n}\n\nfunction EIBig(n) {\n    this._ = n;\n}\n\nEIBig.prototype = new EI();\n\nfunction parseEIBig(s, sign, radix) {\n    n = BigInteger.parse(s, radix);\n    if (sign < 0)\n        n = n.negate();\n    return new EIBig(n);\n}\n\nDISP.EIBig.SN_numberToString = function(radix) {\n    return this._.toString(radix);\n};\n\nDISP.EIBig.valueOf = function() {\n    return this._.valueOf();\n};\n\n[\"isZero\", \"isEven\", \"isOdd\", \"sign\", \"isUnit\", \"isPositive\", \"isNegative\"]\n    .forEach(function(fn) {\n            DISP.EIBig[\"SN_\" + fn] = function() {\n                return this._[fn]();\n            };\n        });\n\nDISP.EIBig.SN_log = function() {\n    var x = toFlonum(this._.abs().log());\n    return this._.isPositive() ? x : inexactRectangular(x, PI);\n};\n\nDISP.EIBig.SN_debug = function() {\n    return \"EIBig(\" + this._.toString() + \")\";\n};\n\nDISP.EIBig.SN__toBigInteger = function() {\n    return this._;\n};\n\nDISP.EIBig.SN_add = function(z) {\n    return z.SN__add_EIBig(this);\n};\n\nDISP.EIBig.SN_negate = function() {\n    return new EIBig(this._.negate());\n};\n\nDISP.EIBig.SN_abs = function() {\n    return new EIBig(this._.abs());\n};\n\nDISP.EIBig.SN_subtract = function(z) {\n    return z.SN__subtract_EIBig(this);\n};\n\nDISP.EIBig.SN_multiply = function(z) {\n    return z.SN__multiply_EIBig(this);\n};\n\nDISP.EIBig.SN_square = function() {\n    return new EIBig(this._.square());\n};\n\nDISP.EIBig.SN__exp10 = function(n) {\n    //assert(n === floor(n));\n    if (n === 0)\n        return this;\n    if (n > 0)\n        return new EIBig(this._.exp10(n));\n    return reduceEQ(this, ONE.SN__exp10(-n));\n};\n\nDISP.EIBig.SN_sqrt = function() {\n    //assert(!this.SN_isZero());\n    var mag = toFlonum(exp(this._.abs().log() / 2));\n    return (this._.isNegative() ? inexactRectangular(INEXACT_ZERO, mag) : mag);\n};\n\nDISP.EIBig.SN_exactIntegerSqrt = function() {\n\n    // I know of no use cases for this.  Be stupid.  Be correct.\n\n    //assert(this._.compareAbs(FIRST_BIG_INTEGER) >= 0);\n\n    function doit(n, a) {\n        while (true) {\n            var dm = n.divRem(a);\n            var b = dm[0];\n            var diff = a.subtract(b); // n == b*b + b*diff + dm[1], dm[1] < b+1\n\n            if (diff.isZero())\n                return [ b, dm[1] ]; // n == b*b + dm[1]\n\n            if (diff.isUnit()) {\n                if (diff.isPositive())\n                    // n == b*b + b + dm[1], dm[1] < b+1\n                    return [ b, b.add(dm[1]) ];\n\n                // n == b*b - b + dm[1] == (b-1)^2 + b - 1 + dm[1]\n                return [ a, a.add(dm[1]) ];\n            }\n\n            a = b.add(diff.quotient(2));\n        }\n    }\n\n    var l = assertNonNegative(this)._.log() / 2 / LN10;\n    var a = BigInteger(pow(10, l - floor(l)).toString()\n                       + \"e\" + floor(l));\n    return doit(this._, a).map(reduceBigInteger);\n};\n\nfunction gcdNative(a, b) {\n    //assert(a >= 0 && b >= 0)\n    var c;\n    while (a !== 0) {\n        c = a;\n        a = b % a;\n        b = c;\n    }\n    return toEINative(b);\n}\n\n// a and b must be nonnegative, exact integers.\nfunction gcdNonneg(a, b) {\n    //assert(!a.SN_isNegative());\n    //assert(!b.SN_isNegative());\n    //assert(a instanceof EI);\n    //assert(b instanceof EI);\n    if (a instanceof EINative && b instanceof EINative)\n        return gcdNative(a.valueOf(), b.valueOf());\n\n    a = a.SN__toBigInteger();\n    if (a.isZero())\n        return b;\n\n    b = b.SN__toBigInteger();\n    var c;\n\n    while (true) {\n        c = a;\n        a = b.remainder(a);\n        if (a.isZero())\n            return new EIBig(c);\n        b = c;\n        if (b.compareAbs(FIRST_BIG_INTEGER) < 0)\n            return gcdNative(a.valueOf(), b.valueOf());\n    }\n}\n\nfunction numberToBigInteger(n) {\n    return BigInteger.parse(n.toString(16), 16);\n}\n\n//\n// Inheritance plumbing.\n//\n\n/*\nfunction showMethodClasses() {\n    var map = {};\n    for (var className in DISP)\n        for (var methName in DISP[className])\n            (map[methName] = map[methName] || {})[className] = DISP[className][methName];\n    for (var methName in map)\n        for (var className in map[methName])\n            print(className + \".\" + methName + (map[methName][className] === pureVirtual ? \" =0\" : \"\"));\n}\nshowMethodClasses();\n*/\n\nfunction resolveOverload(className) {\n    var proto = DISP[className];\n    var newMethods = {};\n\n    function resolve(subclasses, prefix, method) {\n        function resolveSub(subclass) {\n            if (proto[prefix + subclass])\n                return;\n            //print(className + \".\" + prefix + subclass + \" -> \" + oldName);\n            newMethods[prefix + subclass] = method;\n            resolve(HIERARCHY[subclass], prefix, method);\n        }\n        if (subclasses)\n            subclasses.forEach(resolveSub);\n    }\n\n    for (var oldName in proto) {\n        if (!/^SN_/.test(oldName))\n            continue;\n\n        var underscore = oldName.lastIndexOf(\"_\");\n        if (underscore === -1)\n            continue;\n\n        var oldMethod = proto[oldName];\n        if (!oldMethod) {\n            //print(\"Bogus \" + className + \".prototype.\" + oldName);\n            continue;\n        }\n\n        var oldClass = oldName.substring(underscore + 1);\n\n        resolve(HIERARCHY[oldClass],\n                oldName.substring(0, underscore + 1),\n                oldMethod);\n    }\n\n    for (var methodName in newMethods) {\n        proto[methodName] = newMethods[methodName];\n    }\n}\n\nfor (var className in CLASSES)\n    resolveOverload(className);\n\nif (Flonum === Number) {\n    // Workaround for Flonum not inheriting from R.\n    for (var methodName in DISP.R) {\n        if (/^SN_/.test(methodName) && !DISP.Flonum[methodName])\n            DISP.Flonum[methodName] = DISP.R[methodName];\n    }\n\n    // Workaround for Flonum not inheriting from C.\n    for (var methodName in DISP.C) {\n        if (/^SN_/.test(methodName) && !DISP.Flonum[methodName])\n            DISP.Flonum[methodName] = DISP.C[methodName];\n    }\n\n    // Workaround for C inheriting from Flonum.\n    for (var methodName in DISP.Flonum) {\n        if (!DISP.C[methodName])\n            DISP.C[methodName] = unimpl;\n    }\n}\n\n// Install methods.\nfor (var className in CLASSES) {\n    for (var methodName in DISP[className]) {\n        CLASSES[className].prototype[methodName] = DISP[className][methodName];\n    }\n}\n\nfunction checkPureVirtual(handler) {\n    var e = \"\";\n    for (var className in CLASSES) {\n        if (!/[a-z]/.test(className)) {\n            // Not a concrete class.\n            continue;\n        }\n        var proto = CLASSES[className].prototype;\n        for (methodName in proto) {\n            if (proto[methodName] === pureVirtual)\n                e += \"Pure virtual: \" + className + \".\" + methodName + \"\\n\";\n        }\n    }\n    if (e) {\n        handler(e);\n    }\n}\ncheckPureVirtual(this.alert || this.print || function(e) {throw e;});\n\nreturn SN;\n\n})();\n\nif (typeof exports !== \"undefined\") {\n    exports.SchemeNumber = SchemeNumber;\n    for (var name in SchemeNumber.fn)\n        exports[name] = SchemeNumber.fn[name];\n}\n\n// load for testing: load(\"biginteger.js\");load(\"schemeNumber.js\");sn=SchemeNumber;fn=sn.fn;ns=fn[\"number->string\"];1\n\n/*\n  Export to plugins: N C R ER EQ EI pureVirtual <everything gotten from plugins>\n  raise\n\n  Get from plugins: toFlonum parseEI toEINative\n  parseDecimal exactRectangular inexactRectangular makePolar\n */\n\n},{\"biginteger\":3}],2:[function(require,module,exports){\n\n/*\n * These models are very heavily based on their JavaRosa counterparts, which live at:\n * https://bitbucket.org/javarosa/javarosa/src/tip/core/src/org/javarosa/xpath/expr/\n *\n */\n\nvar SchemeNumber = require('./lib/schemeNumber.js').SchemeNumber;\n\nif (!Function.prototype.bind) {\n    // PhantomJS doesn't support bind yet\n    Function.prototype.bind = function(oThis) {\n        if (typeof this !== 'function') {\n            // closest thing possible to the ECMAScript 5\n            // internal IsCallable function\n            throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n        }\n\n        var aArgs   = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            fNOP    = function() {},\n            fBound  = function() {\n                return fToBind.apply(this instanceof fNOP ? this : oThis,\n                                     aArgs.concat(Array.prototype.slice.call(arguments)));\n            };\n\n        fNOP.prototype = this.prototype;\n        fBound.prototype = new fNOP();\n\n        return fBound;\n    };\n}\n\nvar defaultHashtagConfig = {\n    // @param namespace - the namespace used in hashtag\n    // @return - truthy value\n    isValidNamespace: function (namespace) {\n        return false;\n    },\n    // @param hashtagExpr - text of hashtag ex. #form/question\n    // @return - the XPath or falsy value if no corresponding XPath found\n    hashtagToXPath: function (hashtagExpr) {\n        throw new Error(\"This should be overridden\");\n    },\n    // @param xpath_ - XPath object (can be any of the objects defined in xpm\n    // @returns - text representation of XPath in hashtag format (default\n    //            implementation is to just return the XPath)\n    toHashtag: function (xpath_) {\n        return xpath_.toXPath();\n    },\n};\n\nvar makeXPathModels = function(hashtagConfig) {\n    var xpm = {};\n    xpm.DEBUG_MODE = false;\n    hashtagConfig = hashtagConfig || defaultHashtagConfig;\n\n    xpm.debuglog = function () {\n        if (xpm.DEBUG_MODE) {\n            var string = \"\";\n            Array.prototype.slice.call(arguments).forEach(function (value) {\n                string += value + \", \";\n            });\n            console.log(string);\n        }\n    };\n\n    xpm.validateAxisName = function(name) {\n        for (var i in xpm.XPathAxisEnum) {\n            if (xpm.XPathAxisEnum.hasOwnProperty(i) && xpm.XPathAxisEnum[i] === name) {\n                return xpm.XPathAxisEnum[i];\n            }\n        }\n        throw name + \" is not a valid axis name!\";\n    };\n\n    // helper function\n    var objToXPath = function(something) {\n        return something.toXPath();\n    };\n\n    var objToHashtag = function (xpath_) {\n        if (xpath_ instanceof xpm.HashtagExpr) {\n            return xpath_.toHashtag();\n        }\n        return hashtagConfig.toHashtag(xpath_) || xpath_.toHashtag();\n    };\n\n    var objToHashtagWithCombine = function(self, combineFunc) {\n        return function () {\n            return hashtagConfig.toHashtag(self) || combineFunc(objToHashtag).bind(self)();\n        };\n    };\n\n    xpm.XPathNumericLiteral = function(value) {\n        /*\n         * This is shockingly complicated for what should be simple thanks to\n         * javascript number arithmetic.\n         *\n         * Use the big number library to hold the value, which will hold\n         * large integers properly. For everything else, do the best rounding\n         * we can when exporting, since xpath doesn't like scientific notation\n         *\n         */\n        this.value = SchemeNumber(value);\n        this.toString = function() {\n            return \"{num:\" + this.value.toString() + \"}\";\n        };\n        this.toXPath = function() {\n            // helper function\n            var toFixed = function (x) {\n              /*\n               * Convert scientific notation formatted numbers to their decimal\n               * counterparts\n               *\n               * HT: http://stackoverflow.com/questions/1685680/how-to-avoid-scientific-notation-for-large-numbers-in-javascript\n               */\n              var e;\n              if (x < 1.0) {\n                e = parseInt(x.toString().split('e-')[1]);\n                if (e) {\n                    x *= Math.pow(10,e-1);\n                    x = '0.' + (new Array(e)).join('0') + x.toString().substring(2);\n                }\n              } else {\n                e = parseInt(x.toString().split('+')[1]);\n                if (e > 20) {\n                    e -= 20;\n                    x /= Math.pow(10,e);\n                    x += (new Array(e+1)).join('0');\n                }\n              }\n              return x;\n            };\n            return toFixed(this.value.toString());\n        };\n        this.toHashtag = this.toXPath;\n        this.getChildren = function () {\n           return [];\n        };\n        return this;\n    };\n\n    xpm.XPathStringLiteral = function(value) {\n        var stringDelim = value[0];\n        this.value = value = value.substr(1, value.length-2);\n        this.stringDelim = stringDelim;\n\n        var toXPathString = function(value) {\n            return stringDelim + value + stringDelim;\n        };\n\n        this.valueDisplay = toXPathString(value);\n        this.toString = function() {\n            return \"{str:\" + this.valueDisplay + \"}\";\n        };\n        this.toXPath = function() {\n            return this.valueDisplay;\n        };\n        this.toHashtag = this.toXPath;\n        this.getChildren = function () {\n           return [];\n        };\n        return this;\n    };\n\n    xpm.XPathVariableReference = function(value) {\n        this.value = value;\n        this.toString = function() {\n            return \"{var:\" + String(this.value) + \"}\";\n        };\n        this.toXPath = function() {\n            return \"$\" + String(this.value);\n        };\n        this.toHashtag = this.toXPath;\n        this.getChildren = function () {\n           return [];\n        };\n    };\n\n    xpm.XPathAxisEnum = {\n        CHILD: \"child\",\n        DESCENDANT: \"descendant\",\n        PARENT: \"parent\",\n        ANCESTOR: \"ancestor\",\n        FOLLOWING_SIBLING: \"following-sibling\",\n        PRECEDING_SIBLING: \"preceding-sibling\",\n        FOLLOWING: \"following\",\n        PRECEDING: \"preceding\",\n        ATTRIBUTE: \"attribute\",\n        NAMESPACE: \"namespace\",\n        SELF: \"self\",\n        DESCENDANT_OR_SELF: \"descendant-or-self\",\n        ANCESTOR_OR_SELF: \"ancestor-or-self\"\n    };\n\n    xpm.XPathTestEnum = {\n        NAME: \"name\",\n        NAME_WILDCARD: \"*\",\n        NAMESPACE_WILDCARD: \":*\",\n        TYPE_NODE: \"node()\",\n        TYPE_TEXT: \"text()\",\n        TYPE_COMMENT: \"comment()\",\n        TYPE_PROCESSING_INSTRUCTION: \"processing-instruction\"\n\n    };\n\n    xpm.XPathStep = function(definition) {\n        /*\n         * A step (part of a path)\n         *\n         */\n        this.axis = definition.axis;\n        this.test = definition.test;\n        this.predicates = definition.predicates || [];\n        this.name = definition.name;\n        this.namespace = definition.namespace;\n        this.literal = definition.literal;\n\n        this.testString = function () {\n             switch(this.test) {\n                case xpm.XPathTestEnum.NAME:\n                    return String(this.name);\n                case xpm.XPathTestEnum.TYPE_PROCESSING_INSTRUCTION:\n                    return \"processing-instruction(\" + (this.literal || \"\") + \")\";\n                case xpm.XPathTestEnum.NAMESPACE_WILDCARD:\n                    return this.namespace + \":*\";\n                default:\n                    return this.test || null;\n             }\n        };\n\n        this.toString = function() {\n            var stringArray = [];\n\n            stringArray.push(\"{step:\");\n            stringArray.push(String(this.axis));\n            stringArray.push(\",\");\n            stringArray.push(this.testString());\n            if (this.predicates.length > 0) {\n                stringArray.push(\",{\");\n                stringArray.push(this.predicates.join(\",\"));\n                stringArray.push(\"}\");\n            }\n\n            stringArray.push(\"}\");\n            return stringArray.join(\"\");\n        };\n\n        this.mainXPath = function () {\n            var axisPrefix = this.axis + \"::\"; // this is the default\n            // Use the abbreviated syntax to shorten the axis\n            // or in some cases the whole thing\n            switch (this.axis) {\n                case xpm.XPathAxisEnum.DESCENDANT_OR_SELF:\n                    if (this.test === xpm.XPathTestEnum.TYPE_NODE) {\n                        return \"//\";\n                    }\n                    break;\n                case xpm.XPathAxisEnum.CHILD:\n                    axisPrefix = \"\"; // this is the default\n                    break;\n                case xpm.XPathAxisEnum.ATTRIBUTE:\n                    axisPrefix = \"@\";\n                    break;\n                case xpm.XPathAxisEnum.SELF:\n                    if (this.test === xpm.XPathTestEnum.TYPE_NODE) {\n                        return \".\";\n                    }\n                    break;\n                case xpm.XPathAxisEnum.PARENT:\n                    if (this.test === xpm.XPathTestEnum.TYPE_NODE) {\n                        return \"..\";\n                    }\n                    break;\n                default:\n                   break;\n            }\n            return axisPrefix + this.testString();\n        };\n        this.predicateXPath = function (func) {\n            if (this.predicates.length > 0) {\n                return \"[\" + this.predicates.map(func).join(\"][\") + \"]\";\n            }\n            return \"\";\n        };\n        function _combine (transFunc) {\n            return function() {\n                return this.mainXPath() + this.predicateXPath(transFunc);\n            };\n        }\n        this.toXPath = _combine(objToXPath);\n        this.toHashtag = objToHashtagWithCombine(this, _combine);\n        this.getChildren = function () {\n           return [];\n        };\n\n        return this;\n    };\n\n    xpm.XPathInitialContextEnum = {\n        HASHTAG: \"hashtag\",\n        ROOT: \"abs\",\n        RELATIVE: \"rel\",\n        EXPR: \"expr\"\n    };\n\n    xpm.XPathPathExpr = function(definition) {\n        /**\n         * an XPath path, which consists mainly of steps\n         */\n        var self = this;\n        this.initial_context = definition.initial_context;\n        this.steps = definition.steps || [];\n        this.filter = definition.filter;\n        this.toString = function() {\n            var stringArray = [];\n            stringArray.push(\"{path-expr:\");\n            stringArray.push(this.initial_context === xpm.XPathInitialContextEnum.EXPR ?\n                             String(this.filter) : this.initial_context);\n            stringArray.push(\",{\");\n            stringArray.push(this.steps.join(\",\"));\n            stringArray.push(\"}}\");\n            return stringArray.join(\"\");\n        };\n        var _combine = function (func) {\n            return function () {\n                // this helper function only exists so that\n                // the two methods below it can call itx\n                var parts = self.steps.map(func), ret = [], curPart, prevPart, sep;\n                var root = (self.initial_context === xpm.XPathInitialContextEnum.ROOT) ? \"/\" : \"\";\n                if (self.filter) {\n                    parts.splice(0, 0, func(self.filter));\n                }\n                if (parts.length === 0) {\n                    return root;\n                }\n                for (var i = 0; i < parts.length; i ++) {\n                    curPart = parts[i];\n                    if (curPart !== \"//\" && prevPart !== \"//\") {\n                        // unless the current part starts with a slash, put slashes between\n                        // parts. the only exception to this rule is at the beginning,\n                        // when we only use a slash if it's an absolute path\n                        sep = (i === 0) ? root : \"/\";\n                        ret.push(sep);\n                    }\n                    ret.push(curPart);\n                    prevPart = curPart;\n                }\n                return ret.join(\"\");\n            };\n        };\n        this.toXPath = _combine(objToXPath);\n        this.toHashtag = objToHashtagWithCombine(this, _combine);\n        // custom function to pull out any filters and just return the root path\n        this.pathWithoutPredicates = _combine(function (step) { return step.mainXPath(); });\n\n        this.getChildren = function () {\n           return this.steps;\n        };\n\n        return this;\n    };\n\n    xpm.XPathFuncExpr = function (definition) {\n        /**\n         * Representation of an xpath function expression.\n         */\n        this.id = definition.id;                 //name of the function\n        this.args = definition.args || [];       //argument list\n        this.toString = function() {\n            var stringArray = [];\n            stringArray.push(\"{func-expr:\", String(this.id), \",{\");\n            stringArray.push(this.args.join(\",\"));\n            stringArray.push(\"}}\");\n            return stringArray.join(\"\");\n        };\n        function _combine (transFunc) {\n            return function () {\n                return this.id + \"(\" + this.args.map(transFunc).join(\", \") + \")\";\n            };\n        }\n        this.toXPath = _combine(objToXPath);\n        this.toHashtag = objToHashtagWithCombine(this, _combine);\n        this.getChildren = function () {\n           return this.args;\n        };\n        return this;\n    };\n\n    xpm.XPathFilterExpr = function (definition) {\n        /**\n         * Representation of an xpath filter expression.\n         */\n        this.expr = definition.expr;\n        this.predicates = definition.predicates || [];\n        this.toString = function() {\n            var stringArray = [];\n            stringArray.push(\"{filt-expr:\", this.expr.toString(), \",{\");\n            stringArray.push(this.predicates.join(\",\"));\n            stringArray.push(\"}}\");\n            return stringArray.join(\"\");\n        };\n        function _combine(transFunc) {\n            return function() {\n                var predicates = \"\";\n                if (this.predicates.length > 0) {\n                    predicates = \"[\" + this.predicates.map(transFunc).join(\"][\") + \"]\";\n                }\n                var expr = objToXPath(this.expr);\n                // FIXME should all non-function expressions be parenthesized?\n                if (!(this.expr instanceof xpm.XPathFuncExpr)) {\n                    expr = \"(\" + expr + \")\";\n                }\n                return expr + predicates;\n            };\n        }\n        this.toXPath = _combine(objToXPath);\n        this.toHashtag = objToHashtagWithCombine(this, _combine);\n        this.getChildren = function () {\n           return this.predicates;\n        };\n        return this;\n    };\n\n    xpm.HashtagExpr = function (definition) {\n        /**\n         * an extension of xpath that's not really an xpath\n         */\n        var self = this;\n        this.initial_context = definition.initial_context;\n        if (!hashtagConfig.isValidNamespace(definition.namespace)) {\n            throw new Error(definition.namespace + \" is not a valid # expression\");\n        }\n        this.namespace = definition.namespace;\n        this.steps = definition.steps || [];\n        this.toString = function() {\n            var stringArray = [];\n            stringArray.push(\"{hashtag-expr:\");\n            stringArray.push(this.namespace);\n            stringArray.push(\",{\");\n            stringArray.push(this.steps.join(\",\"));\n            stringArray.push(\"}}\");\n            return stringArray.join(\"\");\n        };\n        var _combine = function () {\n            var parts = [self.namespace].concat(self.steps),\n                ret = [];\n            for (var i = 0; i < parts.length; i ++) {\n                // hashtag to start then /\n                ret.push((i === 0) ? '#' : \"/\");\n                ret.push(parts[i]);\n            }\n            return ret.join(\"\");\n        };\n        this.toXPath = function () {\n            return hashtagConfig.hashtagToXPath(this.toHashtag());\n        };\n        this.toHashtag = _combine;\n        this.getChildren = function () {\n           return [];\n        };\n\n        return this;\n    };\n\n    // expressions\n    xpm.XPathExpressionTypeEnum = {\n        /*\n         * These aren't yet really used anywhere, but they are correct.\n         * They correlate with the \"type\" field in the parser for ops.\n         *\n         */\n        AND: \"and\",\n        OR: \"or\",\n        EQ: \"==\",\n        NEQ: \"!=\",\n        LT: \"<\",\n        LTE: \"<=\",\n        GT: \">\",\n        GTE: \">=\",\n        PLUS: \"+\",\n        MINUS: \"-\",\n        MULT: \"*\",\n        DIV: \"/\",\n        MOD: \"%\",\n        UMINUS: \"num-neg\",\n        UNION: \"union\"\n    };\n\n    var expressionTypeEnumToXPathLiteral = xpm.expressionTypeEnumToXPathLiteral = function (val) {\n        switch (val) {\n            case xpm.XPathExpressionTypeEnum.EQ:\n                return \"=\";\n            case xpm.XPathExpressionTypeEnum.MOD:\n                return \"mod\";\n            case xpm.XPathExpressionTypeEnum.DIV:\n                return \"div\";\n            case xpm.XPathExpressionTypeEnum.UMINUS:\n                return \"-\";\n            case xpm.XPathExpressionTypeEnum.UNION:\n                return \"|\";\n            default:\n                return val;\n        }\n    };\n\n    var binOpToString = function() {\n        return \"{binop-expr:\" + this.type + \",\" + String(this.left) + \",\" + String(this.right) + \"}\";\n    };\n\n    var isOp = xpm.isOp = function(someToken) {\n        /*\n         * Whether something is an operation\n         */\n        // this is probably breaking an abstraction layer.\n        var str = someToken.toString();\n        return str.indexOf(\"{binop-expr:\") === 0 || str.indexOf(\"{unop-expr:\") === 0;\n    };\n\n    var isLiteral = xpm.isLiteral = function(someToken) {\n        return (someToken instanceof xpm.XPathNumericLiteral ||\n                someToken instanceof xpm.XPathStringLiteral ||\n                someToken instanceof xpm.XPathPathExpr);\n    };\n\n    var isSimpleOp = xpm.isSimpleOp = function(someToken) {\n        return isOp(someToken) && isLiteral(someToken.left) && isLiteral(someToken.right);\n    };\n\n    function printBinOp (func) {\n        return function () {\n            var ret = func(this.left) + \" \" + expressionTypeEnumToXPathLiteral(this.type) + \" \" + func(this.right);\n            if (this.parens === true) {\n                return \"(\" + ret + \")\";\n            }\n            return ret;\n        };\n    }\n\n    var binOpToXPath = printBinOp(objToXPath);\n    var binOpToHashtag = printBinOp(objToHashtag);\n\n    var binOpChildren = function () {\n        return [this.left, this.right];\n    };\n\n    xpm.XPathBoolExpr = function(definition) {\n        this.type = definition.type;\n        this.left = definition.left;\n        this.right = definition.right;\n        this.toString = binOpToString;\n        this.toXPath = binOpToXPath;\n        this.toHashtag = binOpToHashtag.bind(this);\n        this.getChildren = binOpChildren;\n        return this;\n    };\n\n    xpm.XPathEqExpr = function(definition) {\n        this.type = definition.type;\n        this.left = definition.left;\n        this.right = definition.right;\n        this.toString = binOpToString;\n        this.toXPath = binOpToXPath;\n        this.toHashtag = binOpToHashtag.bind(this);\n        this.getChildren = binOpChildren;\n        return this;\n    };\n\n    xpm.XPathCmpExpr = function(definition) {\n        this.type = definition.type;\n        this.left = definition.left;\n        this.right = definition.right;\n        this.toString = binOpToString;\n        this.toXPath = binOpToXPath;\n        this.toHashtag = binOpToHashtag.bind(this);\n        this.getChildren = binOpChildren;\n        return this;\n    };\n\n    xpm.XPathArithExpr = function(definition) {\n        this.type = definition.type;\n        this.left = definition.left;\n        this.right = definition.right;\n        this.toString = binOpToString;\n        this.toXPath = binOpToXPath;\n        this.toHashtag = binOpToHashtag.bind(this);\n        this.getChildren = binOpChildren;\n        return this;\n    };\n\n    xpm.XPathUnionExpr = function(definition) {\n        this.type = definition.type;\n        this.left = definition.left;\n        this.right = definition.right;\n        this.toString = binOpToString;\n        this.toXPath = binOpToXPath;\n        this.toHashtag = binOpToHashtag.bind(this);\n        this.getChildren = binOpChildren;\n        return this;\n    };\n\n    xpm.XPathNumNegExpr = function(definition) {\n        this.type = definition.type;\n        this.value = definition.value;\n        this.toString = function() {\n            return \"{unop-expr:\" + this.type + \",\" + String(this.value) + \"}\";\n        };\n        function _combine(transFunc) {\n            return function() {\n                return \"-\" + transFunc(this.value);\n            };\n        }\n        this.toXPath = _combine(objToXPath);\n        this.toHashtag = _combine(objToHashtag);\n        this.getChildren = function () {\n           return [this.value];\n        };\n        return this;\n    };\n\n    return xpm;\n};\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\n    exports.makeXPathModels = makeXPathModels;\n}\n\n},{\"./lib/schemeNumber.js\":1}],3:[function(require,module,exports){\n/*\n\tJavaScript BigInteger library version 0.9\n\thttp://silentmatt.com/biginteger/\n\n\tCopyright (c) 2009 Matthew Crumley <email@matthewcrumley.com>\n\tCopyright (c) 2010,2011 by John Tobey <John.Tobey@gmail.com>\n\tLicensed under the MIT license.\n\n\tSupport for arbitrary internal representation base was added by\n\tVitaly Magerya.\n*/\n\n/*\n\tFile: biginteger.js\n\n\tExports:\n\n\t\t<BigInteger>\n*/\n(function(exports) {\n\"use strict\";\n/*\n\tClass: BigInteger\n\tAn arbitrarily-large integer.\n\n\t<BigInteger> objects should be considered immutable. None of the \"built-in\"\n\tmethods modify *this* or their arguments. All properties should be\n\tconsidered private.\n\n\tAll the methods of <BigInteger> instances can be called \"statically\". The\n\tstatic versions are convenient if you don't already have a <BigInteger>\n\tobject.\n\n\tAs an example, these calls are equivalent.\n\n\t> BigInteger(4).multiply(5); // returns BigInteger(20);\n\t> BigInteger.multiply(4, 5); // returns BigInteger(20);\n\n\t> var a = 42;\n\t> var a = BigInteger.toJSValue(\"0b101010\"); // Not completely useless...\n*/\n\nvar CONSTRUCT = {}; // Unique token to call \"private\" version of constructor\n\n/*\n\tConstructor: BigInteger()\n\tConvert a value to a <BigInteger>.\n\n\tAlthough <BigInteger()> is the constructor for <BigInteger> objects, it is\n\tbest not to call it as a constructor. If *n* is a <BigInteger> object, it is\n\tsimply returned as-is. Otherwise, <BigInteger()> is equivalent to <parse>\n\twithout a radix argument.\n\n\t> var n0 = BigInteger();      // Same as <BigInteger.ZERO>\n\t> var n1 = BigInteger(\"123\"); // Create a new <BigInteger> with value 123\n\t> var n2 = BigInteger(123);   // Create a new <BigInteger> with value 123\n\t> var n3 = BigInteger(n2);    // Return n2, unchanged\n\n\tThe constructor form only takes an array and a sign. *n* must be an\n\tarray of numbers in little-endian order, where each digit is between 0\n\tand BigInteger.base.  The second parameter sets the sign: -1 for\n\tnegative, +1 for positive, or 0 for zero. The array is *not copied and\n\tmay be modified*. If the array contains only zeros, the sign parameter\n\tis ignored and is forced to zero.\n\n\t> new BigInteger([5], -1): create a new BigInteger with value -5\n\n\tParameters:\n\n\t\tn - Value to convert to a <BigInteger>.\n\n\tReturns:\n\n\t\tA <BigInteger> value.\n\n\tSee Also:\n\n\t\t<parse>, <BigInteger>\n*/\nfunction BigInteger(n, s, token) {\n\tif (token !== CONSTRUCT) {\n\t\tif (n instanceof BigInteger) {\n\t\t\treturn n;\n\t\t}\n\t\telse if (typeof n === \"undefined\") {\n\t\t\treturn ZERO;\n\t\t}\n\t\treturn BigInteger.parse(n);\n\t}\n\n\tn = n || [];  // Provide the nullary constructor for subclasses.\n\twhile (n.length && !n[n.length - 1]) {\n\t\t--n.length;\n\t}\n\tthis._d = n;\n\tthis._s = n.length ? (s || 1) : 0;\n}\n\nBigInteger._construct = function(n, s) {\n\treturn new BigInteger(n, s, CONSTRUCT);\n};\n\n// Base-10 speedup hacks in parse, toString, exp10 and log functions\n// require base to be a power of 10. 10^7 is the largest such power\n// that won't cause a precision loss when digits are multiplied.\nvar BigInteger_base = 10000000;\nvar BigInteger_base_log10 = 7;\n\nBigInteger.base = BigInteger_base;\nBigInteger.base_log10 = BigInteger_base_log10;\n\nvar ZERO = new BigInteger([], 0, CONSTRUCT);\n// Constant: ZERO\n// <BigInteger> 0.\nBigInteger.ZERO = ZERO;\n\nvar ONE = new BigInteger([1], 1, CONSTRUCT);\n// Constant: ONE\n// <BigInteger> 1.\nBigInteger.ONE = ONE;\n\nvar M_ONE = new BigInteger(ONE._d, -1, CONSTRUCT);\n// Constant: M_ONE\n// <BigInteger> -1.\nBigInteger.M_ONE = M_ONE;\n\n// Constant: _0\n// Shortcut for <ZERO>.\nBigInteger._0 = ZERO;\n\n// Constant: _1\n// Shortcut for <ONE>.\nBigInteger._1 = ONE;\n\n/*\n\tConstant: small\n\tArray of <BigIntegers> from 0 to 36.\n\n\tThese are used internally for parsing, but useful when you need a \"small\"\n\t<BigInteger>.\n\n\tSee Also:\n\n\t\t<ZERO>, <ONE>, <_0>, <_1>\n*/\nBigInteger.small = [\n\tZERO,\n\tONE,\n\t/* Assuming BigInteger_base > 36 */\n\tnew BigInteger( [2], 1, CONSTRUCT),\n\tnew BigInteger( [3], 1, CONSTRUCT),\n\tnew BigInteger( [4], 1, CONSTRUCT),\n\tnew BigInteger( [5], 1, CONSTRUCT),\n\tnew BigInteger( [6], 1, CONSTRUCT),\n\tnew BigInteger( [7], 1, CONSTRUCT),\n\tnew BigInteger( [8], 1, CONSTRUCT),\n\tnew BigInteger( [9], 1, CONSTRUCT),\n\tnew BigInteger([10], 1, CONSTRUCT),\n\tnew BigInteger([11], 1, CONSTRUCT),\n\tnew BigInteger([12], 1, CONSTRUCT),\n\tnew BigInteger([13], 1, CONSTRUCT),\n\tnew BigInteger([14], 1, CONSTRUCT),\n\tnew BigInteger([15], 1, CONSTRUCT),\n\tnew BigInteger([16], 1, CONSTRUCT),\n\tnew BigInteger([17], 1, CONSTRUCT),\n\tnew BigInteger([18], 1, CONSTRUCT),\n\tnew BigInteger([19], 1, CONSTRUCT),\n\tnew BigInteger([20], 1, CONSTRUCT),\n\tnew BigInteger([21], 1, CONSTRUCT),\n\tnew BigInteger([22], 1, CONSTRUCT),\n\tnew BigInteger([23], 1, CONSTRUCT),\n\tnew BigInteger([24], 1, CONSTRUCT),\n\tnew BigInteger([25], 1, CONSTRUCT),\n\tnew BigInteger([26], 1, CONSTRUCT),\n\tnew BigInteger([27], 1, CONSTRUCT),\n\tnew BigInteger([28], 1, CONSTRUCT),\n\tnew BigInteger([29], 1, CONSTRUCT),\n\tnew BigInteger([30], 1, CONSTRUCT),\n\tnew BigInteger([31], 1, CONSTRUCT),\n\tnew BigInteger([32], 1, CONSTRUCT),\n\tnew BigInteger([33], 1, CONSTRUCT),\n\tnew BigInteger([34], 1, CONSTRUCT),\n\tnew BigInteger([35], 1, CONSTRUCT),\n\tnew BigInteger([36], 1, CONSTRUCT)\n];\n\n// Used for parsing/radix conversion\nBigInteger.digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n\n/*\n\tMethod: toString\n\tConvert a <BigInteger> to a string.\n\n\tWhen *base* is greater than 10, letters are upper case.\n\n\tParameters:\n\n\t\tbase - Optional base to represent the number in (default is base 10).\n\t\t       Must be between 2 and 36 inclusive, or an Error will be thrown.\n\n\tReturns:\n\n\t\tThe string representation of the <BigInteger>.\n*/\nBigInteger.prototype.toString = function(base) {\n\tbase = +base || 10;\n\tif (base < 2 || base > 36) {\n\t\tthrow new Error(\"illegal radix \" + base + \".\");\n\t}\n\tif (this._s === 0) {\n\t\treturn \"0\";\n\t}\n\tif (base === 10) {\n\t\tvar str = this._s < 0 ? \"-\" : \"\";\n\t\tstr += this._d[this._d.length - 1].toString();\n\t\tfor (var i = this._d.length - 2; i >= 0; i--) {\n\t\t\tvar group = this._d[i].toString();\n\t\t\twhile (group.length < BigInteger_base_log10) group = '0' + group;\n\t\t\tstr += group;\n\t\t}\n\t\treturn str;\n\t}\n\telse {\n\t\tvar numerals = BigInteger.digits;\n\t\tbase = BigInteger.small[base];\n\t\tvar sign = this._s;\n\n\t\tvar n = this.abs();\n\t\tvar digits = [];\n\t\tvar digit;\n\n\t\twhile (n._s !== 0) {\n\t\t\tvar divmod = n.divRem(base);\n\t\t\tn = divmod[0];\n\t\t\tdigit = divmod[1];\n\t\t\t// TODO: This could be changed to unshift instead of reversing at the end.\n\t\t\t// Benchmark both to compare speeds.\n\t\t\tdigits.push(numerals[digit.valueOf()]);\n\t\t}\n\t\treturn (sign < 0 ? \"-\" : \"\") + digits.reverse().join(\"\");\n\t}\n};\n\n// Verify strings for parsing\nBigInteger.radixRegex = [\n\t/^$/,\n\t/^$/,\n\t/^[01]*$/,\n\t/^[012]*$/,\n\t/^[0-3]*$/,\n\t/^[0-4]*$/,\n\t/^[0-5]*$/,\n\t/^[0-6]*$/,\n\t/^[0-7]*$/,\n\t/^[0-8]*$/,\n\t/^[0-9]*$/,\n\t/^[0-9aA]*$/,\n\t/^[0-9abAB]*$/,\n\t/^[0-9abcABC]*$/,\n\t/^[0-9a-dA-D]*$/,\n\t/^[0-9a-eA-E]*$/,\n\t/^[0-9a-fA-F]*$/,\n\t/^[0-9a-gA-G]*$/,\n\t/^[0-9a-hA-H]*$/,\n\t/^[0-9a-iA-I]*$/,\n\t/^[0-9a-jA-J]*$/,\n\t/^[0-9a-kA-K]*$/,\n\t/^[0-9a-lA-L]*$/,\n\t/^[0-9a-mA-M]*$/,\n\t/^[0-9a-nA-N]*$/,\n\t/^[0-9a-oA-O]*$/,\n\t/^[0-9a-pA-P]*$/,\n\t/^[0-9a-qA-Q]*$/,\n\t/^[0-9a-rA-R]*$/,\n\t/^[0-9a-sA-S]*$/,\n\t/^[0-9a-tA-T]*$/,\n\t/^[0-9a-uA-U]*$/,\n\t/^[0-9a-vA-V]*$/,\n\t/^[0-9a-wA-W]*$/,\n\t/^[0-9a-xA-X]*$/,\n\t/^[0-9a-yA-Y]*$/,\n\t/^[0-9a-zA-Z]*$/\n];\n\n/*\n\tFunction: parse\n\tParse a string into a <BigInteger>.\n\n\t*base* is optional but, if provided, must be from 2 to 36 inclusive. If\n\t*base* is not provided, it will be guessed based on the leading characters\n\tof *s* as follows:\n\n\t- \"0x\" or \"0X\": *base* = 16\n\t- \"0c\" or \"0C\": *base* = 8\n\t- \"0b\" or \"0B\": *base* = 2\n\t- else: *base* = 10\n\n\tIf no base is provided, or *base* is 10, the number can be in exponential\n\tform. For example, these are all valid:\n\n\t> BigInteger.parse(\"1e9\");              // Same as \"1000000000\"\n\t> BigInteger.parse(\"1.234*10^3\");       // Same as 1234\n\t> BigInteger.parse(\"56789 * 10 ** -2\"); // Same as 567\n\n\tIf any characters fall outside the range defined by the radix, an exception\n\twill be thrown.\n\n\tParameters:\n\n\t\ts - The string to parse.\n\t\tbase - Optional radix (default is to guess based on *s*).\n\n\tReturns:\n\n\t\ta <BigInteger> instance.\n*/\nBigInteger.parse = function(s, base) {\n\t// Expands a number in exponential form to decimal form.\n\t// expandExponential(\"-13.441*10^5\") === \"1344100\";\n\t// expandExponential(\"1.12300e-1\") === \"0.112300\";\n\t// expandExponential(1000000000000000000000000000000) === \"1000000000000000000000000000000\";\n\tfunction expandExponential(str) {\n\t\tstr = str.replace(/\\s*[*xX]\\s*10\\s*(\\^|\\*\\*)\\s*/, \"e\");\n\n\t\treturn str.replace(/^([+\\-])?(\\d+)\\.?(\\d*)[eE]([+\\-]?\\d+)$/, function(x, s, n, f, c) {\n\t\t\tc = +c;\n\t\t\tvar l = c < 0;\n\t\t\tvar i = n.length + c;\n\t\t\tx = (l ? n : f).length;\n\t\t\tc = ((c = Math.abs(c)) >= x ? c - x + l : 0);\n\t\t\tvar z = (new Array(c + 1)).join(\"0\");\n\t\t\tvar r = n + f;\n\t\t\treturn (s || \"\") + (l ? r = z + r : r += z).substr(0, i += l ? z.length : 0) + (i < r.length ? \".\" + r.substr(i) : \"\");\n\t\t});\n\t}\n\n\ts = s.toString();\n\tif (typeof base === \"undefined\" || +base === 10) {\n\t\ts = expandExponential(s);\n\t}\n\n\tvar prefixRE;\n\tif (typeof base === \"undefined\") {\n\t\tprefixRE = '0[xcb]';\n\t}\n\telse if (base == 16) {\n\t\tprefixRE = '0x';\n\t}\n\telse if (base == 8) {\n\t\tprefixRE = '0c';\n\t}\n\telse if (base == 2) {\n\t\tprefixRE = '0b';\n\t}\n\telse {\n\t\tprefixRE = '';\n\t}\n\tvar parts = new RegExp('^([+\\\\-]?)(' + prefixRE + ')?([0-9a-z]*)(?:\\\\.\\\\d*)?$', 'i').exec(s);\n\tif (parts) {\n\t\tvar sign = parts[1] || \"+\";\n\t\tvar baseSection = parts[2] || \"\";\n\t\tvar digits = parts[3] || \"\";\n\n\t\tif (typeof base === \"undefined\") {\n\t\t\t// Guess base\n\t\t\tif (baseSection === \"0x\" || baseSection === \"0X\") { // Hex\n\t\t\t\tbase = 16;\n\t\t\t}\n\t\t\telse if (baseSection === \"0c\" || baseSection === \"0C\") { // Octal\n\t\t\t\tbase = 8;\n\t\t\t}\n\t\t\telse if (baseSection === \"0b\" || baseSection === \"0B\") { // Binary\n\t\t\t\tbase = 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbase = 10;\n\t\t\t}\n\t\t}\n\t\telse if (base < 2 || base > 36) {\n\t\t\tthrow new Error(\"Illegal radix \" + base + \".\");\n\t\t}\n\n\t\tbase = +base;\n\n\t\t// Check for digits outside the range\n\t\tif (!(BigInteger.radixRegex[base].test(digits))) {\n\t\t\tthrow new Error(\"Bad digit for radix \" + base);\n\t\t}\n\n\t\t// Strip leading zeros, and convert to array\n\t\tdigits = digits.replace(/^0+/, \"\").split(\"\");\n\t\tif (digits.length === 0) {\n\t\t\treturn ZERO;\n\t\t}\n\n\t\t// Get the sign (we know it's not zero)\n\t\tsign = (sign === \"-\") ? -1 : 1;\n\n\t\t// Optimize 10\n\t\tif (base == 10) {\n\t\t\tvar d = [];\n\t\t\twhile (digits.length >= BigInteger_base_log10) {\n\t\t\t\td.push(parseInt(digits.splice(digits.length-BigInteger.base_log10, BigInteger.base_log10).join(''), 10));\n\t\t\t}\n\t\t\td.push(parseInt(digits.join(''), 10));\n\t\t\treturn new BigInteger(d, sign, CONSTRUCT);\n\t\t}\n\n\t\t// Do the conversion\n\t\tvar d = ZERO;\n\t\tbase = BigInteger.small[base];\n\t\tvar small = BigInteger.small;\n\t\tfor (var i = 0; i < digits.length; i++) {\n\t\t\td = d.multiply(base).add(small[parseInt(digits[i], 36)]);\n\t\t}\n\t\treturn new BigInteger(d._d, sign, CONSTRUCT);\n\t}\n\telse {\n\t\tthrow new Error(\"Invalid BigInteger format: \" + s);\n\t}\n};\n\n/*\n\tFunction: add\n\tAdd two <BigIntegers>.\n\n\tParameters:\n\n\t\tn - The number to add to *this*. Will be converted to a <BigInteger>.\n\n\tReturns:\n\n\t\tThe numbers added together.\n\n\tSee Also:\n\n\t\t<subtract>, <multiply>, <quotient>, <next>\n*/\nBigInteger.prototype.add = function(n) {\n\tif (this._s === 0) {\n\t\treturn BigInteger(n);\n\t}\n\n\tn = BigInteger(n);\n\tif (n._s === 0) {\n\t\treturn this;\n\t}\n\tif (this._s !== n._s) {\n\t\tn = n.negate();\n\t\treturn this.subtract(n);\n\t}\n\n\tvar a = this._d;\n\tvar b = n._d;\n\tvar al = a.length;\n\tvar bl = b.length;\n\tvar sum = new Array(Math.max(al, bl) + 1);\n\tvar size = Math.min(al, bl);\n\tvar carry = 0;\n\tvar digit;\n\n\tfor (var i = 0; i < size; i++) {\n\t\tdigit = a[i] + b[i] + carry;\n\t\tsum[i] = digit % BigInteger_base;\n\t\tcarry = (digit / BigInteger_base) | 0;\n\t}\n\tif (bl > al) {\n\t\ta = b;\n\t\tal = bl;\n\t}\n\tfor (i = size; carry && i < al; i++) {\n\t\tdigit = a[i] + carry;\n\t\tsum[i] = digit % BigInteger_base;\n\t\tcarry = (digit / BigInteger_base) | 0;\n\t}\n\tif (carry) {\n\t\tsum[i] = carry;\n\t}\n\n\tfor ( ; i < al; i++) {\n\t\tsum[i] = a[i];\n\t}\n\n\treturn new BigInteger(sum, this._s, CONSTRUCT);\n};\n\n/*\n\tFunction: negate\n\tGet the additive inverse of a <BigInteger>.\n\n\tReturns:\n\n\t\tA <BigInteger> with the same magnatude, but with the opposite sign.\n\n\tSee Also:\n\n\t\t<abs>\n*/\nBigInteger.prototype.negate = function() {\n\treturn new BigInteger(this._d, (-this._s) | 0, CONSTRUCT);\n};\n\n/*\n\tFunction: abs\n\tGet the absolute value of a <BigInteger>.\n\n\tReturns:\n\n\t\tA <BigInteger> with the same magnatude, but always positive (or zero).\n\n\tSee Also:\n\n\t\t<negate>\n*/\nBigInteger.prototype.abs = function() {\n\treturn (this._s < 0) ? this.negate() : this;\n};\n\n/*\n\tFunction: subtract\n\tSubtract two <BigIntegers>.\n\n\tParameters:\n\n\t\tn - The number to subtract from *this*. Will be converted to a <BigInteger>.\n\n\tReturns:\n\n\t\tThe *n* subtracted from *this*.\n\n\tSee Also:\n\n\t\t<add>, <multiply>, <quotient>, <prev>\n*/\nBigInteger.prototype.subtract = function(n) {\n\tif (this._s === 0) {\n\t\treturn BigInteger(n).negate();\n\t}\n\n\tn = BigInteger(n);\n\tif (n._s === 0) {\n\t\treturn this;\n\t}\n\tif (this._s !== n._s) {\n\t\tn = n.negate();\n\t\treturn this.add(n);\n\t}\n\n\tvar m = this;\n\t// negative - negative => -|a| - -|b| => -|a| + |b| => |b| - |a|\n\tif (this._s < 0) {\n\t\tm = new BigInteger(n._d, 1, CONSTRUCT);\n\t\tn = new BigInteger(this._d, 1, CONSTRUCT);\n\t}\n\n\t// Both are positive => a - b\n\tvar sign = m.compareAbs(n);\n\tif (sign === 0) {\n\t\treturn ZERO;\n\t}\n\telse if (sign < 0) {\n\t\t// swap m and n\n\t\tvar t = n;\n\t\tn = m;\n\t\tm = t;\n\t}\n\n\t// a > b\n\tvar a = m._d;\n\tvar b = n._d;\n\tvar al = a.length;\n\tvar bl = b.length;\n\tvar diff = new Array(al); // al >= bl since a > b\n\tvar borrow = 0;\n\tvar i;\n\tvar digit;\n\n\tfor (i = 0; i < bl; i++) {\n\t\tdigit = a[i] - borrow - b[i];\n\t\tif (digit < 0) {\n\t\t\tdigit += BigInteger_base;\n\t\t\tborrow = 1;\n\t\t}\n\t\telse {\n\t\t\tborrow = 0;\n\t\t}\n\t\tdiff[i] = digit;\n\t}\n\tfor (i = bl; i < al; i++) {\n\t\tdigit = a[i] - borrow;\n\t\tif (digit < 0) {\n\t\t\tdigit += BigInteger_base;\n\t\t}\n\t\telse {\n\t\t\tdiff[i++] = digit;\n\t\t\tbreak;\n\t\t}\n\t\tdiff[i] = digit;\n\t}\n\tfor ( ; i < al; i++) {\n\t\tdiff[i] = a[i];\n\t}\n\n\treturn new BigInteger(diff, sign, CONSTRUCT);\n};\n\n(function() {\n\tfunction addOne(n, sign) {\n\t\tvar a = n._d;\n\t\tvar sum = a.slice();\n\t\tvar carry = true;\n\t\tvar i = 0;\n\n\t\twhile (true) {\n\t\t\tvar digit = (a[i] || 0) + 1;\n\t\t\tsum[i] = digit % BigInteger_base;\n\t\t\tif (digit <= BigInteger_base - 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t++i;\n\t\t}\n\n\t\treturn new BigInteger(sum, sign, CONSTRUCT);\n\t}\n\n\tfunction subtractOne(n, sign) {\n\t\tvar a = n._d;\n\t\tvar sum = a.slice();\n\t\tvar borrow = true;\n\t\tvar i = 0;\n\n\t\twhile (true) {\n\t\t\tvar digit = (a[i] || 0) - 1;\n\t\t\tif (digit < 0) {\n\t\t\t\tsum[i] = digit + BigInteger_base;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsum[i] = digit;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t++i;\n\t\t}\n\n\t\treturn new BigInteger(sum, sign, CONSTRUCT);\n\t}\n\n\t/*\n\t\tFunction: next\n\t\tGet the next <BigInteger> (add one).\n\n\t\tReturns:\n\n\t\t\t*this* + 1.\n\n\t\tSee Also:\n\n\t\t\t<add>, <prev>\n\t*/\n\tBigInteger.prototype.next = function() {\n\t\tswitch (this._s) {\n\t\tcase 0:\n\t\t\treturn ONE;\n\t\tcase -1:\n\t\t\treturn subtractOne(this, -1);\n\t\t// case 1:\n\t\tdefault:\n\t\t\treturn addOne(this, 1);\n\t\t}\n\t};\n\n\t/*\n\t\tFunction: prev\n\t\tGet the previous <BigInteger> (subtract one).\n\n\t\tReturns:\n\n\t\t\t*this* - 1.\n\n\t\tSee Also:\n\n\t\t\t<next>, <subtract>\n\t*/\n\tBigInteger.prototype.prev = function() {\n\t\tswitch (this._s) {\n\t\tcase 0:\n\t\t\treturn M_ONE;\n\t\tcase -1:\n\t\t\treturn addOne(this, -1);\n\t\t// case 1:\n\t\tdefault:\n\t\t\treturn subtractOne(this, 1);\n\t\t}\n\t};\n})();\n\n/*\n\tFunction: compareAbs\n\tCompare the absolute value of two <BigIntegers>.\n\n\tCalling <compareAbs> is faster than calling <abs> twice, then <compare>.\n\n\tParameters:\n\n\t\tn - The number to compare to *this*. Will be converted to a <BigInteger>.\n\n\tReturns:\n\n\t\t-1, 0, or +1 if *|this|* is less than, equal to, or greater than *|n|*.\n\n\tSee Also:\n\n\t\t<compare>, <abs>\n*/\nBigInteger.prototype.compareAbs = function(n) {\n\tif (this === n) {\n\t\treturn 0;\n\t}\n\n\tif (!(n instanceof BigInteger)) {\n\t\tif (!isFinite(n)) {\n\t\t\treturn(isNaN(n) ? n : -1);\n\t\t}\n\t\tn = BigInteger(n);\n\t}\n\n\tif (this._s === 0) {\n\t\treturn (n._s !== 0) ? -1 : 0;\n\t}\n\tif (n._s === 0) {\n\t\treturn 1;\n\t}\n\n\tvar l = this._d.length;\n\tvar nl = n._d.length;\n\tif (l < nl) {\n\t\treturn -1;\n\t}\n\telse if (l > nl) {\n\t\treturn 1;\n\t}\n\n\tvar a = this._d;\n\tvar b = n._d;\n\tfor (var i = l-1; i >= 0; i--) {\n\t\tif (a[i] !== b[i]) {\n\t\t\treturn a[i] < b[i] ? -1 : 1;\n\t\t}\n\t}\n\n\treturn 0;\n};\n\n/*\n\tFunction: compare\n\tCompare two <BigIntegers>.\n\n\tParameters:\n\n\t\tn - The number to compare to *this*. Will be converted to a <BigInteger>.\n\n\tReturns:\n\n\t\t-1, 0, or +1 if *this* is less than, equal to, or greater than *n*.\n\n\tSee Also:\n\n\t\t<compareAbs>, <isPositive>, <isNegative>, <isUnit>\n*/\nBigInteger.prototype.compare = function(n) {\n\tif (this === n) {\n\t\treturn 0;\n\t}\n\n\tn = BigInteger(n);\n\n\tif (this._s === 0) {\n\t\treturn -n._s;\n\t}\n\n\tif (this._s === n._s) { // both positive or both negative\n\t\tvar cmp = this.compareAbs(n);\n\t\treturn cmp * this._s;\n\t}\n\telse {\n\t\treturn this._s;\n\t}\n};\n\n/*\n\tFunction: isUnit\n\tReturn true iff *this* is either 1 or -1.\n\n\tReturns:\n\n\t\ttrue if *this* compares equal to <BigInteger.ONE> or <BigInteger.M_ONE>.\n\n\tSee Also:\n\n\t\t<isZero>, <isNegative>, <isPositive>, <compareAbs>, <compare>,\n\t\t<BigInteger.ONE>, <BigInteger.M_ONE>\n*/\nBigInteger.prototype.isUnit = function() {\n\treturn this === ONE ||\n\t\tthis === M_ONE ||\n\t\t(this._d.length === 1 && this._d[0] === 1);\n};\n\n/*\n\tFunction: multiply\n\tMultiply two <BigIntegers>.\n\n\tParameters:\n\n\t\tn - The number to multiply *this* by. Will be converted to a\n\t\t<BigInteger>.\n\n\tReturns:\n\n\t\tThe numbers multiplied together.\n\n\tSee Also:\n\n\t\t<add>, <subtract>, <quotient>, <square>\n*/\nBigInteger.prototype.multiply = function(n) {\n\t// TODO: Consider adding Karatsuba multiplication for large numbers\n\tif (this._s === 0) {\n\t\treturn ZERO;\n\t}\n\n\tn = BigInteger(n);\n\tif (n._s === 0) {\n\t\treturn ZERO;\n\t}\n\tif (this.isUnit()) {\n\t\tif (this._s < 0) {\n\t\t\treturn n.negate();\n\t\t}\n\t\treturn n;\n\t}\n\tif (n.isUnit()) {\n\t\tif (n._s < 0) {\n\t\t\treturn this.negate();\n\t\t}\n\t\treturn this;\n\t}\n\tif (this === n) {\n\t\treturn this.square();\n\t}\n\n\tvar r = (this._d.length >= n._d.length);\n\tvar a = (r ? this : n)._d; // a will be longer than b\n\tvar b = (r ? n : this)._d;\n\tvar al = a.length;\n\tvar bl = b.length;\n\n\tvar pl = al + bl;\n\tvar partial = new Array(pl);\n\tvar i;\n\tfor (i = 0; i < pl; i++) {\n\t\tpartial[i] = 0;\n\t}\n\n\tfor (i = 0; i < bl; i++) {\n\t\tvar carry = 0;\n\t\tvar bi = b[i];\n\t\tvar jlimit = al + i;\n\t\tvar digit;\n\t\tfor (var j = i; j < jlimit; j++) {\n\t\t\tdigit = partial[j] + bi * a[j - i] + carry;\n\t\t\tcarry = (digit / BigInteger_base) | 0;\n\t\t\tpartial[j] = (digit % BigInteger_base) | 0;\n\t\t}\n\t\tif (carry) {\n\t\t\tdigit = partial[j] + carry;\n\t\t\tcarry = (digit / BigInteger_base) | 0;\n\t\t\tpartial[j] = digit % BigInteger_base;\n\t\t}\n\t}\n\treturn new BigInteger(partial, this._s * n._s, CONSTRUCT);\n};\n\n// Multiply a BigInteger by a single-digit native number\n// Assumes that this and n are >= 0\n// This is not really intended to be used outside the library itself\nBigInteger.prototype.multiplySingleDigit = function(n) {\n\tif (n === 0 || this._s === 0) {\n\t\treturn ZERO;\n\t}\n\tif (n === 1) {\n\t\treturn this;\n\t}\n\n\tvar digit;\n\tif (this._d.length === 1) {\n\t\tdigit = this._d[0] * n;\n\t\tif (digit >= BigInteger_base) {\n\t\t\treturn new BigInteger([(digit % BigInteger_base)|0,\n\t\t\t\t\t(digit / BigInteger_base)|0], 1, CONSTRUCT);\n\t\t}\n\t\treturn new BigInteger([digit], 1, CONSTRUCT);\n\t}\n\n\tif (n === 2) {\n\t\treturn this.add(this);\n\t}\n\tif (this.isUnit()) {\n\t\treturn new BigInteger([n], 1, CONSTRUCT);\n\t}\n\n\tvar a = this._d;\n\tvar al = a.length;\n\n\tvar pl = al + 1;\n\tvar partial = new Array(pl);\n\tfor (var i = 0; i < pl; i++) {\n\t\tpartial[i] = 0;\n\t}\n\n\tvar carry = 0;\n\tfor (var j = 0; j < al; j++) {\n\t\tdigit = n * a[j] + carry;\n\t\tcarry = (digit / BigInteger_base) | 0;\n\t\tpartial[j] = (digit % BigInteger_base) | 0;\n\t}\n\tif (carry) {\n\t\tpartial[j] = carry;\n\t}\n\n\treturn new BigInteger(partial, 1, CONSTRUCT);\n};\n\n/*\n\tFunction: square\n\tMultiply a <BigInteger> by itself.\n\n\tThis is slightly faster than regular multiplication, since it removes the\n\tduplicated multiplcations.\n\n\tReturns:\n\n\t\t> this.multiply(this)\n\n\tSee Also:\n\t\t<multiply>\n*/\nBigInteger.prototype.square = function() {\n\t// Normally, squaring a 10-digit number would take 100 multiplications.\n\t// Of these 10 are unique diagonals, of the remaining 90 (100-10), 45 are repeated.\n\t// This procedure saves (N*(N-1))/2 multiplications, (e.g., 45 of 100 multiplies).\n\t// Based on code by Gary Darby, Intellitech Systems Inc., www.DelphiForFun.org\n\n\tif (this._s === 0) {\n\t\treturn ZERO;\n\t}\n\tif (this.isUnit()) {\n\t\treturn ONE;\n\t}\n\n\tvar digits = this._d;\n\tvar length = digits.length;\n\tvar imult1 = new Array(length + length + 1);\n\tvar product, carry, k;\n\tvar i;\n\n\t// Calculate diagonal\n\tfor (i = 0; i < length; i++) {\n\t\tk = i * 2;\n\t\tproduct = digits[i] * digits[i];\n\t\tcarry = (product / BigInteger_base) | 0;\n\t\timult1[k] = product % BigInteger_base;\n\t\timult1[k + 1] = carry;\n\t}\n\n\t// Calculate repeating part\n\tfor (i = 0; i < length; i++) {\n\t\tcarry = 0;\n\t\tk = i * 2 + 1;\n\t\tfor (var j = i + 1; j < length; j++, k++) {\n\t\t\tproduct = digits[j] * digits[i] * 2 + imult1[k] + carry;\n\t\t\tcarry = (product / BigInteger_base) | 0;\n\t\t\timult1[k] = product % BigInteger_base;\n\t\t}\n\t\tk = length + i;\n\t\tvar digit = carry + imult1[k];\n\t\tcarry = (digit / BigInteger_base) | 0;\n\t\timult1[k] = digit % BigInteger_base;\n\t\timult1[k + 1] += carry;\n\t}\n\n\treturn new BigInteger(imult1, 1, CONSTRUCT);\n};\n\n/*\n\tFunction: quotient\n\tDivide two <BigIntegers> and truncate towards zero.\n\n\t<quotient> throws an exception if *n* is zero.\n\n\tParameters:\n\n\t\tn - The number to divide *this* by. Will be converted to a <BigInteger>.\n\n\tReturns:\n\n\t\tThe *this* / *n*, truncated to an integer.\n\n\tSee Also:\n\n\t\t<add>, <subtract>, <multiply>, <divRem>, <remainder>\n*/\nBigInteger.prototype.quotient = function(n) {\n\treturn this.divRem(n)[0];\n};\n\n/*\n\tFunction: divide\n\tDeprecated synonym for <quotient>.\n*/\nBigInteger.prototype.divide = BigInteger.prototype.quotient;\n\n/*\n\tFunction: remainder\n\tCalculate the remainder of two <BigIntegers>.\n\n\t<remainder> throws an exception if *n* is zero.\n\n\tParameters:\n\n\t\tn - The remainder after *this* is divided *this* by *n*. Will be\n\t\t    converted to a <BigInteger>.\n\n\tReturns:\n\n\t\t*this* % *n*.\n\n\tSee Also:\n\n\t\t<divRem>, <quotient>\n*/\nBigInteger.prototype.remainder = function(n) {\n\treturn this.divRem(n)[1];\n};\n\n/*\n\tFunction: divRem\n\tCalculate the integer quotient and remainder of two <BigIntegers>.\n\n\t<divRem> throws an exception if *n* is zero.\n\n\tParameters:\n\n\t\tn - The number to divide *this* by. Will be converted to a <BigInteger>.\n\n\tReturns:\n\n\t\tA two-element array containing the quotient and the remainder.\n\n\t\t> a.divRem(b)\n\n\t\tis exactly equivalent to\n\n\t\t> [a.quotient(b), a.remainder(b)]\n\n\t\texcept it is faster, because they are calculated at the same time.\n\n\tSee Also:\n\n\t\t<quotient>, <remainder>\n*/\nBigInteger.prototype.divRem = function(n) {\n\tn = BigInteger(n);\n\tif (n._s === 0) {\n\t\tthrow new Error(\"Divide by zero\");\n\t}\n\tif (this._s === 0) {\n\t\treturn [ZERO, ZERO];\n\t}\n\tif (n._d.length === 1) {\n\t\treturn this.divRemSmall(n._s * n._d[0]);\n\t}\n\n\t// Test for easy cases -- |n1| <= |n2|\n\tswitch (this.compareAbs(n)) {\n\tcase 0: // n1 == n2\n\t\treturn [this._s === n._s ? ONE : M_ONE, ZERO];\n\tcase -1: // |n1| < |n2|\n\t\treturn [ZERO, this];\n\t}\n\n\tvar sign = this._s * n._s;\n\tvar a = n.abs();\n\tvar b_digits = this._d;\n\tvar b_index = b_digits.length;\n\tvar digits = n._d.length;\n\tvar quot = [];\n\tvar guess;\n\n\tvar part = new BigInteger([], 0, CONSTRUCT);\n\tpart._s = 1;\n\n\twhile (b_index) {\n\t\tpart._d.unshift(b_digits[--b_index]);\n\n\t\tif (part.compareAbs(n) < 0) {\n\t\t\tquot.push(0);\n\t\t\tcontinue;\n\t\t}\n\t\tif (part._s === 0) {\n\t\t\tguess = 0;\n\t\t}\n\t\telse {\n\t\t\tvar xlen = part._d.length, ylen = a._d.length;\n\t\t\tvar highx = part._d[xlen-1]*BigInteger_base + part._d[xlen-2];\n\t\t\tvar highy = a._d[ylen-1]*BigInteger_base + a._d[ylen-2];\n\t\t\tif (part._d.length > a._d.length) {\n\t\t\t\t// The length of part._d can either match a._d length,\n\t\t\t\t// or exceed it by one.\n\t\t\t\thighx = (highx+1)*BigInteger_base;\n\t\t\t}\n\t\t\tguess = Math.ceil(highx/highy);\n\t\t}\n\t\tdo {\n\t\t\tvar check = a.multiplySingleDigit(guess);\n\t\t\tif (check.compareAbs(part) <= 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tguess--;\n\t\t} while (guess);\n\n\t\tquot.push(guess);\n\t\tif (!guess) {\n\t\t\tcontinue;\n\t\t}\n\t\tvar diff = part.subtract(check);\n\t\tpart._d = diff._d.slice();\n\t\tif (part._d.length === 0) {\n\t\t\tpart._s = 0;\n\t\t}\n\t}\n\n\treturn [new BigInteger(quot.reverse(), sign, CONSTRUCT),\n\t\t   new BigInteger(part._d, this._s, CONSTRUCT)];\n};\n\n// Throws an exception if n is outside of (-BigInteger.base, -1] or\n// [1, BigInteger.base).  It's not necessary to call this, since the\n// other division functions will call it if they are able to.\nBigInteger.prototype.divRemSmall = function(n) {\n\tvar r;\n\tn = +n;\n\tif (n === 0) {\n\t\tthrow new Error(\"Divide by zero\");\n\t}\n\n\tvar n_s = n < 0 ? -1 : 1;\n\tvar sign = this._s * n_s;\n\tn = Math.abs(n);\n\n\tif (n < 1 || n >= BigInteger_base) {\n\t\tthrow new Error(\"Argument out of range\");\n\t}\n\n\tif (this._s === 0) {\n\t\treturn [ZERO, ZERO];\n\t}\n\n\tif (n === 1 || n === -1) {\n\t\treturn [(sign === 1) ? this.abs() : new BigInteger(this._d, sign, CONSTRUCT), ZERO];\n\t}\n\n\t// 2 <= n < BigInteger_base\n\n\t// divide a single digit by a single digit\n\tif (this._d.length === 1) {\n\t\tvar q = new BigInteger([(this._d[0] / n) | 0], 1, CONSTRUCT);\n\t\tr = new BigInteger([(this._d[0] % n) | 0], 1, CONSTRUCT);\n\t\tif (sign < 0) {\n\t\t\tq = q.negate();\n\t\t}\n\t\tif (this._s < 0) {\n\t\t\tr = r.negate();\n\t\t}\n\t\treturn [q, r];\n\t}\n\n\tvar digits = this._d.slice();\n\tvar quot = new Array(digits.length);\n\tvar part = 0;\n\tvar diff = 0;\n\tvar i = 0;\n\tvar guess;\n\n\twhile (digits.length) {\n\t\tpart = part * BigInteger_base + digits[digits.length - 1];\n\t\tif (part < n) {\n\t\t\tquot[i++] = 0;\n\t\t\tdigits.pop();\n\t\t\tdiff = BigInteger_base * diff + part;\n\t\t\tcontinue;\n\t\t}\n\t\tif (part === 0) {\n\t\t\tguess = 0;\n\t\t}\n\t\telse {\n\t\t\tguess = (part / n) | 0;\n\t\t}\n\n\t\tvar check = n * guess;\n\t\tdiff = part - check;\n\t\tquot[i++] = guess;\n\t\tif (!guess) {\n\t\t\tdigits.pop();\n\t\t\tcontinue;\n\t\t}\n\n\t\tdigits.pop();\n\t\tpart = diff;\n\t}\n\n\tr = new BigInteger([diff], 1, CONSTRUCT);\n\tif (this._s < 0) {\n\t\tr = r.negate();\n\t}\n\treturn [new BigInteger(quot.reverse(), sign, CONSTRUCT), r];\n};\n\n/*\n\tFunction: isEven\n\tReturn true iff *this* is divisible by two.\n\n\tNote that <BigInteger.ZERO> is even.\n\n\tReturns:\n\n\t\ttrue if *this* is even, false otherwise.\n\n\tSee Also:\n\n\t\t<isOdd>\n*/\nBigInteger.prototype.isEven = function() {\n\tvar digits = this._d;\n\treturn this._s === 0 || digits.length === 0 || (digits[0] % 2) === 0;\n};\n\n/*\n\tFunction: isOdd\n\tReturn true iff *this* is not divisible by two.\n\n\tReturns:\n\n\t\ttrue if *this* is odd, false otherwise.\n\n\tSee Also:\n\n\t\t<isEven>\n*/\nBigInteger.prototype.isOdd = function() {\n\treturn !this.isEven();\n};\n\n/*\n\tFunction: sign\n\tGet the sign of a <BigInteger>.\n\n\tReturns:\n\n\t\t* -1 if *this* < 0\n\t\t* 0 if *this* == 0\n\t\t* +1 if *this* > 0\n\n\tSee Also:\n\n\t\t<isZero>, <isPositive>, <isNegative>, <compare>, <BigInteger.ZERO>\n*/\nBigInteger.prototype.sign = function() {\n\treturn this._s;\n};\n\n/*\n\tFunction: isPositive\n\tReturn true iff *this* > 0.\n\n\tReturns:\n\n\t\ttrue if *this*.compare(<BigInteger.ZERO>) == 1.\n\n\tSee Also:\n\n\t\t<sign>, <isZero>, <isNegative>, <isUnit>, <compare>, <BigInteger.ZERO>\n*/\nBigInteger.prototype.isPositive = function() {\n\treturn this._s > 0;\n};\n\n/*\n\tFunction: isNegative\n\tReturn true iff *this* < 0.\n\n\tReturns:\n\n\t\ttrue if *this*.compare(<BigInteger.ZERO>) == -1.\n\n\tSee Also:\n\n\t\t<sign>, <isPositive>, <isZero>, <isUnit>, <compare>, <BigInteger.ZERO>\n*/\nBigInteger.prototype.isNegative = function() {\n\treturn this._s < 0;\n};\n\n/*\n\tFunction: isZero\n\tReturn true iff *this* == 0.\n\n\tReturns:\n\n\t\ttrue if *this*.compare(<BigInteger.ZERO>) == 0.\n\n\tSee Also:\n\n\t\t<sign>, <isPositive>, <isNegative>, <isUnit>, <BigInteger.ZERO>\n*/\nBigInteger.prototype.isZero = function() {\n\treturn this._s === 0;\n};\n\n/*\n\tFunction: exp10\n\tMultiply a <BigInteger> by a power of 10.\n\n\tThis is equivalent to, but faster than\n\n\t> if (n >= 0) {\n\t>     return this.multiply(BigInteger(\"1e\" + n));\n\t> }\n\t> else { // n <= 0\n\t>     return this.quotient(BigInteger(\"1e\" + -n));\n\t> }\n\n\tParameters:\n\n\t\tn - The power of 10 to multiply *this* by. *n* is converted to a\n\t\tjavascipt number and must be no greater than <BigInteger.MAX_EXP>\n\t\t(0x7FFFFFFF), or an exception will be thrown.\n\n\tReturns:\n\n\t\t*this* * (10 ** *n*), truncated to an integer if necessary.\n\n\tSee Also:\n\n\t\t<pow>, <multiply>\n*/\nBigInteger.prototype.exp10 = function(n) {\n\tn = +n;\n\tif (n === 0) {\n\t\treturn this;\n\t}\n\tif (Math.abs(n) > Number(MAX_EXP)) {\n\t\tthrow new Error(\"exponent too large in BigInteger.exp10\");\n\t}\n\tif (n > 0) {\n\t\tvar k = new BigInteger(this._d.slice(), this._s, CONSTRUCT);\n\n\t\tfor (; n >= BigInteger_base_log10; n -= BigInteger_base_log10) {\n\t\t\tk._d.unshift(0);\n\t\t}\n\t\tif (n == 0)\n\t\t\treturn k;\n\t\tk._s = 1;\n\t\tk = k.multiplySingleDigit(Math.pow(10, n));\n\t\treturn (this._s < 0 ? k.negate() : k);\n\t} else if (-n >= this._d.length*BigInteger_base_log10) {\n\t\treturn ZERO;\n\t} else {\n\t\tvar k = new BigInteger(this._d.slice(), this._s, CONSTRUCT);\n\n\t\tfor (n = -n; n >= BigInteger_base_log10; n -= BigInteger_base_log10) {\n\t\t\tk._d.shift();\n\t\t}\n\t\treturn (n == 0) ? k : k.divRemSmall(Math.pow(10, n))[0];\n\t}\n};\n\n/*\n\tFunction: pow\n\tRaise a <BigInteger> to a power.\n\n\tIn this implementation, 0**0 is 1.\n\n\tParameters:\n\n\t\tn - The exponent to raise *this* by. *n* must be no greater than\n\t\t<BigInteger.MAX_EXP> (0x7FFFFFFF), or an exception will be thrown.\n\n\tReturns:\n\n\t\t*this* raised to the *nth* power.\n\n\tSee Also:\n\n\t\t<modPow>\n*/\nBigInteger.prototype.pow = function(n) {\n\tif (this.isUnit()) {\n\t\tif (this._s > 0) {\n\t\t\treturn this;\n\t\t}\n\t\telse {\n\t\t\treturn BigInteger(n).isOdd() ? this : this.negate();\n\t\t}\n\t}\n\n\tn = BigInteger(n);\n\tif (n._s === 0) {\n\t\treturn ONE;\n\t}\n\telse if (n._s < 0) {\n\t\tif (this._s === 0) {\n\t\t\tthrow new Error(\"Divide by zero\");\n\t\t}\n\t\telse {\n\t\t\treturn ZERO;\n\t\t}\n\t}\n\tif (this._s === 0) {\n\t\treturn ZERO;\n\t}\n\tif (n.isUnit()) {\n\t\treturn this;\n\t}\n\n\tif (n.compareAbs(MAX_EXP) > 0) {\n\t\tthrow new Error(\"exponent too large in BigInteger.pow\");\n\t}\n\tvar x = this;\n\tvar aux = ONE;\n\tvar two = BigInteger.small[2];\n\n\twhile (n.isPositive()) {\n\t\tif (n.isOdd()) {\n\t\t\taux = aux.multiply(x);\n\t\t\tif (n.isUnit()) {\n\t\t\t\treturn aux;\n\t\t\t}\n\t\t}\n\t\tx = x.square();\n\t\tn = n.quotient(two);\n\t}\n\n\treturn aux;\n};\n\n/*\n\tFunction: modPow\n\tRaise a <BigInteger> to a power (mod m).\n\n\tBecause it is reduced by a modulus, <modPow> is not limited by\n\t<BigInteger.MAX_EXP> like <pow>.\n\n\tParameters:\n\n\t\texponent - The exponent to raise *this* by. Must be positive.\n\t\tmodulus - The modulus.\n\n\tReturns:\n\n\t\t*this* ^ *exponent* (mod *modulus*).\n\n\tSee Also:\n\n\t\t<pow>, <mod>\n*/\nBigInteger.prototype.modPow = function(exponent, modulus) {\n\tvar result = ONE;\n\tvar base = this;\n\n\twhile (exponent.isPositive()) {\n\t\tif (exponent.isOdd()) {\n\t\t\tresult = result.multiply(base).remainder(modulus);\n\t\t}\n\n\t\texponent = exponent.quotient(BigInteger.small[2]);\n\t\tif (exponent.isPositive()) {\n\t\t\tbase = base.square().remainder(modulus);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/*\n\tFunction: log\n\tGet the natural logarithm of a <BigInteger> as a native JavaScript number.\n\n\tThis is equivalent to\n\n\t> Math.log(this.toJSValue())\n\n\tbut handles values outside of the native number range.\n\n\tReturns:\n\n\t\tlog( *this* )\n\n\tSee Also:\n\n\t\t<toJSValue>\n*/\nBigInteger.prototype.log = function() {\n\tswitch (this._s) {\n\tcase 0:\t return -Infinity;\n\tcase -1: return NaN;\n\tdefault: // Fall through.\n\t}\n\n\tvar l = this._d.length;\n\n\tif (l*BigInteger_base_log10 < 30) {\n\t\treturn Math.log(this.valueOf());\n\t}\n\n\tvar N = Math.ceil(30/BigInteger_base_log10);\n\tvar firstNdigits = this._d.slice(l - N);\n\treturn Math.log((new BigInteger(firstNdigits, 1, CONSTRUCT)).valueOf()) + (l - N) * Math.log(BigInteger_base);\n};\n\n/*\n\tFunction: valueOf\n\tConvert a <BigInteger> to a native JavaScript integer.\n\n\tThis is called automatically by JavaScipt to convert a <BigInteger> to a\n\tnative value.\n\n\tReturns:\n\n\t\t> parseInt(this.toString(), 10)\n\n\tSee Also:\n\n\t\t<toString>, <toJSValue>\n*/\nBigInteger.prototype.valueOf = function() {\n\treturn parseInt(this.toString(), 10);\n};\n\n/*\n\tFunction: toJSValue\n\tConvert a <BigInteger> to a native JavaScript integer.\n\n\tThis is the same as valueOf, but more explicitly named.\n\n\tReturns:\n\n\t\t> parseInt(this.toString(), 10)\n\n\tSee Also:\n\n\t\t<toString>, <valueOf>\n*/\nBigInteger.prototype.toJSValue = function() {\n\treturn parseInt(this.toString(), 10);\n};\n\nvar MAX_EXP = BigInteger(0x7FFFFFFF);\n// Constant: MAX_EXP\n// The largest exponent allowed in <pow> and <exp10> (0x7FFFFFFF or 2147483647).\nBigInteger.MAX_EXP = MAX_EXP;\n\n(function() {\n\tfunction makeUnary(fn) {\n\t\treturn function(a) {\n\t\t\treturn fn.call(BigInteger(a));\n\t\t};\n\t}\n\n\tfunction makeBinary(fn) {\n\t\treturn function(a, b) {\n\t\t\treturn fn.call(BigInteger(a), BigInteger(b));\n\t\t};\n\t}\n\n\tfunction makeTrinary(fn) {\n\t\treturn function(a, b, c) {\n\t\t\treturn fn.call(BigInteger(a), BigInteger(b), BigInteger(c));\n\t\t};\n\t}\n\n\t(function() {\n\t\tvar i, fn;\n\t\tvar unary = \"toJSValue,isEven,isOdd,sign,isZero,isNegative,abs,isUnit,square,negate,isPositive,toString,next,prev,log\".split(\",\");\n\t\tvar binary = \"compare,remainder,divRem,subtract,add,quotient,divide,multiply,pow,compareAbs\".split(\",\");\n\t\tvar trinary = [\"modPow\"];\n\n\t\tfor (i = 0; i < unary.length; i++) {\n\t\t\tfn = unary[i];\n\t\t\tBigInteger[fn] = makeUnary(BigInteger.prototype[fn]);\n\t\t}\n\n\t\tfor (i = 0; i < binary.length; i++) {\n\t\t\tfn = binary[i];\n\t\t\tBigInteger[fn] = makeBinary(BigInteger.prototype[fn]);\n\t\t}\n\n\t\tfor (i = 0; i < trinary.length; i++) {\n\t\t\tfn = trinary[i];\n\t\t\tBigInteger[fn] = makeTrinary(BigInteger.prototype[fn]);\n\t\t}\n\n\t\tBigInteger.exp10 = function(x, n) {\n\t\t\treturn BigInteger(x).exp10(n);\n\t\t};\n\t})();\n})();\n\nexports.BigInteger = BigInteger;\n})(typeof exports !== 'undefined' ? exports : this);\n\n},{}],4:[function(require,module,exports){\n(function (process){\n/* parser generated by jison 0.4.16 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,10],$V2=[1,12],$V3=[1,15],$V4=[1,19],$V5=[1,20],$V6=[1,14],$V7=[1,23],$V8=[1,24],$V9=[1,34],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,16],$Vh=[1,17],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[1,39],$Vm=[1,40],$Vn=[1,41],$Vo=[1,42],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,46],$Vt=[1,47],$Vu=[1,48],$Vv=[1,49],$Vw=[5,12,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32,41],$Vx=[1,53],$Vy=[5,12,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32,34,36,40,41],$Vz=[2,58],$VA=[1,61],$VB=[1,62],$VC=[1,63],$VD=[1,65],$VE=[5,12,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32,34,36,41],$VF=[30,51,52,53,54,55,56],$VG=[5,12,16,17,18,19,20,21,22,23,24,25,26,27,28,32,41],$VH=[5,12,16,17,18,19,32,41],$VI=[5,12,16,17,18,19,20,21,22,23,32,41],$VJ=[5,12,16,17,18,19,20,21,22,23,24,25,32,41],$VK=[12,32],$VL=[5,12,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32,34,41];\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"xpath_expr\":3,\"expr\":4,\"EOF\":5,\"base_expr\":6,\"op_expr\":7,\"path_expr\":8,\"filter_expr\":9,\"hashtag_expr\":10,\"LPAREN\":11,\"RPAREN\":12,\"func_call\":13,\"VAR\":14,\"literal\":15,\"OR\":16,\"AND\":17,\"EQ\":18,\"NEQ\":19,\"LT\":20,\"LTE\":21,\"GT\":22,\"GTE\":23,\"PLUS\":24,\"MINUS\":25,\"MULT\":26,\"DIV\":27,\"MOD\":28,\"UNION\":29,\"QNAME\":30,\"arg_list\":31,\"COMMA\":32,\"loc_path\":33,\"SLASH\":34,\"rel_loc_path\":35,\"DBL_SLASH\":36,\"predicate\":37,\"HASH\":38,\"hashtag_path\":39,\"LBRACK\":40,\"RBRACK\":41,\"step\":42,\"step_unabbr\":43,\"DOT\":44,\"DBL_DOT\":45,\"step_body\":46,\"node_test\":47,\"axis_specifier\":48,\"DBL_COLON\":49,\"AT\":50,\"WILDCARD\":51,\"NSWILDCARD\":52,\"NODETYPE_NODE\":53,\"NODETYPE_TEXT\":54,\"NODETYPE_COMMENT\":55,\"NODETYPE_PROCINSTR\":56,\"STR\":57,\"NUM\":58,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",11:\"LPAREN\",12:\"RPAREN\",14:\"VAR\",16:\"OR\",17:\"AND\",18:\"EQ\",19:\"NEQ\",20:\"LT\",21:\"LTE\",22:\"GT\",23:\"GTE\",24:\"PLUS\",25:\"MINUS\",26:\"MULT\",27:\"DIV\",28:\"MOD\",29:\"UNION\",30:\"QNAME\",32:\"COMMA\",34:\"SLASH\",36:\"DBL_SLASH\",38:\"HASH\",40:\"LBRACK\",41:\"RBRACK\",44:\"DOT\",45:\"DBL_DOT\",49:\"DBL_COLON\",50:\"AT\",51:\"WILDCARD\",52:\"NSWILDCARD\",53:\"NODETYPE_NODE\",54:\"NODETYPE_TEXT\",55:\"NODETYPE_COMMENT\",56:\"NODETYPE_PROCINSTR\",57:\"STR\",58:\"NUM\"},\nproductions_: [0,[3,2],[4,1],[4,1],[4,1],[4,1],[4,1],[6,3],[6,1],[6,1],[6,1],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,2],[7,3],[13,4],[13,3],[31,3],[31,1],[8,1],[8,3],[8,3],[8,3],[8,3],[9,2],[9,2],[10,4],[10,2],[39,1],[39,3],[37,3],[33,1],[33,2],[33,2],[33,1],[35,1],[35,3],[35,3],[42,1],[42,1],[42,1],[43,2],[43,1],[46,1],[46,2],[48,2],[48,1],[47,1],[47,1],[47,1],[47,3],[47,3],[47,3],[47,3],[47,4],[15,1],[15,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n return $$[$0-1]; \nbreak;\ncase 2: case 3: case 4: case 5: case 6:\n  this.$ = $$[$0]; \nbreak;\ncase 7:\n $$[$0-1].parens = true; this.$ = $$[$0-1]; \nbreak;\ncase 9:\n this.$ = new yy.xpathmodels.XPathVariableReference($$[$0]); \nbreak;\ncase 11:\n this.$ = new yy.xpathmodels.XPathBoolExpr({\"type\": \"or\", \"left\": $$[$0-2], \"right\": $$[$0]}); \nbreak;\ncase 12:\n this.$ = new yy.xpathmodels.XPathBoolExpr({\"type\": \"and\", \"left\": $$[$0-2], \"right\": $$[$0]}); \nbreak;\ncase 13:\n this.$ = new yy.xpathmodels.XPathEqExpr({\"type\": \"==\", \"left\": $$[$0-2], \"right\": $$[$0]}); \nbreak;\ncase 14:\n this.$ = new yy.xpathmodels.XPathEqExpr({\"type\": \"!=\", \"left\": $$[$0-2], \"right\": $$[$0]}); \nbreak;\ncase 15:\n this.$ = new yy.xpathmodels.XPathCmpExpr({\"type\": \"<\", \"left\":$$[$0-2], \"right\": $$[$0]}); \nbreak;\ncase 16:\n this.$ = new yy.xpathmodels.XPathCmpExpr({\"type\": \"<=\", \"left\":$$[$0-2], \"right\": $$[$0]}); \nbreak;\ncase 17:\n this.$ = new yy.xpathmodels.XPathCmpExpr({\"type\": \">\", \"left\":$$[$0-2], \"right\": $$[$0]}); \nbreak;\ncase 18:\n this.$ = new yy.xpathmodels.XPathCmpExpr({\"type\": \">=\", \"left\":$$[$0-2], \"right\": $$[$0]}); \nbreak;\ncase 19:\n this.$ = new yy.xpathmodels.XPathArithExpr({\"type\": \"+\", \"left\":$$[$0-2], \"right\": $$[$0]}); \nbreak;\ncase 20:\n this.$ = new yy.xpathmodels.XPathArithExpr({\"type\": \"-\", \"left\":$$[$0-2], \"right\": $$[$0]}); \nbreak;\ncase 21:\n this.$ = new yy.xpathmodels.XPathArithExpr({\"type\": \"*\", \"left\":$$[$0-2], \"right\": $$[$0]}); \nbreak;\ncase 22:\n this.$ = new yy.xpathmodels.XPathArithExpr({\"type\": \"/\", \"left\":$$[$0-2], \"right\": $$[$0]}); \nbreak;\ncase 23:\n this.$ = new yy.xpathmodels.XPathArithExpr({\"type\": \"%\", \"left\":$$[$0-2], \"right\": $$[$0]}); \nbreak;\ncase 24:\n this.$ = new yy.xpathmodels.XPathNumNegExpr({\"type\": \"num-neg\", \"value\":$$[$0]}); \nbreak;\ncase 25:\n this.$ = new yy.xpathmodels.XPathUnionExpr({\"type\": \"union\", \"left\":$$[$0-2], \"right\": $$[$0]}); \nbreak;\ncase 26:\n this.$ = new yy.xpathmodels.XPathFuncExpr({id: $$[$0-3], args: $$[$0-1]}); \nbreak;\ncase 27:\n this.$ = new yy.xpathmodels.XPathFuncExpr({id: $$[$0-2], args: []}); \nbreak;\ncase 28:\n var args = $$[$0-2];\n                                      args.push($$[$0]);\n                                      this.$ = args; \nbreak;\ncase 29:\n this.$ = [$$[$0]]; \nbreak;\ncase 31:\n this.$ = new yy.xpathmodels.XPathPathExpr({\n                                                                    initial_context: yy.xpathmodels.XPathInitialContextEnum.EXPR,\n                                                                    filter: $$[$0-2], steps: $$[$0]}); \nbreak;\ncase 32:\n var steps = $$[$0];\n                                                      steps.splice(0, 0, new yy.xpathmodels.XPathStep({\n                                                                                axis: yy.xpathmodels.XPathAxisEnum.DESCENDANT_OR_SELF, \n                                                                                test: yy.xpathmodels.XPathTestEnum.TYPE_NODE}));\n                                                      this.$ = new yy.xpathmodels.XPathPathExpr({\n                                                                    initial_context: yy.xpathmodels.XPathInitialContextEnum.EXPR,\n                                                                    filter: $$[$0-2], steps: steps}); \nbreak;\ncase 33:\n // could eliminate filterExpr wrapper, but this makes tests pass as-is\n                                                      var filterExpr = new yy.xpathmodels.XPathFilterExpr({expr: $$[$0-2]});\n                                                      this.$ = new yy.xpathmodels.XPathPathExpr({\n                                                                    initial_context: yy.xpathmodels.XPathInitialContextEnum.EXPR,\n                                                                    filter: filterExpr, steps: $$[$0]}); \nbreak;\ncase 34:\n var steps = $$[$0];\n                                                      // could eliminate filterExpr wrapper, but this makes tests pass as-is\n                                                      var filterExpr = new yy.xpathmodels.XPathFilterExpr({expr: $$[$0-2]});\n                                                      steps.splice(0, 0, new yy.xpathmodels.XPathStep({\n                                                                                axis: yy.xpathmodels.XPathAxisEnum.DESCENDANT_OR_SELF, \n                                                                                test: yy.xpathmodels.XPathTestEnum.TYPE_NODE}));\n                                                      this.$ = new yy.xpathmodels.XPathPathExpr({\n                                                                    initial_context: yy.xpathmodels.XPathInitialContextEnum.EXPR,\n                                                                    filter: filterExpr, steps: steps}); \nbreak;\ncase 35:\n this.$ = new yy.xpathmodels.XPathFilterExpr({expr: $$[$0-1], predicates: [$$[$0]]}); \nbreak;\ncase 36:\n var filterExpr = $$[$0-1];\n                                        filterExpr.predicates.push($$[$0]);\n                                        this.$ = filterExpr; \nbreak;\ncase 37:\n this.$ = new yy.xpathmodels.HashtagExpr({initial_context: yy.xpathmodels.XPathInitialContextEnum.HASHTAG,\n                                                                      namespace: $$[$0-2],\n                                                                      steps: $$[$0]}); \nbreak;\ncase 38:\n this.$ = new yy.xpathmodels.HashtagExpr({initial_context: yy.xpathmodels.XPathInitialContextEnum.HASHTAG,\n                                                                      namespace: $$[$0],\n                                                                      steps: []}); \nbreak;\ncase 39:\nthis.$ = [$$[$0]];\nbreak;\ncase 40:\nvar path = $$[$0-2]; path.push($$[$0]); this.$ = path;\nbreak;\ncase 41:\n this.$ = $$[$0-1]; \nbreak;\ncase 42:\n this.$ = new yy.xpathmodels.XPathPathExpr({initial_context: yy.xpathmodels.XPathInitialContextEnum.RELATIVE,\n                                                                      steps: $$[$0]}); \nbreak;\ncase 43:\n this.$ = new yy.xpathmodels.XPathPathExpr({initial_context: yy.xpathmodels.XPathInitialContextEnum.ROOT,\n                                                                      steps: $$[$0]}); \nbreak;\ncase 44:\n var steps = $$[$0];\n                                              // insert descendant step into beginning\n                                              steps.splice(0, 0, new yy.xpathmodels.XPathStep({axis: yy.xpathmodels.XPathAxisEnum.DESCENDANT_OR_SELF, \n                                                                                test: yy.xpathmodels.XPathTestEnum.TYPE_NODE}));\n                                              this.$ = new yy.xpathmodels.XPathPathExpr({initial_context: yy.xpathmodels.XPathInitialContextEnum.ROOT,\n                                                                      steps: steps}); \nbreak;\ncase 45:\n this.$ = new yy.xpathmodels.XPathPathExpr({initial_context: yy.xpathmodels.XPathInitialContextEnum.ROOT,\n                                                              steps: []});\nbreak;\ncase 46:\n this.$ = [$$[$0]];\nbreak;\ncase 47:\n var path = $$[$0-2];\n                                            path.push($$[$0]);\n                                            this.$ = path; \nbreak;\ncase 48:\n var path = $$[$0-2];\n                                            path.push(new yy.xpathmodels.XPathStep({axis: yy.xpathmodels.XPathAxisEnum.DESCENDANT_OR_SELF, \n                                                                     test: yy.xpathmodels.XPathTestEnum.TYPE_NODE}));\n                                            path.push($$[$0]);\n                                            this.$ = path; \nbreak;\ncase 49: case 53:\n this.$ = $$[$0]; \nbreak;\ncase 50:\n this.$ = new yy.xpathmodels.XPathStep({axis: yy.xpathmodels.XPathAxisEnum.SELF, \n                                                          test: yy.xpathmodels.XPathTestEnum.TYPE_NODE}); \nbreak;\ncase 51:\n this.$ = new yy.xpathmodels.XPathStep({axis: yy.xpathmodels.XPathAxisEnum.PARENT, \n                                                          test: yy.xpathmodels.XPathTestEnum.TYPE_NODE}); \nbreak;\ncase 52:\n var step = $$[$0-1];\n                                            step.predicates.push($$[$0]);\n                                            this.$ = step; \nbreak;\ncase 54:\n var nodeTest = $$[$0]; // temporary dict with appropriate args\n                                          nodeTest.axis = yy.xpathmodels.XPathAxisEnum.CHILD;\n                                          this.$ = new yy.xpathmodels.XPathStep(nodeTest); \nbreak;\ncase 55:\n var nodeTest = $$[$0];  // temporary dict with appropriate args\n                                          nodeTest.axis = $$[$0-1]; // add axis\n                                          this.$ = new yy.xpathmodels.XPathStep(nodeTest); \nbreak;\ncase 56:\n this.$ = yy.xpathmodels.validateAxisName($$[$0-1]); \nbreak;\ncase 57:\n this.$ = yy.xpathmodels.XPathAxisEnum.ATTRIBUTE; \nbreak;\ncase 58:\n this.$ = {\"test\": yy.xpathmodels.XPathTestEnum.NAME, \"name\": $$[$0]}; \nbreak;\ncase 59:\n this.$ = {\"test\": yy.xpathmodels.XPathTestEnum.NAME_WILDCARD}; \nbreak;\ncase 60:\n this.$ = {\"test\": yy.xpathmodels.XPathTestEnum.NAMESPACE_WILDCARD, \"namespace\": $$[$0]}; \nbreak;\ncase 61:\n this.$ = {\"test\": yy.xpathmodels.XPathTestEnum.TYPE_NODE}; \nbreak;\ncase 62:\n this.$ = {\"test\": yy.xpathmodels.XPathTestEnum.TYPE_TEXT}; \nbreak;\ncase 63:\n this.$ = {\"test\": yy.xpathmodels.XPathTestEnum.TYPE_COMMENT}; \nbreak;\ncase 64:\n this.$ = {\"test\": yy.xpathmodels.XPathTestEnum.TYPE_PROCESSING_INSTRUCTION, \"literal\": null}; \nbreak;\ncase 65:\n this.$ = {\"test\": yy.xpathmodels.XPathTestEnum.TYPE_PROCESSING_INSTRUCTION, \"literal\": $$[$0-1]}; \nbreak;\ncase 66:\n this.$ = new yy.xpathmodels.XPathStringLiteral($$[$0]); \nbreak;\ncase 67:\n this.$ = new yy.xpathmodels.XPathNumericLiteral($$[$0]); \nbreak;\n}\n},\ntable: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{1:[3]},{5:[1,35],16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv},o($Vw,[2,2],{37:52,34:[1,50],36:[1,51],40:$Vx}),o($Vw,[2,3]),o($Vw,[2,4]),o($Vw,[2,5],{37:56,34:[1,54],36:[1,55],40:$Vx}),o($Vw,[2,6]),{4:57,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},o($Vy,[2,8]),o($Vy,[2,9]),o($Vy,[2,10]),{4:58,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},o($Vw,[2,30]),{30:[1,59]},o($Vy,$Vz,{11:[1,60],49:$VA}),o($Vy,[2,66]),o($Vy,[2,67]),o($Vw,[2,42],{34:$VB,36:$VC}),o($Vw,[2,45],{42:21,43:22,46:25,47:26,48:27,35:64,30:$VD,44:$V7,45:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf}),{30:$VD,35:66,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf},o($VE,[2,46]),o($VE,[2,49],{37:67,40:$Vx}),o($VE,[2,50]),o($VE,[2,51]),o($Vy,[2,53]),o($Vy,[2,54]),{30:[1,69],47:68,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf},o($Vy,[2,59]),o($Vy,[2,60]),{11:[1,70]},{11:[1,71]},{11:[1,72]},{11:[1,73]},o($VF,[2,57]),{1:[2,1]},{4:74,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{4:75,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{4:76,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{4:77,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{4:78,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{4:79,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{4:80,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{4:81,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{4:82,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{4:83,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{4:84,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{4:85,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{4:86,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{4:87,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{30:$VD,35:88,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf},{30:$VD,35:89,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf},o($Vy,[2,35]),{4:90,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{30:$VD,35:91,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf},{30:$VD,35:92,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf},o($Vy,[2,36]),{12:[1,93],16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv},o($VG,[2,24],{29:$Vv}),o($Vw,[2,38],{34:[1,94]}),{4:97,6:3,7:4,8:5,9:6,10:7,11:$V0,12:[1,96],13:9,14:$V1,15:11,25:$V2,30:$V3,31:95,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},o($VF,[2,56]),{30:$VD,42:98,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf},{30:$VD,42:99,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf},o($Vw,[2,43],{34:$VB,36:$VC}),o($Vy,$Vz,{49:$VA}),o($Vw,[2,44],{34:$VB,36:$VC}),o($Vy,[2,52]),o($Vy,[2,55]),o($Vy,$Vz),{12:[1,100]},{12:[1,101]},{12:[1,102]},{12:[1,103],57:[1,104]},o([5,12,32,41],[2,11],{16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv}),o([5,12,16,32,41],[2,12],{17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv}),o($VH,[2,13],{20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv}),o($VH,[2,14],{20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv}),o($VI,[2,15],{24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv}),o($VI,[2,16],{24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv}),o($VI,[2,17],{24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv}),o($VI,[2,18],{24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv}),o($VJ,[2,19],{26:$Vs,27:$Vt,28:$Vu,29:$Vv}),o($VJ,[2,20],{26:$Vs,27:$Vt,28:$Vu,29:$Vv}),o($VG,[2,21],{29:$Vv}),o($VG,[2,22],{29:$Vv}),o($VG,[2,23],{29:$Vv}),o($Vw,[2,25]),o($Vw,[2,33],{34:$VB,36:$VC}),o($Vw,[2,34],{34:$VB,36:$VC}),{16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,41:[1,105]},o($Vw,[2,31],{34:$VB,36:$VC}),o($Vw,[2,32],{34:$VB,36:$VC}),o($Vy,[2,7]),{30:[1,107],39:106},{12:[1,108],32:[1,109]},o($Vy,[2,27]),o($VK,[2,29],{16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv}),o($VE,[2,47]),o($VE,[2,48]),o($Vy,[2,61]),o($Vy,[2,62]),o($Vy,[2,63]),o($Vy,[2,64]),{12:[1,110]},o($Vy,[2,41]),o($Vw,[2,37],{34:[1,111]}),o($VL,[2,39]),o($Vy,[2,26]),{4:112,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:11,25:$V2,30:$V3,33:13,34:$V4,35:18,36:$V5,38:$V6,42:21,43:22,44:$V7,45:$V8,46:25,47:26,48:27,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},o($Vy,[2,65]),{30:[1,113]},o($VK,[2,28],{16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv}),o($VL,[2,40])],\ndefaultActions: {35:[2,1]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        function _parseError (msg, hash) {\n            this.message = msg;\n            this.hash = hash;\n        }\n        _parseError.prototype = new Error();\n\n        throw new _parseError(str, hash);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* ignore whitespace */ \nbreak;\ncase 1: yy.xpathmodels.debuglog(\"NODETYPE\", yy_.yytext); return \"NODETYPE_NODE\"; \nbreak;\ncase 2: yy.xpathmodels.debuglog(\"NODETYPE\", yy_.yytext); return \"NODETYPE_TEXT\"; \nbreak;\ncase 3: yy.xpathmodels.debuglog(\"NODETYPE\", yy_.yytext); return \"NODETYPE_COMMENT\"; \nbreak;\ncase 4: yy.xpathmodels.debuglog(\"NODETYPE\", yy_.yytext); return \"NODETYPE_PROCINSTR\"; \nbreak;\ncase 5: this.begin(\"OP_CONTEXT\"); yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-1); yy.xpathmodels.debuglog(\"VAR\", yy_.yytext); return \"VAR\"; \nbreak;\ncase 6: this.begin(\"OP_CONTEXT\"); \n                                     yy_.yytext = yy_.yytext.substr(0, yy_.yyleng-2);\n                                     yy.xpathmodels.debuglog(\"NSWILDCARD\", yy_.yytext); return \"NSWILDCARD\"; \nbreak;\ncase 7: this.begin(\"OP_CONTEXT\"); yy.xpathmodels.debuglog(\"QNAME\", yy_.yytext); return \"QNAME\"; \nbreak;\ncase 8: this.begin(\"OP_CONTEXT\"); yy.xpathmodels.debuglog(\"WILDCARD\", yy_.yytext); return \"WILDCARD\"; \nbreak;\ncase 9: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"MULT\", yy_.yytext); return \"MULT\"; \nbreak;\ncase 10: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"AND\", yy_.yytext); return \"AND\"; \nbreak;\ncase 11: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"OR\", yy_.yytext); return \"OR\"; \nbreak;\ncase 12: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"DIV\", yy_.yytext); return \"DIV\"; \nbreak;\ncase 13: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"MOD\", yy_.yytext); return \"MOD\"; \nbreak;\ncase 14: this.begin(\"OP_CONTEXT\"); yy.xpathmodels.debuglog(\"NUM\", yy_.yytext); return \"NUM\"; \nbreak;\ncase 15: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"EQ\", yy_.yytext); return \"EQ\"; \nbreak;\ncase 16: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"NEQ\", yy_.yytext); return \"NEQ\"; \nbreak;\ncase 17: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"LTE\", yy_.yytext); return \"LTE\"; \nbreak;\ncase 18: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"LT\", yy_.yytext); return \"LT\"; \nbreak;\ncase 19: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"GTE\", yy_.yytext); return \"GTE\"; \nbreak;\ncase 20: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"GT\", yy_.yytext); return \"GT\"; \nbreak;\ncase 21: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"PLUS\", yy_.yytext); return \"PLUS\"; \nbreak;\ncase 22: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"MINUS\", yy_.yytext); return \"MINUS\"; \nbreak;\ncase 23: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"UNION\", yy_.yytext); return \"UNION\"; \nbreak;\ncase 24: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"DBL\", yy_.yytext); return \"DBL_SLASH\"; \nbreak;\ncase 25: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"SLASH\", yy_.yytext); return \"SLASH\"; \nbreak;\ncase 26: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"LBRACK\", yy_.yytext); return \"LBRACK\"; \nbreak;\ncase 27: this.begin(\"OP_CONTEXT\");  yy.xpathmodels.debuglog(\"RBRACK\", yy_.yytext); return \"RBRACK\"; \nbreak;\ncase 28: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"LPAREN\", yy_.yytext); return \"LPAREN\"; \nbreak;\ncase 29: this.begin(\"OP_CONTEXT\");  yy.xpathmodels.debuglog(\"RPAREN\", yy_.yytext); return \"RPAREN\"; \nbreak;\ncase 30: this.begin(\"OP_CONTEXT\");  yy.xpathmodels.debuglog(\"DBL\", yy_.yytext); return \"DBL_DOT\"; \nbreak;\ncase 31: this.begin(\"OP_CONTEXT\");  yy.xpathmodels.debuglog(\"DOT\", yy_.yytext); return \"DOT\"; \nbreak;\ncase 32: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"AT\", yy_.yytext); return \"AT\"; \nbreak;\ncase 33: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"DBL\", yy_.yytext); return \"DBL_COLON\"; \nbreak;\ncase 34: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"COMMA\", yy_.yytext); return \"COMMA\"; \nbreak;\ncase 35: this.begin(\"VAL_CONTEXT\"); yy.xpathmodels.debuglog(\"HASH\", yy_.yytext); return \"HASH\"; \nbreak;\ncase 36: this.begin(\"OP_CONTEXT\"); yy.xpathmodels.debuglog(\"STR\", yy_.yytext); return \"STR\"; \nbreak;\ncase 37:return 5;\nbreak;\n}\n},\nrules: [/^(?:((\\s+)))/,/^(?:node(?=(((\\s+))?\\()))/,/^(?:text(?=(((\\s+))?\\()))/,/^(?:comment(?=(((\\s+))?\\()))/,/^(?:processing-instruction(?=(((\\s+))?\\()))/,/^(?:\\$([A-Za-z_][A-Za-z0-9._-]*(:[A-Za-z_][A-Za-z0-9._-]*)?))/,/^(?:([A-Za-z_][A-Za-z0-9._-]*):\\*)/,/^(?:([A-Za-z_][A-Za-z0-9._-]*(:[A-Za-z_][A-Za-z0-9._-]*)?))/,/^(?:\\*)/,/^(?:\\*)/,/^(?:(and))/,/^(?:(or))/,/^(?:(div))/,/^(?:(mod))/,/^(?:(([0-9])+(\\.([0-9])*)?|(\\.([0-9])+)))/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:\\+)/,/^(?:-)/,/^(?:\\|)/,/^(?:\\/\\/)/,/^(?:\\/)/,/^(?:\\[)/,/^(?:\\])/,/^(?:\\()/,/^(?:\\))/,/^(?:\\.\\.)/,/^(?:\\.)/,/^(?:@)/,/^(?:::)/,/^(?:,)/,/^(?:#)/,/^(?:(\"[^\"\\\"\"]*\"|'[^'\\'']*'))/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],\"inclusive\":true},\"OP_CONTEXT\":{\"rules\":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],\"inclusive\":true},\"VAL_CONTEXT\":{\"rules\":[0,1,2,3,4,5,6,7,8,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = parser;\nexports.Parser = parser.Parser;\nexports.parse = function () { return parser.parse.apply(parser, arguments); };\nexports.main = function commonjsMain(args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}\n}).call(this,require('_process'))\n},{\"_process\":7,\"fs\":5,\"path\":6}],5:[function(require,module,exports){\n\n},{}],6:[function(require,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n}).call(this,require('_process'))\n},{\"_process\":7}],7:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],8:[function(require,module,exports){\nvar parser = require('./parser.js').parser,\n    makeXPathModels = require('./models.js').makeXPathModels;\n\nparser.makeXPathModels = makeXPathModels;\n\nparser.setXPathModels = function(models) {\n    parser.yy.xpathmodels = models;\n};\n\nparser.setXPathModels(makeXPathModels());\n\nmodule.exports = parser;\n\n},{\"./models.js\":2,\"./parser.js\":4}]},{},[8])(8)\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/js-xpath/xpath.js\n// module id = 1\n// module chunks = 0","const { splitAttributes } = require('separated-attributes');\nconst xPathParser = require('js-xpath');\n\nfunction attributesToXPath(attributes) {\n  let ret = '';\n  const processedAttributes = splitAttributes(attributes);\n\n  Object.keys(processedAttributes).forEach((i) => {\n    const attribute = processedAttributes[i];\n\n    if (Array.isArray(attribute)) {\n      // TODO: this still seems wrong as it isn't clear if we're anding or oring.\n      ret += attribute\n        .map(\n          a => `[contains(concat(' ', normalize-space(@${i}), ' '), ' ${a} ')]`\n        )\n        .join('');\n    } else {\n      ret += `[@${i}='${attribute}']`;\n    }\n  });\n\n  return ret;\n}\n\nfunction indexToXPath(index, forceOutput = false) {\n  if ((!index || index === 1) && !forceOutput) return '';\n  return `[${index}]`;\n}\n\nclass XPathNode {\n  constructor(obj) {\n    this.data = {};\n    this.data.index = obj.index;\n    this.data.attributes = Object.assign({}, obj.attributes);\n    this.data.tag = obj.tag;\n    this.data.elements = obj.elements; // TODO: copy?\n    this.meta = Object.assign({}, obj.meta);\n  }\n\n  get index() {\n    return this.data.index;\n  }\n\n  get attributes() {\n    return this.data.attributes;\n  }\n\n  get tag() {\n    return this.data.tag;\n  }\n\n  get elements() {\n    return this.data.elements;\n  }\n\n  static fromString(row) {\n    // TODO: maybe the way to do this elegantly is to push it back on the generator code. Instead of allowing fromString, only allow fromDom.\n    // I think for now, we don't need to worry about it. This method isn't exposed yet and thus doesn't affect any users of the package.\n\n    const trialParsed = xPathParser.parse(row).steps;\n    if (trialParsed.length !== 1) {\n      throw new Error(\n        `XPathNode initialized with something that appears to be ${trialParsed.length} XPath nodes. Expected 1.`\n      );\n    }\n    const parsed = trialParsed[0];\n\n    function extractAttributesFromSelector(field) {\n      return field.predicates.reduce(\n        (accumulator, predicate) => {\n          let valueMap;\n          try {\n            if (predicate.steps) {\n              valueMap = predicate.steps\n                .filter(i => i.axis === 'attribute')\n                .reduce(\n                  (acc, i) => {\n                    return Object.assign({}, acc, { [i.name]: true });\n                  },\n                  {}\n                );\n            } else if (predicate.type && predicate.type === '==') {\n              valueMap = {\n                [predicate.left.steps[0].name]: predicate.right.value,\n              };\n            } else if (predicate.id && predicate.id === 'contains') {\n              // TODO: these are weird special cases to handle the only forms we generate.\n              // a more general solution is welcome.\n\n              const key = predicate.args[0].args[1].args[0].steps[0].name;\n              const value = predicate.args[1].value.trim();\n              valueMap = { [key]: [value] };\n            }\n\n            // TODO: there's an else case here we should probably error in.\n          } catch (e) {\n            throw new Error(\n              \"XPathNode::fromString is only partially implemented. We can't parse this XPath. Submit a pull request!\"\n            );\n          }\n\n          return Object.assign({}, accumulator, valueMap);\n        },\n        {}\n      );\n    }\n\n    function extractIndexFromSelector(selector) {\n      const indexSelector = /\\[([0-9]*)\\]/.exec(selector);\n      if (!indexSelector) return undefined;\n      return parseInt(indexSelector[1], 10);\n    }\n\n    return new XPathNode({\n      index: extractIndexFromSelector(row),\n      attributes: extractAttributesFromSelector(parsed),\n      tag: /^[a-zA-Z]*/.exec(row)[0],\n    });\n  }\n\n  toString() {\n    const indexString = indexToXPath(\n      this.data.index,\n      this.meta.hasFollowingSiblings\n    );\n\n    const attributesString = this.data.attributes\n      ? attributesToXPath(this.data.attributes)\n      : '';\n\n    // TODO: how to know if we should drop the attributes string?\n    return this.tag +\n      indexString +\n      (this.meta.hasFollowingSiblings !== false ? attributesString : '');\n  }\n}\n\nmodule.exports = XPathNode;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/types/XPathNode.js\n// module id = 2\n// module chunks = 0","const cssToXPath = require('css-xpath');\n\n// This is the weirdest line in the entire product, but this supports node environment and\n// web browser environment without conditionally including the xpath module, which is important\n// because otherwise the variable reference is strange.\nif (typeof XPathResult === 'undefined') {\n  const xPath = require('xpath');\n  evaluate = xPath.evaluate;\n  XPathResult = xPath.XPathResult;\n}\n\n/**\n * Evaluates an XPath expression.\n *\n * @param {Document} doc\n * @param {String} xpath The XPath expression.\n * @param {Node} contextNode The context node.\n * @param {int} resultType\n *\n * @returns {*} The result of the XPath expression, depending on resultType:\n * - XPathResult.NUMBER_TYPE: returns a Number\n * - XPathResult.STRING_TYPE: returns a String\n * - XPathResult.BOOLEAN_TYPE: returns a boolean\n * - XPathResult.UNORDERED_NODE_ITERATOR_TYPE or XPathResult.ORDERED_NODE_SNAPSHOT_TYPE: returns an array of nodes\n * - XPathResult.ORDERED_NODE_SNAPSHOT_TYPE or XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE: returns an array of nodes\n * - XPathResult.ANY_UNORDERED_NODE_TYPE or XPathResult.FIRST_ORDERED_NODE_TYPE: returns a single node\n */\nfunction evaluateXPath(\n  doc,\n  xpath,\n  contextNode = doc,\n  resultType = XPathResult.ANY_TYPE\n) {\n  const evaluateMethod = doc.evaluate || evaluate;\n  const result = evaluateMethod(xpath, contextNode, null, resultType, null);\n\n  const nodes = [];\n  switch (result.resultType) {\n    case XPathResult.NUMBER_TYPE:\n      return result.numberValue;\n\n    case XPathResult.STRING_TYPE:\n      return result.stringValue;\n\n    case XPathResult.BOOLEAN_TYPE:\n      return result.booleanValue;\n\n    case XPathResult.UNORDERED_NODE_ITERATOR_TYPE:\n    case XPathResult.ORDERED_NODE_ITERATOR_TYPE:\n      for (let item = result.iterateNext(); item; item = result.iterateNext()) {\n        nodes.push(item);\n      }\n      return nodes;\n\n    case XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE:\n    case XPathResult.ORDERED_NODE_SNAPSHOT_TYPE:\n      for (let i = 0; i < result.snapshotLength; ++i) {\n        nodes.push(result.snapshotItem(i));\n      }\n      return nodes;\n\n    case XPathResult.ANY_UNORDERED_NODE_TYPE:\n    case XPathResult.FIRST_ORDERED_NODE_TYPE:\n      return result.singleNodeValue;\n  }\n\n  throw new Error('Unmatched XPathResult resultType in evaluateXPath.');\n}\n\n/**\n * Get a list of elements matching a given XPath.\n *\n * @param {Document} doc\n * @param {String} xpath The XPath expression.\n * @returns {Array} An array of matching elements, in their natural XPath type: DOM nodes, strings, etc.\n */\nfunction getElementsByXPath(doc, xPath) {\n  try {\n    return evaluateXPath(doc, xPath);\n  } catch (ex) {\n    return [];\n  }\n}\n\n\n/**\n * Get a list of elements matching a given CSS rule. Note the parameters are inverted\n * to retain the mapping from the original library.\n *\n * @param {object} rule The `CSSStyleRule` object, containing at least a `selectorText`\n *   https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule/selectorText\n * @param {Document} doc\n * @returns {Array} An array of matching elements.\n */\nfunction getRuleMatchingElements(rule, doc) {\n  const css = rule.selectorText;\n  const xPath = cssToXPath(css);\n  return getElementsByXPath(doc, xPath);\n}\n\n/**\n * Get a list of elements matching a given CSS rule. Note the parameters are inverted\n * to retain the mapping from the original library.\n *\n * @param {Document} doc\n * @param {String} css The CSS rule, as a string.\n * @returns {Array} An array of matching elements.\n */\nfunction getElementsBySelector(doc, css) {\n  const xPath = cssToXPath(css);\n  return getElementsByXPath(doc, xPath);\n}\n\nmodule.exports = {\n  evaluateXPath,\n  getElementsByXPath,\n  getElementsBySelector,\n  getRuleMatchingElements,\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/evaluators.js\n// module id = 3\n// module chunks = 0","const XPathNodes = require('./types/XPathNodes');\nconst XPathNode = require('./types/XPathNode');\n\nif (typeof Node === 'undefined') {\n  // Non-browser polyfill for https://developer.mozilla.org/en/docs/Web/API/Node/nodeType\n  Node = { DOCUMENT_TYPE_NOTE: 10 };\n}\n\n/**\n * Produces an object containing the attributes of a DOM element.\n *\n * @param {DOMElement} element\n * @returns {object} An object of attribute names to values. e.g., in\n * `<img src='url' alt='text' />`, we return an object `{ src: 'url', alt: 'text' }`\n */\nfunction getElementAttributes(element) {\n  const attributes = element.attributes;\n  const ret = {};\n  for (let i = 0; i < attributes.length; i++) {\n    const attribute = attributes.item(i);\n    ret[attribute.nodeName] = attribute.nodeValue;\n  }\n\n  return ret;\n}\n\n/**\n * Parses a tree starting from `element` to produce an XPath expression.\n *\n * TODO: it seems awkward that this has `asString` instead of being cast in the\n * getElementXPath method; but this is the original design. A solution to this\n * is to always return the object with a nice toString method attached. This is\n * a breaking change and needs a promote major though.\n *\n * @param {DOMElement} element the element to identify with the expression\n * @param {boolean} asString return a string XPath query or an object representing the query?\n * @returns {*} Either a string query or an object representing the string query.\n */\nfunction getElementTreeXPath(startingElement, asString = true) {\n  const nodes = [];\n  // Use nodeName (instead of localName) so namespace prefix is included (if any).\n  for (\n    let element = startingElement;\n    element && element.nodeType === 1;\n    element = element.parentNode\n  ) {\n    let index = 0;\n    for (\n      let sibling = element.previousSibling;\n      sibling;\n      sibling = sibling.previousSibling\n    ) {\n      // Ignore document type declaration.\n      if (sibling.nodeType === Node.DOCUMENT_TYPE_NODE) continue;\n      if (sibling.nodeName === element.nodeName) index += 1;\n    }\n\n    const tagName = (element.prefix ? `${element.prefix}:` : '') +\n      element.localName;\n\n    const attributes = getElementAttributes(element);\n    let hasFollowingSiblingsWithSameTag = false;\n    for (\n      let sibling = element.nextSibling;\n      sibling && !hasFollowingSiblingsWithSameTag;\n      sibling = sibling.nextSibling\n    ) {\n      if (sibling.nodeName === element.nodeName) hasFollowingSiblingsWithSameTag = true;\n    }\n\n    const node = new XPathNode({\n      tag: tagName,\n      index: index + 1,\n      attributes,\n      elements: [element], // the list of things that made up this node\n      meta: {\n        hasFollowingSiblings: hasFollowingSiblingsWithSameTag,\n      },\n    });\n\n    nodes.push(node);\n  }\n\n  const paths = new XPathNodes(nodes.reverse());\n  if (asString) return paths.toString();\n  return paths;\n}\n\n\n/**\n * Gets an XPath expression for an element which describes its hierarchical location.\n */\nfunction getElementXPath(element, skipId = false) {\n  if (element && element.id && !skipId) return `//*[@id=\"${element.id}\"]`;\n  return getElementTreeXPath(element);\n}\n\nmodule.exports = {\n  getElementXPath,\n  getElementTreeXPath,\n  getElementAttributes,\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/generators.js\n// module id = 4\n// module chunks = 0","/**\n * This file's primary purpose is to turn a bunch of hard-to-read regular expressions\n * in to self-documenting functions with appropriate named capture groups and minimal\n * meaning parsing.\n */\n\n/**\n * `element(string)` matches the pieces of an initial CSS selector and returns a parsed set of fields.\n * e.g., #id, .class or body\n *\n * It also parses out the piped namespace piece: https://www.w3.org/TR/css3-selectors/#univnmsp\n */\nfunction element(string) {\n  const CSS_ELEMENT_PATTERN = /^([#.]?)([a-z0-9\\\\*_-]*)((\\|)([a-z0-9\\\\*_-]*))?/i;\n  const matches = CSS_ELEMENT_PATTERN.exec(string);\n  if (!matches) return matches;\n\n  const retVal = {\n    fullGroup: matches[0],\n    fullNamespaceGroup: matches[3],\n    namespace: matches[5], // TODO: this is backwards, handle namespace standardization here.\n  };\n\n  // either \"#\" or \".\" to indicate id or class selector\n  if (matches[1] === '#' || matches[1] === '.') {\n    retVal.specialSelectorType = matches[1];\n    retVal.specialSelectorValue = matches[2];\n  } else if (matches[1] === '') {\n    retVal.elementName = matches[2];\n  }\n\n  return retVal;\n}\n\n/**\n * `attributePresence(string)` matches the pieces of a CSS selector that represent a attribute presence requirement.\n *  e.g., [disabled], [x-anything-here]\n */\nfunction attributePresence(string) {\n  const CSS_ATTRIBUTE_PRESENCE_PATTERN = /^\\[([^\\]]*)\\]/i;\n  const matches = CSS_ATTRIBUTE_PRESENCE_PATTERN.exec(string);\n  if (!matches) return matches;\n\n  return {\n    fullGroup: matches[0],\n    attributeName: matches[1],\n  };\n}\n\n/**\n * `attributeValue(string)` matches the pieces of a CSS selector that represent a attribute selector.\n *  e.g., [disabled='disabled'], [class~='alphaghettis'], [type != 'number']\n *\n * TODO: this pattern fails on single or unquoted things. Bad!\n */\nfunction attributeValue(string) {\n  const CSS_ATTRIBUTE_VALUE_PATTERN = /^\\[\\s*([^~=\\s]+)\\s*(~?=)\\s*\"([^\"]+)\"\\s*\\]/i;\n  const matches = CSS_ATTRIBUTE_VALUE_PATTERN.exec(string);\n  if (!matches) return matches;\n\n  return {\n    fullGroup: matches[0],\n    field: matches[1],\n    value: matches[3],\n    isContains: matches[2] === '~=',\n  };\n}\n\n/**\n * `pseudo(string)` matches the pieces of a CSS selector that represent a pseudo selector.\n *  e.g., :first-child, :visited\n */\n// TODO: verify this works with parentheses, e.g., nth-child(2).\nfunction pseudo(string) {\n  const CSS_PSEUDO_PATTERN = /^:([a-z_-])+/i;\n  const matches = CSS_PSEUDO_PATTERN.exec(string);\n  if (!matches) return matches;\n\n  return {\n    fullGroup: matches[0],\n    selector: matches[1],\n  };\n}\n\n/**\n * `combinator(string)` matches the pieces of a CSS selector that represent a combinator.\n *  e.g., + or >\n */\nfunction combinator(string) {\n  const CSS_COMBINATOR_PATTERN = /^(\\s*[>+\\s])?/i;\n  const matches = CSS_COMBINATOR_PATTERN.exec(string);\n  if (!matches) return matches;\n\n  return {\n    fullGroup: matches[0],\n  };\n}\n\n/**\n * `comma(string)` matches commas in a CSS selector; used for disjunction.\n */\nfunction comma(string) {\n  const COMMA_PATTERN = /^\\s*,/i;\n  const matches = COMMA_PATTERN.exec(string);\n  if (!matches) return matches;\n\n  return {\n    fullGroup: matches[0],\n  };\n}\n\nmodule.exports = {\n  element,\n  attributePresence,\n  attributeValue,\n  pseudo,\n  combinator,\n  comma,\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/patterns.js\n// module id = 5\n// module chunks = 0","module.exports = {\n  cssToXPath: require('css-xpath'),\n  evaluators: require('./src/evaluators'),\n  generators: require('./src/generators'),\n  patterns: require('./src/patterns'),\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./index.js\n// module id = 6\n// module chunks = 0","const patterns = require('./patterns');\n\nfunction specialSelectorToXPathPiece(element) {\n  switch (element.specialSelectorType) {\n    case '#': // ID\n      return `[@id='${element.specialSelectorValue}']`;\n    case '.': // class\n      return `[contains(concat(' ',normalize-space(@class),' '), ' ${element.specialSelectorValue} ')]`;\n    default:\n      throw new Error(\n        `Invalid special selector type: ${element.specialSelectorType}.`\n      );\n  }\n}\n\nfunction cssXPath(rule) {\n  let index = 1;\n  const parts = ['//', '*'];\n  let lastRule = null;\n\n  while (rule.length && rule !== lastRule) {\n    lastRule = rule;\n\n    // Trim leading whitespace\n    rule = rule.trim(rule); // TODO: wtf?\n    if (!rule.length) break;\n\n    // Match the element identifier, matches rules of the form \"body\", \".class\" and \"#id\"\n    const element = patterns.element(rule);\n    if (element) {\n      if (element.specialSelectorType) {\n        parts.push(specialSelectorToXPathPiece(element));\n      } else if (element.namespace) {\n        // TODO: can we change these to just be parts.push and put everything in a elementToXPathPiece function?\n        // probably not, as they're replacing the // rule, initially. If not, leave documentation comment here.\n        parts[index] = element.namespace;\n      } else {\n        parts[index] = element.elementName;\n      }\n\n      rule = rule.substr(element.fullGroup.length);\n    }\n\n    // Match attribute selectors\n    const attribute = patterns.attributeValue(rule);\n    if (attribute) {\n      // matched a rule like [field~='thing'] or [name='Title']\n      if (attribute.isContains) {\n        parts.push(`[contains(@${attribute.field}, '${attribute.value}')]`);\n      } else {\n        parts.push(`[@${attribute.field}='${attribute.value}']`);\n      }\n\n      rule = rule.substr(attribute.fullGroup.length);\n    } else {\n      // matches rules like [mustExist], e.g., [disabled].\n      const attributePresence = patterns.attributePresence(rule);\n      if (attributePresence) {\n        parts.push(`[@${attributePresence.attributeName}]`);\n\n        rule = rule.substr(attributePresence.fullGroup.length);\n      }\n    }\n\n    // Skip over pseudo-classes and pseudo-elements, which are of no use to us\n    // e.g., :nth-child and :visited.\n    let pseudoGroups = patterns.pseudo(rule);\n    while (pseudoGroups) {\n      rule = rule.substr(pseudoGroups.fullGroup.length);\n\n      // if there are many, just skip them all right now.\n      pseudoGroups = patterns.pseudo(rule);\n    }\n\n    // Match combinators, e.g. html > body or html + body.\n    const combinator = patterns.combinator(rule);\n    if (combinator && combinator.fullGroup.length) {\n      if (combinator.fullGroup.indexOf('>') !== -1) {\n        parts.push('/');\n      } else if (combinator.fullGroup.indexOf('+') !== -1) {\n        parts.push('/following-sibling::');\n      } else {\n        parts.push('//');\n      }\n\n      index = parts.length;\n      parts.push('*');\n      rule = rule.substr(combinator.fullGroup.length);\n    }\n\n    // Match comma delimited disjunctions (\"or\" rules), e.g., html, body\n    const disjunction = patterns.comma(rule);\n    if (disjunction) {\n      parts.push(' | ', '//', '*');\n      index = parts.length - 1;\n      rule = rule.substr(disjunction.fullGroup.length);\n    }\n  }\n\n  const xPath = parts.join('');\n  return xPath;\n}\n\nmodule.exports = cssXPath;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-xpath/src/cssXPath.js\n// module id = 7\n// module chunks = 0","/**\n * This file's primary purpose is to turn a bunch of hard-to-read regular expressions\n * in to self-documenting functions with appropriate named capture groups and minimal\n * meaning parsing.\n */\n\n/**\n * `element(string)` matches the pieces of an initial CSS selector and returns a parsed set of fields.\n * e.g., #id, .class or body\n *\n * It also parses out the piped namespace piece: https://www.w3.org/TR/css3-selectors/#univnmsp\n */\nfunction element(string) {\n  const CSS_ELEMENT_PATTERN = /^([#.]?)([a-z0-9\\\\*_-]*)((\\|)([a-z0-9\\\\*_-]*))?/i;\n  const matches = CSS_ELEMENT_PATTERN.exec(string);\n  if (!matches) return matches;\n\n  const retVal = {\n    fullGroup: matches[0],\n    fullNamespaceGroup: matches[3],\n    namespace: matches[5], // TODO: this is backwards, handle namespace standardization here.\n  };\n\n  // either \"#\" or \".\" to indicate id or class selector\n  if (matches[1] === '#' || matches[1] === '.') {\n    retVal.specialSelectorType = matches[1];\n    retVal.specialSelectorValue = matches[2];\n  } else if (matches[1] === '') {\n    retVal.elementName = matches[2];\n  }\n\n  return retVal;\n}\n\n/**\n * `attributePresence(string)` matches the pieces of a CSS selector that represent a attribute presence requirement.\n *  e.g., [disabled], [x-anything-here]\n */\nfunction attributePresence(string) {\n  const CSS_ATTRIBUTE_PRESENCE_PATTERN = /^\\[([^\\]]*)\\]/i;\n  const matches = CSS_ATTRIBUTE_PRESENCE_PATTERN.exec(string);\n  if (!matches) return matches;\n\n  return {\n    fullGroup: matches[0],\n    attributeName: matches[1],\n  };\n}\n\n/**\n * `attributeValue(string)` matches the pieces of a CSS selector that represent a attribute selector.\n *  e.g., [disabled='disabled'], [class~='alphaghettis'], [type != 'number']\n *\n * TODO: this pattern fails on single or unquoted things. Bad!\n */\nfunction attributeValue(string) {\n  const CSS_ATTRIBUTE_VALUE_PATTERN = /^\\[\\s*([^~=\\s]+)\\s*(~?=)\\s*\"([^\"]+)\"\\s*\\]/i;\n  const matches = CSS_ATTRIBUTE_VALUE_PATTERN.exec(string);\n  if (!matches) return matches;\n\n  return {\n    fullGroup: matches[0],\n    field: matches[1],\n    value: matches[3],\n    isContains: matches[2] === '~=',\n  };\n}\n\n/**\n * `pseudo(string)` matches the pieces of a CSS selector that represent a pseudo selector.\n *  e.g., :first-child, :visited\n */\n// TODO: verify this works with parentheses, e.g., nth-child(2).\nfunction pseudo(string) {\n  const CSS_PSEUDO_PATTERN = /^:([a-z_-])+/i;\n  const matches = CSS_PSEUDO_PATTERN.exec(string);\n  if (!matches) return matches;\n\n  return {\n    fullGroup: matches[0],\n    selector: matches[1],\n  };\n}\n\n/**\n * `combinator(string)` matches the pieces of a CSS selector that represent a combinator.\n *  e.g., + or >\n */\nfunction combinator(string) {\n  const CSS_COMBINATOR_PATTERN = /^(\\s*[>+\\s])?/i;\n  const matches = CSS_COMBINATOR_PATTERN.exec(string);\n  if (!matches) return matches;\n\n  return {\n    fullGroup: matches[0],\n  };\n}\n\n/**\n * `comma(string)` matches commas in a CSS selector; used for disjunction.\n */\nfunction comma(string) {\n  const COMMA_PATTERN = /^\\s*,/i;\n  const matches = COMMA_PATTERN.exec(string);\n  if (!matches) return matches;\n\n  return {\n    fullGroup: matches[0],\n  };\n}\n\nmodule.exports = {\n  element,\n  attributePresence,\n  attributeValue,\n  pseudo,\n  combinator,\n  comma,\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-xpath/src/patterns.js\n// module id = 8\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process/browser.js\n// module id = 9\n// module chunks = 0","const ATTRIBUTE_SEPARATORS = {\n  class: ' ',\n  rel: ' ',\n  rev: ' ',\n  style: ';',\n  media: ','\n};\n\nfunction isSeparatedAttribute(name) {\n  if (ATTRIBUTE_SEPARATORS[name] !== undefined)\n    return ATTRIBUTE_SEPARATORS[name];\n  return false;\n}\n\nfunction splitAttribute(name, value) {\n  const splitter = isSeparatedAttribute(name);\n  if (!splitter) return value;\n  return value.split(splitter).map(i => i.trim());\n}\n\nfunction splitAttributes(map) {\n  const retVal = Object.assign({}, map);\n\n  for (const key in retVal) {\n    retVal[key] = splitAttribute(key, retVal[key])\n  }\n\n  return retVal;\n}\n\nmodule.exports = {\n  isSeparatedAttribute,\n  splitAttribute,\n  splitAttributes,\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/separated-attributes/index.js\n// module id = 10\n// module chunks = 0","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/util/~/inherits/inherits_browser.js\n// module id = 11\n// module chunks = 0","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/util/support/isBufferBrowser.js\n// module id = 12\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/util/util.js\n// module id = 13\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 14\n// module chunks = 0","/*\r\n * xpath.js\r\n *\r\n * An XPath 1.0 library for JavaScript.\r\n *\r\n * Cameron McCormack <cam (at) mcc.id.au>\r\n *\r\n * This work is licensed under the Creative Commons Attribution-ShareAlike\r\n * License. To view a copy of this license, visit\r\n *\r\n *   http://creativecommons.org/licenses/by-sa/2.0/\r\n *\r\n * or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford,\r\n * California 94305, USA.\r\n *\r\n * Revision 20: April 26, 2011\r\n *   Fixed a typo resulting in FIRST_ORDERED_NODE_TYPE results being wrong,\r\n *   thanks to <shi_a009 (at) hotmail.com>.\r\n *\r\n * Revision 19: November 29, 2005\r\n *   Nodesets now store their nodes in a height balanced tree, increasing\r\n *   performance for the common case of selecting nodes in document order,\r\n *   thanks to S閎astien Cramatte <contact (at) zeninteractif.com>.\r\n *   AVL tree code adapted from Raimund Neumann <rnova (at) gmx.net>.\r\n *\r\n * Revision 18: October 27, 2005\r\n *   DOM 3 XPath support.  Caveats:\r\n *     - namespace prefixes aren't resolved in XPathEvaluator.createExpression,\r\n *       but in XPathExpression.evaluate.\r\n *     - XPathResult.invalidIteratorState is not implemented.\r\n *\r\n * Revision 17: October 25, 2005\r\n *   Some core XPath function fixes and a patch to avoid crashing certain\r\n *   versions of MSXML in PathExpr.prototype.getOwnerElement, thanks to\r\n *   S閎astien Cramatte <contact (at) zeninteractif.com>.\r\n *\r\n * Revision 16: September 22, 2005\r\n *   Workarounds for some IE 5.5 deficiencies.\r\n *   Fixed problem with prefix node tests on attribute nodes.\r\n *\r\n * Revision 15: May 21, 2005\r\n *   Fixed problem with QName node tests on elements with an xmlns=\"...\".\r\n *\r\n * Revision 14: May 19, 2005\r\n *   Fixed QName node tests on attribute node regression.\r\n *\r\n * Revision 13: May 3, 2005\r\n *   Node tests are case insensitive now if working in an HTML DOM.\r\n *\r\n * Revision 12: April 26, 2005\r\n *   Updated licence.  Slight code changes to enable use of Dean\r\n *   Edwards' script compression, http://dean.edwards.name/packer/ .\r\n *\r\n * Revision 11: April 23, 2005\r\n *   Fixed bug with 'and' and 'or' operators, fix thanks to\r\n *   Sandy McArthur <sandy (at) mcarthur.org>.\r\n *\r\n * Revision 10: April 15, 2005\r\n *   Added support for a virtual root node, supposedly helpful for\r\n *   implementing XForms.  Fixed problem with QName node tests and\r\n *   the parent axis.\r\n *\r\n * Revision 9: March 17, 2005\r\n *   Namespace resolver tweaked so using the document node as the context\r\n *   for namespace lookups is equivalent to using the document element.\r\n *\r\n * Revision 8: February 13, 2005\r\n *   Handle implicit declaration of 'xmlns' namespace prefix.\r\n *   Fixed bug when comparing nodesets.\r\n *   Instance data can now be associated with a FunctionResolver, and\r\n *     workaround for MSXML not supporting 'localName' and 'getElementById',\r\n *     thanks to Grant Gongaware.\r\n *   Fix a few problems when the context node is the root node.\r\n *\r\n * Revision 7: February 11, 2005\r\n *   Default namespace resolver fix from Grant Gongaware\r\n *   <grant (at) gongaware.com>.\r\n *\r\n * Revision 6: February 10, 2005\r\n *   Fixed bug in 'number' function.\r\n *\r\n * Revision 5: February 9, 2005\r\n *   Fixed bug where text nodes not getting converted to string values.\r\n *\r\n * Revision 4: January 21, 2005\r\n *   Bug in 'name' function, fix thanks to Bill Edney.\r\n *   Fixed incorrect processing of namespace nodes.\r\n *   Fixed NamespaceResolver to resolve 'xml' namespace.\r\n *   Implemented union '|' operator.\r\n *\r\n * Revision 3: January 14, 2005\r\n *   Fixed bug with nodeset comparisons, bug lexing < and >.\r\n *\r\n * Revision 2: October 26, 2004\r\n *   QName node test namespace handling fixed.  Few other bug fixes.\r\n *\r\n * Revision 1: August 13, 2004\r\n *   Bug fixes from William J. Edney <bedney (at) technicalpursuit.com>.\r\n *   Added minimal licence.\r\n *\r\n * Initial version: June 14, 2004\r\n */\r\n\r\n// non-node wrapper\r\nvar xpath = (typeof exports === 'undefined') ? {} : exports;\r\n\r\n(function(exports) {\r\n\"use strict\";\r\n\r\n// XPathParser ///////////////////////////////////////////////////////////////\r\n\r\nXPathParser.prototype = new Object();\r\nXPathParser.prototype.constructor = XPathParser;\r\nXPathParser.superclass = Object.prototype;\r\n\r\nfunction XPathParser() {\r\n\tthis.init();\r\n}\r\n\r\nXPathParser.prototype.init = function() {\r\n\tthis.reduceActions = [];\r\n\r\n\tthis.reduceActions[3] = function(rhs) {\r\n\t\treturn new OrOperation(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[5] = function(rhs) {\r\n\t\treturn new AndOperation(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[7] = function(rhs) {\r\n\t\treturn new EqualsOperation(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[8] = function(rhs) {\r\n\t\treturn new NotEqualOperation(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[10] = function(rhs) {\r\n\t\treturn new LessThanOperation(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[11] = function(rhs) {\r\n\t\treturn new GreaterThanOperation(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[12] = function(rhs) {\r\n\t\treturn new LessThanOrEqualOperation(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[13] = function(rhs) {\r\n\t\treturn new GreaterThanOrEqualOperation(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[15] = function(rhs) {\r\n\t\treturn new PlusOperation(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[16] = function(rhs) {\r\n\t\treturn new MinusOperation(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[18] = function(rhs) {\r\n\t\treturn new MultiplyOperation(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[19] = function(rhs) {\r\n\t\treturn new DivOperation(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[20] = function(rhs) {\r\n\t\treturn new ModOperation(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[22] = function(rhs) {\r\n\t\treturn new UnaryMinusOperation(rhs[1]);\r\n\t};\r\n\tthis.reduceActions[24] = function(rhs) {\r\n\t\treturn new BarOperation(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[25] = function(rhs) {\r\n\t\treturn new PathExpr(undefined, undefined, rhs[0]);\r\n\t};\r\n\tthis.reduceActions[27] = function(rhs) {\r\n\t\trhs[0].locationPath = rhs[2];\r\n\t\treturn rhs[0];\r\n\t};\r\n\tthis.reduceActions[28] = function(rhs) {\r\n\t\trhs[0].locationPath = rhs[2];\r\n\t\trhs[0].locationPath.steps.unshift(new Step(Step.DESCENDANTORSELF, new NodeTest(NodeTest.NODE, undefined), []));\r\n\t\treturn rhs[0];\r\n\t};\r\n\tthis.reduceActions[29] = function(rhs) {\r\n\t\treturn new PathExpr(rhs[0], [], undefined);\r\n\t};\r\n\tthis.reduceActions[30] = function(rhs) {\r\n\t\tif (Utilities.instance_of(rhs[0], PathExpr)) {\r\n\t\t\tif (rhs[0].filterPredicates == undefined) {\r\n\t\t\t\trhs[0].filterPredicates = [];\r\n\t\t\t}\r\n\t\t\trhs[0].filterPredicates.push(rhs[1]);\r\n\t\t\treturn rhs[0];\r\n\t\t} else {\r\n\t\t\treturn new PathExpr(rhs[0], [rhs[1]], undefined);\r\n\t\t}\r\n\t};\r\n\tthis.reduceActions[32] = function(rhs) {\r\n\t\treturn rhs[1];\r\n\t};\r\n\tthis.reduceActions[33] = function(rhs) {\r\n\t\treturn new XString(rhs[0]);\r\n\t};\r\n\tthis.reduceActions[34] = function(rhs) {\r\n\t\treturn new XNumber(rhs[0]);\r\n\t};\r\n\tthis.reduceActions[36] = function(rhs) {\r\n\t\treturn new FunctionCall(rhs[0], []);\r\n\t};\r\n\tthis.reduceActions[37] = function(rhs) {\r\n\t\treturn new FunctionCall(rhs[0], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[38] = function(rhs) {\r\n\t\treturn [ rhs[0] ];\r\n\t};\r\n\tthis.reduceActions[39] = function(rhs) {\r\n\t\trhs[2].unshift(rhs[0]);\r\n\t\treturn rhs[2];\r\n\t};\r\n\tthis.reduceActions[43] = function(rhs) {\r\n\t\treturn new LocationPath(true, []);\r\n\t};\r\n\tthis.reduceActions[44] = function(rhs) {\r\n\t\trhs[1].absolute = true;\r\n\t\treturn rhs[1];\r\n\t};\r\n\tthis.reduceActions[46] = function(rhs) {\r\n\t\treturn new LocationPath(false, [ rhs[0] ]);\r\n\t};\r\n\tthis.reduceActions[47] = function(rhs) {\r\n\t\trhs[0].steps.push(rhs[2]);\r\n\t\treturn rhs[0];\r\n\t};\r\n\tthis.reduceActions[49] = function(rhs) {\r\n\t\treturn new Step(rhs[0], rhs[1], []);\r\n\t};\r\n\tthis.reduceActions[50] = function(rhs) {\r\n\t\treturn new Step(Step.CHILD, rhs[0], []);\r\n\t};\r\n\tthis.reduceActions[51] = function(rhs) {\r\n\t\treturn new Step(rhs[0], rhs[1], rhs[2]);\r\n\t};\r\n\tthis.reduceActions[52] = function(rhs) {\r\n\t\treturn new Step(Step.CHILD, rhs[0], rhs[1]);\r\n\t};\r\n\tthis.reduceActions[54] = function(rhs) {\r\n\t\treturn [ rhs[0] ];\r\n\t};\r\n\tthis.reduceActions[55] = function(rhs) {\r\n\t\trhs[1].unshift(rhs[0]);\r\n\t\treturn rhs[1];\r\n\t};\r\n\tthis.reduceActions[56] = function(rhs) {\r\n\t\tif (rhs[0] == \"ancestor\") {\r\n\t\t\treturn Step.ANCESTOR;\r\n\t\t} else if (rhs[0] == \"ancestor-or-self\") {\r\n\t\t\treturn Step.ANCESTORORSELF;\r\n\t\t} else if (rhs[0] == \"attribute\") {\r\n\t\t\treturn Step.ATTRIBUTE;\r\n\t\t} else if (rhs[0] == \"child\") {\r\n\t\t\treturn Step.CHILD;\r\n\t\t} else if (rhs[0] == \"descendant\") {\r\n\t\t\treturn Step.DESCENDANT;\r\n\t\t} else if (rhs[0] == \"descendant-or-self\") {\r\n\t\t\treturn Step.DESCENDANTORSELF;\r\n\t\t} else if (rhs[0] == \"following\") {\r\n\t\t\treturn Step.FOLLOWING;\r\n\t\t} else if (rhs[0] == \"following-sibling\") {\r\n\t\t\treturn Step.FOLLOWINGSIBLING;\r\n\t\t} else if (rhs[0] == \"namespace\") {\r\n\t\t\treturn Step.NAMESPACE;\r\n\t\t} else if (rhs[0] == \"parent\") {\r\n\t\t\treturn Step.PARENT;\r\n\t\t} else if (rhs[0] == \"preceding\") {\r\n\t\t\treturn Step.PRECEDING;\r\n\t\t} else if (rhs[0] == \"preceding-sibling\") {\r\n\t\t\treturn Step.PRECEDINGSIBLING;\r\n\t\t} else if (rhs[0] == \"self\") {\r\n\t\t\treturn Step.SELF;\r\n\t\t}\r\n\t\treturn -1;\r\n\t};\r\n\tthis.reduceActions[57] = function(rhs) {\r\n\t\treturn Step.ATTRIBUTE;\r\n\t};\r\n\tthis.reduceActions[59] = function(rhs) {\r\n\t\tif (rhs[0] == \"comment\") {\r\n\t\t\treturn new NodeTest(NodeTest.COMMENT, undefined);\r\n\t\t} else if (rhs[0] == \"text\") {\r\n\t\t\treturn new NodeTest(NodeTest.TEXT, undefined);\r\n\t\t} else if (rhs[0] == \"processing-instruction\") {\r\n\t\t\treturn new NodeTest(NodeTest.PI, undefined);\r\n\t\t} else if (rhs[0] == \"node\") {\r\n\t\t\treturn new NodeTest(NodeTest.NODE, undefined);\r\n\t\t}\r\n\t\treturn new NodeTest(-1, undefined);\r\n\t};\r\n\tthis.reduceActions[60] = function(rhs) {\r\n\t\treturn new NodeTest(NodeTest.PI, rhs[2]);\r\n\t};\r\n\tthis.reduceActions[61] = function(rhs) {\r\n\t\treturn rhs[1];\r\n\t};\r\n\tthis.reduceActions[63] = function(rhs) {\r\n\t\trhs[1].absolute = true;\r\n\t\trhs[1].steps.unshift(new Step(Step.DESCENDANTORSELF, new NodeTest(NodeTest.NODE, undefined), []));\r\n\t\treturn rhs[1];\r\n\t};\r\n\tthis.reduceActions[64] = function(rhs) {\r\n\t\trhs[0].steps.push(new Step(Step.DESCENDANTORSELF, new NodeTest(NodeTest.NODE, undefined), []));\r\n\t\trhs[0].steps.push(rhs[2]);\r\n\t\treturn rhs[0];\r\n\t};\r\n\tthis.reduceActions[65] = function(rhs) {\r\n\t\treturn new Step(Step.SELF, new NodeTest(NodeTest.NODE, undefined), []);\r\n\t};\r\n\tthis.reduceActions[66] = function(rhs) {\r\n\t\treturn new Step(Step.PARENT, new NodeTest(NodeTest.NODE, undefined), []);\r\n\t};\r\n\tthis.reduceActions[67] = function(rhs) {\r\n\t\treturn new VariableReference(rhs[1]);\r\n\t};\r\n\tthis.reduceActions[68] = function(rhs) {\r\n\t\treturn new NodeTest(NodeTest.NAMETESTANY, undefined);\r\n\t};\r\n\tthis.reduceActions[69] = function(rhs) {\r\n\t\tvar prefix = rhs[0].substring(0, rhs[0].indexOf(\":\"));\r\n\t\treturn new NodeTest(NodeTest.NAMETESTPREFIXANY, prefix);\r\n\t};\r\n\tthis.reduceActions[70] = function(rhs) {\r\n\t\treturn new NodeTest(NodeTest.NAMETESTQNAME, rhs[0]);\r\n\t};\r\n};\r\n\r\nXPathParser.actionTable = [\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\"                 s                  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr  r  \",\r\n\t\"                rrrrr               \",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\"rs  rrrrrrrr s  sssssrrrrrr  rrs rs \",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\"                            s       \",\r\n\t\"                            s       \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"  s                                 \",\r\n\t\"                            s       \",\r\n\t\" s           s  sssss          s  s \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr  r  \",\r\n\t\"a                                   \",\r\n\t\"r       s                    rr  r  \",\r\n\t\"r      sr                    rr  r  \",\r\n\t\"r   s  rr            s       rr  r  \",\r\n\t\"r   rssrr            rss     rr  r  \",\r\n\t\"r   rrrrr            rrrss   rr  r  \",\r\n\t\"r   rrrrrsss         rrrrr   rr  r  \",\r\n\t\"r   rrrrrrrr         rrrrr   rr  r  \",\r\n\t\"r   rrrrrrrr         rrrrrs  rr  r  \",\r\n\t\"r   rrrrrrrr         rrrrrr  rr  r  \",\r\n\t\"r   rrrrrrrr         rrrrrr  rr  r  \",\r\n\t\"r  srrrrrrrr         rrrrrrs rr sr  \",\r\n\t\"r  srrrrrrrr         rrrrrrs rr  r  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"r   rrrrrrrr         rrrrrr  rr  r  \",\r\n\t\"r   rrrrrrrr         rrrrrr  rr  r  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr  r  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr  r  \",\r\n\t\"                sssss               \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr sr  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr  r  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"                             s      \",\r\n\t\"r  srrrrrrrr         rrrrrrs rr  r  \",\r\n\t\"r   rrrrrrrr         rrrrr   rr  r  \",\r\n\t\"              s                     \",\r\n\t\"                             s      \",\r\n\t\"                rrrrr               \",\r\n\t\" s s        sssssssss    s sss s  ss\",\r\n\t\"r  srrrrrrrr         rrrrrrs rr  r  \",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\" s s        sssssssss      ss  s  ss\",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\" s           s  sssss          s  s \",\r\n\t\" s           s  sssss          s  s \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\" s           s  sssss          s  s \",\r\n\t\" s           s  sssss          s  s \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr sr  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr sr  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr  r  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"                             s      \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"                             rr     \",\r\n\t\"                             s      \",\r\n\t\"                             rs     \",\r\n\t\"r      sr                    rr  r  \",\r\n\t\"r   s  rr            s       rr  r  \",\r\n\t\"r   rssrr            rss     rr  r  \",\r\n\t\"r   rssrr            rss     rr  r  \",\r\n\t\"r   rrrrr            rrrss   rr  r  \",\r\n\t\"r   rrrrr            rrrss   rr  r  \",\r\n\t\"r   rrrrr            rrrss   rr  r  \",\r\n\t\"r   rrrrr            rrrss   rr  r  \",\r\n\t\"r   rrrrrsss         rrrrr   rr  r  \",\r\n\t\"r   rrrrrsss         rrrrr   rr  r  \",\r\n\t\"r   rrrrrrrr         rrrrr   rr  r  \",\r\n\t\"r   rrrrrrrr         rrrrr   rr  r  \",\r\n\t\"r   rrrrrrrr         rrrrr   rr  r  \",\r\n\t\"r   rrrrrrrr         rrrrrr  rr  r  \",\r\n\t\"                                 r  \",\r\n\t\"                                 s  \",\r\n\t\"r  srrrrrrrr         rrrrrrs rr  r  \",\r\n\t\"r  srrrrrrrr         rrrrrrs rr  r  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr  r  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr  r  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr  r  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr  r  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\" s s        sssssssss    s ss  s  ss\",\r\n\t\"r  rrrrrrrrr         rrrrrrr rr rr  \",\r\n\t\"                             r      \"\r\n];\r\n\r\nXPathParser.actionTableNumber = [\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\"                 J                  \",\r\n\t\"a  aaaaaaaaa         aaaaaaa aa  a  \",\r\n\t\"                YYYYY               \",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\"K1  KKKKKKKK .  +*)('KKKKKK  KK# K\\\" \",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\"                            N       \",\r\n\t\"                            O       \",\r\n\t\"e  eeeeeeeee         eeeeeee ee ee  \",\r\n\t\"f  fffffffff         fffffff ff ff  \",\r\n\t\"d  ddddddddd         ddddddd dd dd  \",\r\n\t\"B  BBBBBBBBB         BBBBBBB BB BB  \",\r\n\t\"A  AAAAAAAAA         AAAAAAA AA AA  \",\r\n\t\"  P                                 \",\r\n\t\"                            Q       \",\r\n\t\" 1           .  +*)('          #  \\\" \",\r\n\t\"b  bbbbbbbbb         bbbbbbb bb  b  \",\r\n\t\"                                    \",\r\n\t\"!       S                    !!  !  \",\r\n\t\"\\\"      T\\\"                    \\\"\\\"  \\\"  \",\r\n\t\"$   V  $$            U       $$  $  \",\r\n\t\"&   &ZY&&            &XW     &&  &  \",\r\n\t\")   )))))            )))\\\\[   ))  )  \",\r\n\t\".   ....._^]         .....   ..  .  \",\r\n\t\"1   11111111         11111   11  1  \",\r\n\t\"5   55555555         55555`  55  5  \",\r\n\t\"7   77777777         777777  77  7  \",\r\n\t\"9   99999999         999999  99  9  \",\r\n\t\":  c::::::::         ::::::b :: a:  \",\r\n\t\"I  fIIIIIIII         IIIIIIe II  I  \",\r\n\t\"=  =========         ======= == ==  \",\r\n\t\"?  ?????????         ??????? ?? ??  \",\r\n\t\"C  CCCCCCCCC         CCCCCCC CC CC  \",\r\n\t\"J   JJJJJJJJ         JJJJJJ  JJ  J  \",\r\n\t\"M   MMMMMMMM         MMMMMM  MM  M  \",\r\n\t\"N  NNNNNNNNN         NNNNNNN NN  N  \",\r\n\t\"P  PPPPPPPPP         PPPPPPP PP  P  \",\r\n\t\"                +*)('               \",\r\n\t\"R  RRRRRRRRR         RRRRRRR RR aR  \",\r\n\t\"U  UUUUUUUUU         UUUUUUU UU  U  \",\r\n\t\"Z  ZZZZZZZZZ         ZZZZZZZ ZZ ZZ  \",\r\n\t\"c  ccccccccc         ccccccc cc cc  \",\r\n\t\"                             j      \",\r\n\t\"L  fLLLLLLLL         LLLLLLe LL  L  \",\r\n\t\"6   66666666         66666   66  6  \",\r\n\t\"              k                     \",\r\n\t\"                             l      \",\r\n\t\"                XXXXX               \",\r\n\t\" 1 0        /.-,+*)('    & %$m #  \\\"!\",\r\n\t\"_  f________         ______e __  _  \",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\" 1 0        /.-,+*)('      %$  #  \\\"!\",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\" 1           .  +*)('          #  \\\" \",\r\n\t\" 1           .  +*)('          #  \\\" \",\r\n\t\">  >>>>>>>>>         >>>>>>> >> >>  \",\r\n\t\" 1           .  +*)('          #  \\\" \",\r\n\t\" 1           .  +*)('          #  \\\" \",\r\n\t\"Q  QQQQQQQQQ         QQQQQQQ QQ aQ  \",\r\n\t\"V  VVVVVVVVV         VVVVVVV VV aV  \",\r\n\t\"T  TTTTTTTTT         TTTTTTT TT  T  \",\r\n\t\"@  @@@@@@@@@         @@@@@@@ @@ @@  \",\r\n\t\"                             \\x87      \",\r\n\t\"[  [[[[[[[[[         [[[[[[[ [[ [[  \",\r\n\t\"D  DDDDDDDDD         DDDDDDD DD DD  \",\r\n\t\"                             HH     \",\r\n\t\"                             \\x88      \",\r\n\t\"                             F\\x89     \",\r\n\t\"#      T#                    ##  #  \",\r\n\t\"%   V  %%            U       %%  %  \",\r\n\t\"'   'ZY''            'XW     ''  '  \",\r\n\t\"(   (ZY((            (XW     ((  (  \",\r\n\t\"+   +++++            +++\\\\[   ++  +  \",\r\n\t\"*   *****            ***\\\\[   **  *  \",\r\n\t\"-   -----            ---\\\\[   --  -  \",\r\n\t\",   ,,,,,            ,,,\\\\[   ,,  ,  \",\r\n\t\"0   00000_^]         00000   00  0  \",\r\n\t\"/   /////_^]         /////   //  /  \",\r\n\t\"2   22222222         22222   22  2  \",\r\n\t\"3   33333333         33333   33  3  \",\r\n\t\"4   44444444         44444   44  4  \",\r\n\t\"8   88888888         888888  88  8  \",\r\n\t\"                                 ^  \",\r\n\t\"                                 \\x8a  \",\r\n\t\";  f;;;;;;;;         ;;;;;;e ;;  ;  \",\r\n\t\"<  f<<<<<<<<         <<<<<<e <<  <  \",\r\n\t\"O  OOOOOOOOO         OOOOOOO OO  O  \",\r\n\t\"`  `````````         ``````` ``  `  \",\r\n\t\"S  SSSSSSSSS         SSSSSSS SS  S  \",\r\n\t\"W  WWWWWWWWW         WWWWWWW WW  W  \",\r\n\t\"\\\\  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\         \\\\\\\\\\\\\\\\\\\\\\\\\\\\ \\\\\\\\ \\\\\\\\  \",\r\n\t\"E  EEEEEEEEE         EEEEEEE EE EE  \",\r\n\t\" 1 0        /.-,+*)('    & %$  #  \\\"!\",\r\n\t\"]  ]]]]]]]]]         ]]]]]]] ]] ]]  \",\r\n\t\"                             G      \"\r\n];\r\n\r\nXPathParser.gotoTable = [\r\n\t\"3456789:;<=>?@ AB  CDEFGH IJ \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"L456789:;<=>?@ AB  CDEFGH IJ \",\r\n\t\"            M        EFGH IJ \",\r\n\t\"       N;<=>?@ AB  CDEFGH IJ \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"            S        EFGH IJ \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"              e              \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                        h  J \",\r\n\t\"              i          j   \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"o456789:;<=>?@ ABpqCDEFGH IJ \",\r\n\t\"                             \",\r\n\t\"  r6789:;<=>?@ AB  CDEFGH IJ \",\r\n\t\"   s789:;<=>?@ AB  CDEFGH IJ \",\r\n\t\"    t89:;<=>?@ AB  CDEFGH IJ \",\r\n\t\"    u89:;<=>?@ AB  CDEFGH IJ \",\r\n\t\"     v9:;<=>?@ AB  CDEFGH IJ \",\r\n\t\"     w9:;<=>?@ AB  CDEFGH IJ \",\r\n\t\"     x9:;<=>?@ AB  CDEFGH IJ \",\r\n\t\"     y9:;<=>?@ AB  CDEFGH IJ \",\r\n\t\"      z:;<=>?@ AB  CDEFGH IJ \",\r\n\t\"      {:;<=>?@ AB  CDEFGH IJ \",\r\n\t\"       |;<=>?@ AB  CDEFGH IJ \",\r\n\t\"       };<=>?@ AB  CDEFGH IJ \",\r\n\t\"       ~;<=>?@ AB  CDEFGH IJ \",\r\n\t\"         \\x7f=>?@ AB  CDEFGH IJ \",\r\n\t\"\\x80456789:;<=>?@ AB  CDEFGH IJ\\x81\",\r\n\t\"            \\x82        EFGH IJ \",\r\n\t\"            \\x83        EFGH IJ \",\r\n\t\"                             \",\r\n\t\"                     \\x84 GH IJ \",\r\n\t\"                     \\x85 GH IJ \",\r\n\t\"              i          \\x86   \",\r\n\t\"              i          \\x87   \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"                             \",\r\n\t\"o456789:;<=>?@ AB\\x8cqCDEFGH IJ \",\r\n\t\"                             \",\r\n\t\"                             \"\r\n];\r\n\r\nXPathParser.productions = [\r\n\t[1, 1, 2],\r\n\t[2, 1, 3],\r\n\t[3, 1, 4],\r\n\t[3, 3, 3, -9, 4],\r\n\t[4, 1, 5],\r\n\t[4, 3, 4, -8, 5],\r\n\t[5, 1, 6],\r\n\t[5, 3, 5, -22, 6],\r\n\t[5, 3, 5, -5, 6],\r\n\t[6, 1, 7],\r\n\t[6, 3, 6, -23, 7],\r\n\t[6, 3, 6, -24, 7],\r\n\t[6, 3, 6, -6, 7],\r\n\t[6, 3, 6, -7, 7],\r\n\t[7, 1, 8],\r\n\t[7, 3, 7, -25, 8],\r\n\t[7, 3, 7, -26, 8],\r\n\t[8, 1, 9],\r\n\t[8, 3, 8, -12, 9],\r\n\t[8, 3, 8, -11, 9],\r\n\t[8, 3, 8, -10, 9],\r\n\t[9, 1, 10],\r\n\t[9, 2, -26, 9],\r\n\t[10, 1, 11],\r\n\t[10, 3, 10, -27, 11],\r\n\t[11, 1, 12],\r\n\t[11, 1, 13],\r\n\t[11, 3, 13, -28, 14],\r\n\t[11, 3, 13, -4, 14],\r\n\t[13, 1, 15],\r\n\t[13, 2, 13, 16],\r\n\t[15, 1, 17],\r\n\t[15, 3, -29, 2, -30],\r\n\t[15, 1, -15],\r\n\t[15, 1, -16],\r\n\t[15, 1, 18],\r\n\t[18, 3, -13, -29, -30],\r\n\t[18, 4, -13, -29, 19, -30],\r\n\t[19, 1, 20],\r\n\t[19, 3, 20, -31, 19],\r\n\t[20, 1, 2],\r\n\t[12, 1, 14],\r\n\t[12, 1, 21],\r\n\t[21, 1, -28],\r\n\t[21, 2, -28, 14],\r\n\t[21, 1, 22],\r\n\t[14, 1, 23],\r\n\t[14, 3, 14, -28, 23],\r\n\t[14, 1, 24],\r\n\t[23, 2, 25, 26],\r\n\t[23, 1, 26],\r\n\t[23, 3, 25, 26, 27],\r\n\t[23, 2, 26, 27],\r\n\t[23, 1, 28],\r\n\t[27, 1, 16],\r\n\t[27, 2, 16, 27],\r\n\t[25, 2, -14, -3],\r\n\t[25, 1, -32],\r\n\t[26, 1, 29],\r\n\t[26, 3, -20, -29, -30],\r\n\t[26, 4, -21, -29, -15, -30],\r\n\t[16, 3, -33, 30, -34],\r\n\t[30, 1, 2],\r\n\t[22, 2, -4, 14],\r\n\t[24, 3, 14, -4, 23],\r\n\t[28, 1, -35],\r\n\t[28, 1, -2],\r\n\t[17, 2, -36, -18],\r\n\t[29, 1, -17],\r\n\t[29, 1, -19],\r\n\t[29, 1, -18]\r\n];\r\n\r\nXPathParser.DOUBLEDOT = 2;\r\nXPathParser.DOUBLECOLON = 3;\r\nXPathParser.DOUBLESLASH = 4;\r\nXPathParser.NOTEQUAL = 5;\r\nXPathParser.LESSTHANOREQUAL = 6;\r\nXPathParser.GREATERTHANOREQUAL = 7;\r\nXPathParser.AND = 8;\r\nXPathParser.OR = 9;\r\nXPathParser.MOD = 10;\r\nXPathParser.DIV = 11;\r\nXPathParser.MULTIPLYOPERATOR = 12;\r\nXPathParser.FUNCTIONNAME = 13;\r\nXPathParser.AXISNAME = 14;\r\nXPathParser.LITERAL = 15;\r\nXPathParser.NUMBER = 16;\r\nXPathParser.ASTERISKNAMETEST = 17;\r\nXPathParser.QNAME = 18;\r\nXPathParser.NCNAMECOLONASTERISK = 19;\r\nXPathParser.NODETYPE = 20;\r\nXPathParser.PROCESSINGINSTRUCTIONWITHLITERAL = 21;\r\nXPathParser.EQUALS = 22;\r\nXPathParser.LESSTHAN = 23;\r\nXPathParser.GREATERTHAN = 24;\r\nXPathParser.PLUS = 25;\r\nXPathParser.MINUS = 26;\r\nXPathParser.BAR = 27;\r\nXPathParser.SLASH = 28;\r\nXPathParser.LEFTPARENTHESIS = 29;\r\nXPathParser.RIGHTPARENTHESIS = 30;\r\nXPathParser.COMMA = 31;\r\nXPathParser.AT = 32;\r\nXPathParser.LEFTBRACKET = 33;\r\nXPathParser.RIGHTBRACKET = 34;\r\nXPathParser.DOT = 35;\r\nXPathParser.DOLLAR = 36;\r\n\r\nXPathParser.prototype.tokenize = function(s1) {\r\n\tvar types = [];\r\n\tvar values = [];\r\n\tvar s = s1 + '\\0';\r\n\r\n\tvar pos = 0;\r\n\tvar c = s.charAt(pos++);\r\n\twhile (1) {\r\n\t\twhile (c == ' ' || c == '\\t' || c == '\\r' || c == '\\n') {\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t}\r\n\t\tif (c == '\\0' || pos >= s.length) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (c == '(') {\r\n\t\t\ttypes.push(XPathParser.LEFTPARENTHESIS);\r\n\t\t\tvalues.push(c);\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (c == ')') {\r\n\t\t\ttypes.push(XPathParser.RIGHTPARENTHESIS);\r\n\t\t\tvalues.push(c);\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (c == '[') {\r\n\t\t\ttypes.push(XPathParser.LEFTBRACKET);\r\n\t\t\tvalues.push(c);\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (c == ']') {\r\n\t\t\ttypes.push(XPathParser.RIGHTBRACKET);\r\n\t\t\tvalues.push(c);\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (c == '@') {\r\n\t\t\ttypes.push(XPathParser.AT);\r\n\t\t\tvalues.push(c);\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (c == ',') {\r\n\t\t\ttypes.push(XPathParser.COMMA);\r\n\t\t\tvalues.push(c);\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (c == '|') {\r\n\t\t\ttypes.push(XPathParser.BAR);\r\n\t\t\tvalues.push(c);\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (c == '+') {\r\n\t\t\ttypes.push(XPathParser.PLUS);\r\n\t\t\tvalues.push(c);\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (c == '-') {\r\n\t\t\ttypes.push(XPathParser.MINUS);\r\n\t\t\tvalues.push(c);\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (c == '=') {\r\n\t\t\ttypes.push(XPathParser.EQUALS);\r\n\t\t\tvalues.push(c);\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (c == '$') {\r\n\t\t\ttypes.push(XPathParser.DOLLAR);\r\n\t\t\tvalues.push(c);\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tif (c == '.') {\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tif (c == '.') {\r\n\t\t\t\ttypes.push(XPathParser.DOUBLEDOT);\r\n\t\t\t\tvalues.push(\"..\");\r\n\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (c >= '0' && c <= '9') {\r\n\t\t\t\tvar number = \".\" + c;\r\n\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t\twhile (c >= '0' && c <= '9') {\r\n\t\t\t\t\tnumber += c;\r\n\t\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t\t}\r\n\t\t\t\ttypes.push(XPathParser.NUMBER);\r\n\t\t\t\tvalues.push(number);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\ttypes.push(XPathParser.DOT);\r\n\t\t\tvalues.push('.');\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tif (c == '\\'' || c == '\"') {\r\n\t\t\tvar delimiter = c;\r\n\t\t\tvar literal = \"\";\r\n\t\t\twhile (pos < s.length && (c = s.charAt(pos)) !== delimiter) {\r\n\t\t\t\tliteral += c;\r\n                pos += 1;\r\n\t\t\t}\r\n            if (c !== delimiter) {\r\n                throw XPathException.fromMessage(\"Unterminated string literal: \" + delimiter + literal);\r\n            }\r\n            pos += 1;\r\n\t\t\ttypes.push(XPathParser.LITERAL);\r\n\t\t\tvalues.push(literal);\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tif (c >= '0' && c <= '9') {\r\n\t\t\tvar number = c;\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\twhile (c >= '0' && c <= '9') {\r\n\t\t\t\tnumber += c;\r\n\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t}\r\n\t\t\tif (c == '.') {\r\n\t\t\t\tif (s.charAt(pos) >= '0' && s.charAt(pos) <= '9') {\r\n\t\t\t\t\tnumber += c;\r\n\t\t\t\t\tnumber += s.charAt(pos++);\r\n\t\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t\t\twhile (c >= '0' && c <= '9') {\r\n\t\t\t\t\t\tnumber += c;\r\n\t\t\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttypes.push(XPathParser.NUMBER);\r\n\t\t\tvalues.push(number);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tif (c == '*') {\r\n\t\t\tif (types.length > 0) {\r\n\t\t\t\tvar last = types[types.length - 1];\r\n\t\t\t\tif (last != XPathParser.AT\r\n\t\t\t\t\t\t&& last != XPathParser.DOUBLECOLON\r\n\t\t\t\t\t\t&& last != XPathParser.LEFTPARENTHESIS\r\n\t\t\t\t\t\t&& last != XPathParser.LEFTBRACKET\r\n\t\t\t\t\t\t&& last != XPathParser.AND\r\n\t\t\t\t\t\t&& last != XPathParser.OR\r\n\t\t\t\t\t\t&& last != XPathParser.MOD\r\n\t\t\t\t\t\t&& last != XPathParser.DIV\r\n\t\t\t\t\t\t&& last != XPathParser.MULTIPLYOPERATOR\r\n\t\t\t\t\t\t&& last != XPathParser.SLASH\r\n\t\t\t\t\t\t&& last != XPathParser.DOUBLESLASH\r\n\t\t\t\t\t\t&& last != XPathParser.BAR\r\n\t\t\t\t\t\t&& last != XPathParser.PLUS\r\n\t\t\t\t\t\t&& last != XPathParser.MINUS\r\n\t\t\t\t\t\t&& last != XPathParser.EQUALS\r\n\t\t\t\t\t\t&& last != XPathParser.NOTEQUAL\r\n\t\t\t\t\t\t&& last != XPathParser.LESSTHAN\r\n\t\t\t\t\t\t&& last != XPathParser.LESSTHANOREQUAL\r\n\t\t\t\t\t\t&& last != XPathParser.GREATERTHAN\r\n\t\t\t\t\t\t&& last != XPathParser.GREATERTHANOREQUAL) {\r\n\t\t\t\t\ttypes.push(XPathParser.MULTIPLYOPERATOR);\r\n\t\t\t\t\tvalues.push(c);\r\n\t\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttypes.push(XPathParser.ASTERISKNAMETEST);\r\n\t\t\tvalues.push(c);\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tif (c == ':') {\r\n\t\t\tif (s.charAt(pos) == ':') {\r\n\t\t\t\ttypes.push(XPathParser.DOUBLECOLON);\r\n\t\t\t\tvalues.push(\"::\");\r\n\t\t\t\tpos++;\r\n\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (c == '/') {\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tif (c == '/') {\r\n\t\t\t\ttypes.push(XPathParser.DOUBLESLASH);\r\n\t\t\t\tvalues.push(\"//\");\r\n\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\ttypes.push(XPathParser.SLASH);\r\n\t\t\tvalues.push('/');\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tif (c == '!') {\r\n\t\t\tif (s.charAt(pos) == '=') {\r\n\t\t\t\ttypes.push(XPathParser.NOTEQUAL);\r\n\t\t\t\tvalues.push(\"!=\");\r\n\t\t\t\tpos++;\r\n\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (c == '<') {\r\n\t\t\tif (s.charAt(pos) == '=') {\r\n\t\t\t\ttypes.push(XPathParser.LESSTHANOREQUAL);\r\n\t\t\t\tvalues.push(\"<=\");\r\n\t\t\t\tpos++;\r\n\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\ttypes.push(XPathParser.LESSTHAN);\r\n\t\t\tvalues.push('<');\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tif (c == '>') {\r\n\t\t\tif (s.charAt(pos) == '=') {\r\n\t\t\t\ttypes.push(XPathParser.GREATERTHANOREQUAL);\r\n\t\t\t\tvalues.push(\">=\");\r\n\t\t\t\tpos++;\r\n\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\ttypes.push(XPathParser.GREATERTHAN);\r\n\t\t\tvalues.push('>');\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tif (c == '_' || Utilities.isLetter(c.charCodeAt(0))) {\r\n\t\t\tvar name = c;\r\n\t\t\tc = s.charAt(pos++);\r\n\t\t\twhile (Utilities.isNCNameChar(c.charCodeAt(0))) {\r\n\t\t\t\tname += c;\r\n\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t}\r\n\t\t\tif (types.length > 0) {\r\n\t\t\t\tvar last = types[types.length - 1];\r\n\t\t\t\tif (last != XPathParser.AT\r\n\t\t\t\t\t\t&& last != XPathParser.DOUBLECOLON\r\n\t\t\t\t\t\t&& last != XPathParser.LEFTPARENTHESIS\r\n\t\t\t\t\t\t&& last != XPathParser.LEFTBRACKET\r\n\t\t\t\t\t\t&& last != XPathParser.AND\r\n\t\t\t\t\t\t&& last != XPathParser.OR\r\n\t\t\t\t\t\t&& last != XPathParser.MOD\r\n\t\t\t\t\t\t&& last != XPathParser.DIV\r\n\t\t\t\t\t\t&& last != XPathParser.MULTIPLYOPERATOR\r\n\t\t\t\t\t\t&& last != XPathParser.SLASH\r\n\t\t\t\t\t\t&& last != XPathParser.DOUBLESLASH\r\n\t\t\t\t\t\t&& last != XPathParser.BAR\r\n\t\t\t\t\t\t&& last != XPathParser.PLUS\r\n\t\t\t\t\t\t&& last != XPathParser.MINUS\r\n\t\t\t\t\t\t&& last != XPathParser.EQUALS\r\n\t\t\t\t\t\t&& last != XPathParser.NOTEQUAL\r\n\t\t\t\t\t\t&& last != XPathParser.LESSTHAN\r\n\t\t\t\t\t\t&& last != XPathParser.LESSTHANOREQUAL\r\n\t\t\t\t\t\t&& last != XPathParser.GREATERTHAN\r\n\t\t\t\t\t\t&& last != XPathParser.GREATERTHANOREQUAL) {\r\n\t\t\t\t\tif (name == \"and\") {\r\n\t\t\t\t\t\ttypes.push(XPathParser.AND);\r\n\t\t\t\t\t\tvalues.push(name);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (name == \"or\") {\r\n\t\t\t\t\t\ttypes.push(XPathParser.OR);\r\n\t\t\t\t\t\tvalues.push(name);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (name == \"mod\") {\r\n\t\t\t\t\t\ttypes.push(XPathParser.MOD);\r\n\t\t\t\t\t\tvalues.push(name);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (name == \"div\") {\r\n\t\t\t\t\t\ttypes.push(XPathParser.DIV);\r\n\t\t\t\t\t\tvalues.push(name);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (c == ':') {\r\n\t\t\t\tif (s.charAt(pos) == '*') {\r\n\t\t\t\t\ttypes.push(XPathParser.NCNAMECOLONASTERISK);\r\n\t\t\t\t\tvalues.push(name + \":*\");\r\n\t\t\t\t\tpos++;\r\n\t\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (s.charAt(pos) == '_' || Utilities.isLetter(s.charCodeAt(pos))) {\r\n\t\t\t\t\tname += ':';\r\n\t\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t\t\twhile (Utilities.isNCNameChar(c.charCodeAt(0))) {\r\n\t\t\t\t\t\tname += c;\r\n\t\t\t\t\t\tc = s.charAt(pos++);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (c == '(') {\r\n\t\t\t\t\t\ttypes.push(XPathParser.FUNCTIONNAME);\r\n\t\t\t\t\t\tvalues.push(name);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttypes.push(XPathParser.QNAME);\r\n\t\t\t\t\tvalues.push(name);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (s.charAt(pos) == ':') {\r\n\t\t\t\t\ttypes.push(XPathParser.AXISNAME);\r\n\t\t\t\t\tvalues.push(name);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (c == '(') {\r\n\t\t\t\tif (name == \"comment\" || name == \"text\" || name == \"node\") {\r\n\t\t\t\t\ttypes.push(XPathParser.NODETYPE);\r\n\t\t\t\t\tvalues.push(name);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (name == \"processing-instruction\") {\r\n\t\t\t\t\tif (s.charAt(pos) == ')') {\r\n\t\t\t\t\t\ttypes.push(XPathParser.NODETYPE);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttypes.push(XPathParser.PROCESSINGINSTRUCTIONWITHLITERAL);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalues.push(name);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\ttypes.push(XPathParser.FUNCTIONNAME);\r\n\t\t\t\tvalues.push(name);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\ttypes.push(XPathParser.QNAME);\r\n\t\t\tvalues.push(name);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"Unexpected character \" + c);\r\n\t}\r\n\ttypes.push(1);\r\n\tvalues.push(\"[EOF]\");\r\n\treturn [types, values];\r\n};\r\n\r\nXPathParser.SHIFT = 's';\r\nXPathParser.REDUCE = 'r';\r\nXPathParser.ACCEPT = 'a';\r\n\r\nXPathParser.prototype.parse = function(s) {\r\n\tvar types;\r\n\tvar values;\r\n\tvar res = this.tokenize(s);\r\n\tif (res == undefined) {\r\n\t\treturn undefined;\r\n\t}\r\n\ttypes = res[0];\r\n\tvalues = res[1];\r\n\tvar tokenPos = 0;\r\n\tvar state = [];\r\n\tvar tokenType = [];\r\n\tvar tokenValue = [];\r\n\tvar s;\r\n\tvar a;\r\n\tvar t;\r\n\r\n\tstate.push(0);\r\n\ttokenType.push(1);\r\n\ttokenValue.push(\"_S\");\r\n\r\n\ta = types[tokenPos];\r\n\tt = values[tokenPos++];\r\n\twhile (1) {\r\n\t\ts = state[state.length - 1];\r\n\t\tswitch (XPathParser.actionTable[s].charAt(a - 1)) {\r\n\t\t\tcase XPathParser.SHIFT:\r\n\t\t\t\ttokenType.push(-a);\r\n\t\t\t\ttokenValue.push(t);\r\n\t\t\t\tstate.push(XPathParser.actionTableNumber[s].charCodeAt(a - 1) - 32);\r\n\t\t\t\ta = types[tokenPos];\r\n\t\t\t\tt = values[tokenPos++];\r\n\t\t\t\tbreak;\r\n\t\t\tcase XPathParser.REDUCE:\r\n\t\t\t\tvar num = XPathParser.productions[XPathParser.actionTableNumber[s].charCodeAt(a - 1) - 32][1];\r\n\t\t\t\tvar rhs = [];\r\n\t\t\t\tfor (var i = 0; i < num; i++) {\r\n\t\t\t\t\ttokenType.pop();\r\n\t\t\t\t\trhs.unshift(tokenValue.pop());\r\n\t\t\t\t\tstate.pop();\r\n\t\t\t\t}\r\n\t\t\t\tvar s_ = state[state.length - 1];\r\n\t\t\t\ttokenType.push(XPathParser.productions[XPathParser.actionTableNumber[s].charCodeAt(a - 1) - 32][0]);\r\n\t\t\t\tif (this.reduceActions[XPathParser.actionTableNumber[s].charCodeAt(a - 1) - 32] == undefined) {\r\n\t\t\t\t\ttokenValue.push(rhs[0]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttokenValue.push(this.reduceActions[XPathParser.actionTableNumber[s].charCodeAt(a - 1) - 32](rhs));\r\n\t\t\t\t}\r\n\t\t\t\tstate.push(XPathParser.gotoTable[s_].charCodeAt(XPathParser.productions[XPathParser.actionTableNumber[s].charCodeAt(a - 1) - 32][0] - 2) - 33);\r\n\t\t\t\tbreak;\r\n\t\t\tcase XPathParser.ACCEPT:\r\n\t\t\t\treturn new XPath(tokenValue.pop());\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"XPath parse error\");\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// XPath /////////////////////////////////////////////////////////////////////\r\n\r\nXPath.prototype = new Object();\r\nXPath.prototype.constructor = XPath;\r\nXPath.superclass = Object.prototype;\r\n\r\nfunction XPath(e) {\r\n\tthis.expression = e;\r\n}\r\n\r\nXPath.prototype.toString = function() {\r\n\treturn this.expression.toString();\r\n};\r\n\r\nXPath.prototype.evaluate = function(c) {\r\n\tc.contextNode = c.expressionContextNode;\r\n\tc.contextSize = 1;\r\n\tc.contextPosition = 1;\r\n\tc.caseInsensitive = false;\r\n\tif (c.contextNode != null) {\r\n\t\tvar doc = c.contextNode;\r\n\t\tif (doc.nodeType != 9 /*Node.DOCUMENT_NODE*/) {\r\n\t\t\tdoc = doc.ownerDocument;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tc.caseInsensitive = doc.implementation.hasFeature(\"HTML\", \"2.0\");\r\n\t\t} catch (e) {\r\n\t\t\tc.caseInsensitive = true;\r\n\t\t}\r\n\t}\r\n\treturn this.expression.evaluate(c);\r\n};\r\n\r\nXPath.XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\r\nXPath.XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\r\n\r\n// Expression ////////////////////////////////////////////////////////////////\r\n\r\nExpression.prototype = new Object();\r\nExpression.prototype.constructor = Expression;\r\nExpression.superclass = Object.prototype;\r\n\r\nfunction Expression() {\r\n}\r\n\r\nExpression.prototype.init = function() {\r\n};\r\n\r\nExpression.prototype.toString = function() {\r\n\treturn \"<Expression>\";\r\n};\r\n\r\nExpression.prototype.evaluate = function(c) {\r\n\tthrow new Error(\"Could not evaluate expression.\");\r\n};\r\n\r\n// UnaryOperation ////////////////////////////////////////////////////////////\r\n\r\nUnaryOperation.prototype = new Expression();\r\nUnaryOperation.prototype.constructor = UnaryOperation;\r\nUnaryOperation.superclass = Expression.prototype;\r\n\r\nfunction UnaryOperation(rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(rhs);\r\n\t}\r\n}\r\n\r\nUnaryOperation.prototype.init = function(rhs) {\r\n\tthis.rhs = rhs;\r\n};\r\n\r\n// UnaryMinusOperation ///////////////////////////////////////////////////////\r\n\r\nUnaryMinusOperation.prototype = new UnaryOperation();\r\nUnaryMinusOperation.prototype.constructor = UnaryMinusOperation;\r\nUnaryMinusOperation.superclass = UnaryOperation.prototype;\r\n\r\nfunction UnaryMinusOperation(rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(rhs);\r\n\t}\r\n}\r\n\r\nUnaryMinusOperation.prototype.init = function(rhs) {\r\n\tUnaryMinusOperation.superclass.init.call(this, rhs);\r\n};\r\n\r\nUnaryMinusOperation.prototype.evaluate = function(c) {\r\n\treturn this.rhs.evaluate(c).number().negate();\r\n};\r\n\r\nUnaryMinusOperation.prototype.toString = function() {\r\n\treturn \"-\" + this.rhs.toString();\r\n};\r\n\r\n// BinaryOperation ///////////////////////////////////////////////////////////\r\n\r\nBinaryOperation.prototype = new Expression();\r\nBinaryOperation.prototype.constructor = BinaryOperation;\r\nBinaryOperation.superclass = Expression.prototype;\r\n\r\nfunction BinaryOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nBinaryOperation.prototype.init = function(lhs, rhs) {\r\n\tthis.lhs = lhs;\r\n\tthis.rhs = rhs;\r\n};\r\n\r\n// OrOperation ///////////////////////////////////////////////////////////////\r\n\r\nOrOperation.prototype = new BinaryOperation();\r\nOrOperation.prototype.constructor = OrOperation;\r\nOrOperation.superclass = BinaryOperation.prototype;\r\n\r\nfunction OrOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nOrOperation.prototype.init = function(lhs, rhs) {\r\n\tOrOperation.superclass.init.call(this, lhs, rhs);\r\n};\r\n\r\nOrOperation.prototype.toString = function() {\r\n\treturn \"(\" + this.lhs.toString() + \" or \" + this.rhs.toString() + \")\";\r\n};\r\n\r\nOrOperation.prototype.evaluate = function(c) {\r\n\tvar b = this.lhs.evaluate(c).bool();\r\n\tif (b.booleanValue()) {\r\n\t\treturn b;\r\n\t}\r\n\treturn this.rhs.evaluate(c).bool();\r\n};\r\n\r\n// AndOperation //////////////////////////////////////////////////////////////\r\n\r\nAndOperation.prototype = new BinaryOperation();\r\nAndOperation.prototype.constructor = AndOperation;\r\nAndOperation.superclass = BinaryOperation.prototype;\r\n\r\nfunction AndOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nAndOperation.prototype.init = function(lhs, rhs) {\r\n\tAndOperation.superclass.init.call(this, lhs, rhs);\r\n};\r\n\r\nAndOperation.prototype.toString = function() {\r\n\treturn \"(\" + this.lhs.toString() + \" and \" + this.rhs.toString() + \")\";\r\n};\r\n\r\nAndOperation.prototype.evaluate = function(c) {\r\n\tvar b = this.lhs.evaluate(c).bool();\r\n\tif (!b.booleanValue()) {\r\n\t\treturn b;\r\n\t}\r\n\treturn this.rhs.evaluate(c).bool();\r\n};\r\n\r\n// EqualsOperation ///////////////////////////////////////////////////////////\r\n\r\nEqualsOperation.prototype = new BinaryOperation();\r\nEqualsOperation.prototype.constructor = EqualsOperation;\r\nEqualsOperation.superclass = BinaryOperation.prototype;\r\n\r\nfunction EqualsOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nEqualsOperation.prototype.init = function(lhs, rhs) {\r\n\tEqualsOperation.superclass.init.call(this, lhs, rhs);\r\n};\r\n\r\nEqualsOperation.prototype.toString = function() {\r\n\treturn \"(\" + this.lhs.toString() + \" = \" + this.rhs.toString() + \")\";\r\n};\r\n\r\nEqualsOperation.prototype.evaluate = function(c) {\r\n\treturn this.lhs.evaluate(c).equals(this.rhs.evaluate(c));\r\n};\r\n\r\n// NotEqualOperation /////////////////////////////////////////////////////////\r\n\r\nNotEqualOperation.prototype = new BinaryOperation();\r\nNotEqualOperation.prototype.constructor = NotEqualOperation;\r\nNotEqualOperation.superclass = BinaryOperation.prototype;\r\n\r\nfunction NotEqualOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nNotEqualOperation.prototype.init = function(lhs, rhs) {\r\n\tNotEqualOperation.superclass.init.call(this, lhs, rhs);\r\n};\r\n\r\nNotEqualOperation.prototype.toString = function() {\r\n\treturn \"(\" + this.lhs.toString() + \" != \" + this.rhs.toString() + \")\";\r\n};\r\n\r\nNotEqualOperation.prototype.evaluate = function(c) {\r\n\treturn this.lhs.evaluate(c).notequal(this.rhs.evaluate(c));\r\n};\r\n\r\n// LessThanOperation /////////////////////////////////////////////////////////\r\n\r\nLessThanOperation.prototype = new BinaryOperation();\r\nLessThanOperation.prototype.constructor = LessThanOperation;\r\nLessThanOperation.superclass = BinaryOperation.prototype;\r\n\r\nfunction LessThanOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nLessThanOperation.prototype.init = function(lhs, rhs) {\r\n\tLessThanOperation.superclass.init.call(this, lhs, rhs);\r\n};\r\n\r\nLessThanOperation.prototype.evaluate = function(c) {\r\n\treturn this.lhs.evaluate(c).lessthan(this.rhs.evaluate(c));\r\n};\r\n\r\nLessThanOperation.prototype.toString = function() {\r\n\treturn \"(\" + this.lhs.toString() + \" < \" + this.rhs.toString() + \")\";\r\n};\r\n\r\n// GreaterThanOperation //////////////////////////////////////////////////////\r\n\r\nGreaterThanOperation.prototype = new BinaryOperation();\r\nGreaterThanOperation.prototype.constructor = GreaterThanOperation;\r\nGreaterThanOperation.superclass = BinaryOperation.prototype;\r\n\r\nfunction GreaterThanOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nGreaterThanOperation.prototype.init = function(lhs, rhs) {\r\n\tGreaterThanOperation.superclass.init.call(this, lhs, rhs);\r\n};\r\n\r\nGreaterThanOperation.prototype.evaluate = function(c) {\r\n\treturn this.lhs.evaluate(c).greaterthan(this.rhs.evaluate(c));\r\n};\r\n\r\nGreaterThanOperation.prototype.toString = function() {\r\n\treturn \"(\" + this.lhs.toString() + \" > \" + this.rhs.toString() + \")\";\r\n};\r\n\r\n// LessThanOrEqualOperation //////////////////////////////////////////////////\r\n\r\nLessThanOrEqualOperation.prototype = new BinaryOperation();\r\nLessThanOrEqualOperation.prototype.constructor = LessThanOrEqualOperation;\r\nLessThanOrEqualOperation.superclass = BinaryOperation.prototype;\r\n\r\nfunction LessThanOrEqualOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nLessThanOrEqualOperation.prototype.init = function(lhs, rhs) {\r\n\tLessThanOrEqualOperation.superclass.init.call(this, lhs, rhs);\r\n};\r\n\r\nLessThanOrEqualOperation.prototype.evaluate = function(c) {\r\n\treturn this.lhs.evaluate(c).lessthanorequal(this.rhs.evaluate(c));\r\n};\r\n\r\nLessThanOrEqualOperation.prototype.toString = function() {\r\n\treturn \"(\" + this.lhs.toString() + \" <= \" + this.rhs.toString() + \")\";\r\n};\r\n\r\n// GreaterThanOrEqualOperation ///////////////////////////////////////////////\r\n\r\nGreaterThanOrEqualOperation.prototype = new BinaryOperation();\r\nGreaterThanOrEqualOperation.prototype.constructor = GreaterThanOrEqualOperation;\r\nGreaterThanOrEqualOperation.superclass = BinaryOperation.prototype;\r\n\r\nfunction GreaterThanOrEqualOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nGreaterThanOrEqualOperation.prototype.init = function(lhs, rhs) {\r\n\tGreaterThanOrEqualOperation.superclass.init.call(this, lhs, rhs);\r\n};\r\n\r\nGreaterThanOrEqualOperation.prototype.evaluate = function(c) {\r\n\treturn this.lhs.evaluate(c).greaterthanorequal(this.rhs.evaluate(c));\r\n};\r\n\r\nGreaterThanOrEqualOperation.prototype.toString = function() {\r\n\treturn \"(\" + this.lhs.toString() + \" >= \" + this.rhs.toString() + \")\";\r\n};\r\n\r\n// PlusOperation /////////////////////////////////////////////////////////////\r\n\r\nPlusOperation.prototype = new BinaryOperation();\r\nPlusOperation.prototype.constructor = PlusOperation;\r\nPlusOperation.superclass = BinaryOperation.prototype;\r\n\r\nfunction PlusOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nPlusOperation.prototype.init = function(lhs, rhs) {\r\n\tPlusOperation.superclass.init.call(this, lhs, rhs);\r\n};\r\n\r\nPlusOperation.prototype.evaluate = function(c) {\r\n\treturn this.lhs.evaluate(c).number().plus(this.rhs.evaluate(c).number());\r\n};\r\n\r\nPlusOperation.prototype.toString = function() {\r\n\treturn \"(\" + this.lhs.toString() + \" + \" + this.rhs.toString() + \")\";\r\n};\r\n\r\n// MinusOperation ////////////////////////////////////////////////////////////\r\n\r\nMinusOperation.prototype = new BinaryOperation();\r\nMinusOperation.prototype.constructor = MinusOperation;\r\nMinusOperation.superclass = BinaryOperation.prototype;\r\n\r\nfunction MinusOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nMinusOperation.prototype.init = function(lhs, rhs) {\r\n\tMinusOperation.superclass.init.call(this, lhs, rhs);\r\n};\r\n\r\nMinusOperation.prototype.evaluate = function(c) {\r\n\treturn this.lhs.evaluate(c).number().minus(this.rhs.evaluate(c).number());\r\n};\r\n\r\nMinusOperation.prototype.toString = function() {\r\n\treturn \"(\" + this.lhs.toString() + \" - \" + this.rhs.toString() + \")\";\r\n};\r\n\r\n// MultiplyOperation /////////////////////////////////////////////////////////\r\n\r\nMultiplyOperation.prototype = new BinaryOperation();\r\nMultiplyOperation.prototype.constructor = MultiplyOperation;\r\nMultiplyOperation.superclass = BinaryOperation.prototype;\r\n\r\nfunction MultiplyOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nMultiplyOperation.prototype.init = function(lhs, rhs) {\r\n\tMultiplyOperation.superclass.init.call(this, lhs, rhs);\r\n};\r\n\r\nMultiplyOperation.prototype.evaluate = function(c) {\r\n\treturn this.lhs.evaluate(c).number().multiply(this.rhs.evaluate(c).number());\r\n};\r\n\r\nMultiplyOperation.prototype.toString = function() {\r\n\treturn \"(\" + this.lhs.toString() + \" * \" + this.rhs.toString() + \")\";\r\n};\r\n\r\n// DivOperation //////////////////////////////////////////////////////////////\r\n\r\nDivOperation.prototype = new BinaryOperation();\r\nDivOperation.prototype.constructor = DivOperation;\r\nDivOperation.superclass = BinaryOperation.prototype;\r\n\r\nfunction DivOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nDivOperation.prototype.init = function(lhs, rhs) {\r\n\tDivOperation.superclass.init.call(this, lhs, rhs);\r\n};\r\n\r\nDivOperation.prototype.evaluate = function(c) {\r\n\treturn this.lhs.evaluate(c).number().div(this.rhs.evaluate(c).number());\r\n};\r\n\r\nDivOperation.prototype.toString = function() {\r\n\treturn \"(\" + this.lhs.toString() + \" div \" + this.rhs.toString() + \")\";\r\n};\r\n\r\n// ModOperation //////////////////////////////////////////////////////////////\r\n\r\nModOperation.prototype = new BinaryOperation();\r\nModOperation.prototype.constructor = ModOperation;\r\nModOperation.superclass = BinaryOperation.prototype;\r\n\r\nfunction ModOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nModOperation.prototype.init = function(lhs, rhs) {\r\n\tModOperation.superclass.init.call(this, lhs, rhs);\r\n};\r\n\r\nModOperation.prototype.evaluate = function(c) {\r\n\treturn this.lhs.evaluate(c).number().mod(this.rhs.evaluate(c).number());\r\n};\r\n\r\nModOperation.prototype.toString = function() {\r\n\treturn \"(\" + this.lhs.toString() + \" mod \" + this.rhs.toString() + \")\";\r\n};\r\n\r\n// BarOperation //////////////////////////////////////////////////////////////\r\n\r\nBarOperation.prototype = new BinaryOperation();\r\nBarOperation.prototype.constructor = BarOperation;\r\nBarOperation.superclass = BinaryOperation.prototype;\r\n\r\nfunction BarOperation(lhs, rhs) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(lhs, rhs);\r\n\t}\r\n}\r\n\r\nBarOperation.prototype.init = function(lhs, rhs) {\r\n\tBarOperation.superclass.init.call(this, lhs, rhs);\r\n};\r\n\r\nBarOperation.prototype.evaluate = function(c) {\r\n\treturn this.lhs.evaluate(c).nodeset().union(this.rhs.evaluate(c).nodeset());\r\n};\r\n\r\nBarOperation.prototype.toString = function() {\r\n\treturn this.lhs.toString() + \" | \" + this.rhs.toString();\r\n};\r\n\r\n// PathExpr //////////////////////////////////////////////////////////////////\r\n\r\nPathExpr.prototype = new Expression();\r\nPathExpr.prototype.constructor = PathExpr;\r\nPathExpr.superclass = Expression.prototype;\r\n\r\nfunction PathExpr(filter, filterPreds, locpath) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(filter, filterPreds, locpath);\r\n\t}\r\n}\r\n\r\nPathExpr.prototype.init = function(filter, filterPreds, locpath) {\r\n\tPathExpr.superclass.init.call(this);\r\n\tthis.filter = filter;\r\n\tthis.filterPredicates = filterPreds;\r\n\tthis.locationPath = locpath;\r\n};\r\n\r\n/**\r\n * Returns the topmost node of the tree containing node\r\n */\r\nfunction findRoot(node) {\r\n    while (node && node.parentNode) {\r\n        node = node.parentNode;\r\n    }\r\n\r\n    return node;\r\n}\r\n\r\n\r\nPathExpr.prototype.evaluate = function(c) {\r\n\tvar nodes;\r\n\tvar xpc = new XPathContext();\r\n\txpc.variableResolver = c.variableResolver;\r\n\txpc.functionResolver = c.functionResolver;\r\n\txpc.namespaceResolver = c.namespaceResolver;\r\n\txpc.expressionContextNode = c.expressionContextNode;\r\n\txpc.virtualRoot = c.virtualRoot;\r\n\txpc.caseInsensitive = c.caseInsensitive;\r\n\tif (this.filter == null) {\r\n\t\tnodes = [ c.contextNode ];\r\n\t} else {\r\n\t\tvar ns = this.filter.evaluate(c);\r\n\t\tif (!Utilities.instance_of(ns, XNodeSet)) {\r\n\t\t\tif (this.filterPredicates != null && this.filterPredicates.length > 0 || this.locationPath != null) {\r\n\t\t\t\tthrow new Error(\"Path expression filter must evaluate to a nodset if predicates or location path are used\");\r\n\t\t\t}\r\n\t\t\treturn ns;\r\n\t\t}\r\n\t\tnodes = ns.toUnsortedArray();\r\n\t\tif (this.filterPredicates != null) {\r\n\t\t\t// apply each of the predicates in turn\r\n\t\t\tfor (var j = 0; j < this.filterPredicates.length; j++) {\r\n\t\t\t\tvar pred = this.filterPredicates[j];\r\n\t\t\t\tvar newNodes = [];\r\n\t\t\t\txpc.contextSize = nodes.length;\r\n\t\t\t\tfor (xpc.contextPosition = 1; xpc.contextPosition <= xpc.contextSize; xpc.contextPosition++) {\r\n\t\t\t\t\txpc.contextNode = nodes[xpc.contextPosition - 1];\r\n\t\t\t\t\tif (this.predicateMatches(pred, xpc)) {\r\n\t\t\t\t\t\tnewNodes.push(xpc.contextNode);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tnodes = newNodes;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (this.locationPath != null) {\r\n\t\tif (this.locationPath.absolute) {\r\n\t\t\tif (nodes[0].nodeType != 9 /*Node.DOCUMENT_NODE*/) {\r\n\t\t\t\tif (xpc.virtualRoot != null) {\r\n\t\t\t\t\tnodes = [ xpc.virtualRoot ];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (nodes[0].ownerDocument == null) {\r\n\t\t\t\t\t\t// IE 5.5 doesn't have ownerDocument?\r\n\t\t\t\t\t\tvar n = nodes[0];\r\n\t\t\t\t\t\twhile (n.parentNode != null) {\r\n\t\t\t\t\t\t\tn = n.parentNode;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnodes = [ n ];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnodes = [ nodes[0].ownerDocument ];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnodes = [ nodes[0] ];\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var i = 0; i < this.locationPath.steps.length; i++) {\r\n\t\t\tvar step = this.locationPath.steps[i];\r\n\t\t\tvar newNodes = [];\r\n\t\t\tfor (var j = 0; j < nodes.length; j++) {\r\n\t\t\t\txpc.contextNode = nodes[j];\r\n\t\t\t\tswitch (step.axis) {\r\n\t\t\t\t\tcase Step.ANCESTOR:\r\n\t\t\t\t\t\t// look at all the ancestor nodes\r\n\t\t\t\t\t\tif (xpc.contextNode === xpc.virtualRoot) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar m;\r\n\t\t\t\t\t\tif (xpc.contextNode.nodeType == 2 /*Node.ATTRIBUTE_NODE*/) {\r\n\t\t\t\t\t\t\tm = this.getOwnerElement(xpc.contextNode);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tm = xpc.contextNode.parentNode;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile (m != null) {\r\n\t\t\t\t\t\t\tif (step.nodeTest.matches(m, xpc)) {\r\n\t\t\t\t\t\t\t\tnewNodes.push(m);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (m === xpc.virtualRoot) {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tm = m.parentNode;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase Step.ANCESTORORSELF:\r\n\t\t\t\t\t\t// look at all the ancestor nodes and the current node\r\n\t\t\t\t\t\tfor (var m = xpc.contextNode; m != null; m = m.nodeType == 2 /*Node.ATTRIBUTE_NODE*/ ? this.getOwnerElement(m) : m.parentNode) {\r\n\t\t\t\t\t\t\tif (step.nodeTest.matches(m, xpc)) {\r\n\t\t\t\t\t\t\t\tnewNodes.push(m);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (m === xpc.virtualRoot) {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase Step.ATTRIBUTE:\r\n\t\t\t\t\t\t// look at the attributes\r\n\t\t\t\t\t\tvar nnm = xpc.contextNode.attributes;\r\n\t\t\t\t\t\tif (nnm != null) {\r\n\t\t\t\t\t\t\tfor (var k = 0; k < nnm.length; k++) {\r\n\t\t\t\t\t\t\t\tvar m = nnm.item(k);\r\n\t\t\t\t\t\t\t\tif (step.nodeTest.matches(m, xpc)) {\r\n\t\t\t\t\t\t\t\t\tnewNodes.push(m);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase Step.CHILD:\r\n\t\t\t\t\t\t// look at all child elements\r\n\t\t\t\t\t\tfor (var m = xpc.contextNode.firstChild; m != null; m = m.nextSibling) {\r\n\t\t\t\t\t\t\tif (step.nodeTest.matches(m, xpc)) {\r\n\t\t\t\t\t\t\t\tnewNodes.push(m);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase Step.DESCENDANT:\r\n\t\t\t\t\t\t// look at all descendant nodes\r\n\t\t\t\t\t\tvar st = [ xpc.contextNode.firstChild ];\r\n\t\t\t\t\t\twhile (st.length > 0) {\r\n\t\t\t\t\t\t\tfor (var m = st.pop(); m != null; ) {\r\n\t\t\t\t\t\t\t\tif (step.nodeTest.matches(m, xpc)) {\r\n\t\t\t\t\t\t\t\t\tnewNodes.push(m);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (m.firstChild != null) {\r\n\t\t\t\t\t\t\t\t\tst.push(m.nextSibling);\r\n\t\t\t\t\t\t\t\t\tm = m.firstChild;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tm = m.nextSibling;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase Step.DESCENDANTORSELF:\r\n\t\t\t\t\t\t// look at self\r\n\t\t\t\t\t\tif (step.nodeTest.matches(xpc.contextNode, xpc)) {\r\n\t\t\t\t\t\t\tnewNodes.push(xpc.contextNode);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// look at all descendant nodes\r\n\t\t\t\t\t\tvar st = [ xpc.contextNode.firstChild ];\r\n\t\t\t\t\t\twhile (st.length > 0) {\r\n\t\t\t\t\t\t\tfor (var m = st.pop(); m != null; ) {\r\n\t\t\t\t\t\t\t\tif (step.nodeTest.matches(m, xpc)) {\r\n\t\t\t\t\t\t\t\t\tnewNodes.push(m);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (m.firstChild != null) {\r\n\t\t\t\t\t\t\t\t\tst.push(m.nextSibling);\r\n\t\t\t\t\t\t\t\t\tm = m.firstChild;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tm = m.nextSibling;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase Step.FOLLOWING:\r\n\t\t\t\t\t\tif (xpc.contextNode === xpc.virtualRoot) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar st = [];\r\n\t\t\t\t\t\tif (xpc.contextNode.firstChild != null) {\r\n\t\t\t\t\t\t\tst.unshift(xpc.contextNode.firstChild);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tst.unshift(xpc.contextNode.nextSibling);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (var m = xpc.contextNode.parentNode; m != null && m.nodeType != 9 /*Node.DOCUMENT_NODE*/ && m !== xpc.virtualRoot; m = m.parentNode) {\r\n\t\t\t\t\t\t\tst.unshift(m.nextSibling);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\tfor (var m = st.pop(); m != null; ) {\r\n\t\t\t\t\t\t\t\tif (step.nodeTest.matches(m, xpc)) {\r\n\t\t\t\t\t\t\t\t\tnewNodes.push(m);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (m.firstChild != null) {\r\n\t\t\t\t\t\t\t\t\tst.push(m.nextSibling);\r\n\t\t\t\t\t\t\t\t\tm = m.firstChild;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tm = m.nextSibling;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} while (st.length > 0);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase Step.FOLLOWINGSIBLING:\r\n\t\t\t\t\t\tif (xpc.contextNode === xpc.virtualRoot) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (var m = xpc.contextNode.nextSibling; m != null; m = m.nextSibling) {\r\n\t\t\t\t\t\t\tif (step.nodeTest.matches(m, xpc)) {\r\n\t\t\t\t\t\t\t\tnewNodes.push(m);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase Step.NAMESPACE:\r\n\t\t\t\t\t\tvar n = {};\r\n\t\t\t\t\t\tif (xpc.contextNode.nodeType == 1 /*Node.ELEMENT_NODE*/) {\r\n\t\t\t\t\t\t\tn[\"xml\"] = XPath.XML_NAMESPACE_URI;\r\n\t\t\t\t\t\t\tn[\"xmlns\"] = XPath.XMLNS_NAMESPACE_URI;\r\n\t\t\t\t\t\t\tfor (var m = xpc.contextNode; m != null && m.nodeType == 1 /*Node.ELEMENT_NODE*/; m = m.parentNode) {\r\n\t\t\t\t\t\t\t\tfor (var k = 0; k < m.attributes.length; k++) {\r\n\t\t\t\t\t\t\t\t\tvar attr = m.attributes.item(k);\r\n\t\t\t\t\t\t\t\t\tvar nm = String(attr.name);\r\n\t\t\t\t\t\t\t\t\tif (nm == \"xmlns\") {\r\n\t\t\t\t\t\t\t\t\t\tif (n[\"\"] == undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\tn[\"\"] = attr.value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else if (nm.length > 6 && nm.substring(0, 6) == \"xmlns:\") {\r\n\t\t\t\t\t\t\t\t\t\tvar pre = nm.substring(6, nm.length);\r\n\t\t\t\t\t\t\t\t\t\tif (n[pre] == undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\tn[pre] = attr.value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor (var pre in n) {\r\n\t\t\t\t\t\t\t\tvar nsn = new XPathNamespace(pre, n[pre], xpc.contextNode);\r\n\t\t\t\t\t\t\t\tif (step.nodeTest.matches(nsn, xpc)) {\r\n\t\t\t\t\t\t\t\t\tnewNodes.push(nsn);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase Step.PARENT:\r\n\t\t\t\t\t\tm = null;\r\n\t\t\t\t\t\tif (xpc.contextNode !== xpc.virtualRoot) {\r\n\t\t\t\t\t\t\tif (xpc.contextNode.nodeType == 2 /*Node.ATTRIBUTE_NODE*/) {\r\n\t\t\t\t\t\t\t\tm = this.getOwnerElement(xpc.contextNode);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tm = xpc.contextNode.parentNode;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (m != null && step.nodeTest.matches(m, xpc)) {\r\n\t\t\t\t\t\t\tnewNodes.push(m);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase Step.PRECEDING:\r\n\t\t\t\t\t\tvar st;\r\n\t\t\t\t\t\tif (xpc.virtualRoot != null) {\r\n\t\t\t\t\t\t\tst = [ xpc.virtualRoot ];\r\n\t\t\t\t\t\t} else {\r\n                            // cannot rely on .ownerDocument because the node may be in a document fragment\r\n                            st = [findRoot(xpc.contextNode)];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\touter: while (st.length > 0) {\r\n\t\t\t\t\t\t\tfor (var m = st.pop(); m != null; ) {\r\n\t\t\t\t\t\t\t\tif (m == xpc.contextNode) {\r\n\t\t\t\t\t\t\t\t\tbreak outer;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (step.nodeTest.matches(m, xpc)) {\r\n\t\t\t\t\t\t\t\t\tnewNodes.unshift(m);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (m.firstChild != null) {\r\n\t\t\t\t\t\t\t\t\tst.push(m.nextSibling);\r\n\t\t\t\t\t\t\t\t\tm = m.firstChild;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tm = m.nextSibling;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase Step.PRECEDINGSIBLING:\r\n\t\t\t\t\t\tif (xpc.contextNode === xpc.virtualRoot) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (var m = xpc.contextNode.previousSibling; m != null; m = m.previousSibling) {\r\n\t\t\t\t\t\t\tif (step.nodeTest.matches(m, xpc)) {\r\n\t\t\t\t\t\t\t\tnewNodes.push(m);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase Step.SELF:\r\n\t\t\t\t\t\tif (step.nodeTest.matches(xpc.contextNode, xpc)) {\r\n\t\t\t\t\t\t\tnewNodes.push(xpc.contextNode);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnodes = newNodes;\r\n\t\t\t// apply each of the predicates in turn\r\n\t\t\tfor (var j = 0; j < step.predicates.length; j++) {\r\n\t\t\t\tvar pred = step.predicates[j];\r\n\t\t\t\tvar newNodes = [];\r\n\t\t\t\txpc.contextSize = nodes.length;\r\n\t\t\t\tfor (xpc.contextPosition = 1; xpc.contextPosition <= xpc.contextSize; xpc.contextPosition++) {\r\n\t\t\t\t\txpc.contextNode = nodes[xpc.contextPosition - 1];\r\n\t\t\t\t\tif (this.predicateMatches(pred, xpc)) {\r\n\t\t\t\t\t\tnewNodes.push(xpc.contextNode);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tnodes = newNodes;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvar ns = new XNodeSet();\r\n\tns.addArray(nodes);\r\n\treturn ns;\r\n};\r\n\r\nPathExpr.prototype.predicateMatches = function(pred, c) {\r\n\tvar res = pred.evaluate(c);\r\n\tif (Utilities.instance_of(res, XNumber)) {\r\n\t\treturn c.contextPosition == res.numberValue();\r\n\t}\r\n\treturn res.booleanValue();\r\n};\r\n\r\nPathExpr.prototype.toString = function() {\r\n\tif (this.filter != undefined) {\r\n\t\tvar s = this.filter.toString();\r\n\t\tif (Utilities.instance_of(this.filter, XString)) {\r\n\t\t\ts = \"'\" + s + \"'\";\r\n\t\t}\r\n\t\tif (this.filterPredicates != undefined) {\r\n\t\t\tfor (var i = 0; i < this.filterPredicates.length; i++) {\r\n\t\t\t\ts = s + \"[\" + this.filterPredicates[i].toString() + \"]\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.locationPath != undefined) {\r\n\t\t\tif (!this.locationPath.absolute) {\r\n\t\t\t\ts += \"/\";\r\n\t\t\t}\r\n\t\t\ts += this.locationPath.toString();\r\n\t\t}\r\n\t\treturn s;\r\n\t}\r\n\treturn this.locationPath.toString();\r\n};\r\n\r\nPathExpr.prototype.getOwnerElement = function(n) {\r\n\t// DOM 2 has ownerElement\r\n\tif (n.ownerElement) {\r\n\t\treturn n.ownerElement;\r\n\t}\r\n\t// DOM 1 Internet Explorer can use selectSingleNode (ironically)\r\n\ttry {\r\n\t\tif (n.selectSingleNode) {\r\n\t\t\treturn n.selectSingleNode(\"..\");\r\n\t\t}\r\n\t} catch (e) {\r\n\t}\r\n\t// Other DOM 1 implementations must use this egregious search\r\n\tvar doc = n.nodeType == 9 /*Node.DOCUMENT_NODE*/\r\n\t\t\t? n\r\n\t\t\t: n.ownerDocument;\r\n\tvar elts = doc.getElementsByTagName(\"*\");\r\n\tfor (var i = 0; i < elts.length; i++) {\r\n\t\tvar elt = elts.item(i);\r\n\t\tvar nnm = elt.attributes;\r\n\t\tfor (var j = 0; j < nnm.length; j++) {\r\n\t\t\tvar an = nnm.item(j);\r\n\t\t\tif (an === n) {\r\n\t\t\t\treturn elt;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\n// LocationPath //////////////////////////////////////////////////////////////\r\n\r\nLocationPath.prototype = new Object();\r\nLocationPath.prototype.constructor = LocationPath;\r\nLocationPath.superclass = Object.prototype;\r\n\r\nfunction LocationPath(abs, steps) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(abs, steps);\r\n\t}\r\n}\r\n\r\nLocationPath.prototype.init = function(abs, steps) {\r\n\tthis.absolute = abs;\r\n\tthis.steps = steps;\r\n};\r\n\r\nLocationPath.prototype.toString = function() {\r\n\tvar s;\r\n\tif (this.absolute) {\r\n\t\ts = \"/\";\r\n\t} else {\r\n\t\ts = \"\";\r\n\t}\r\n\tfor (var i = 0; i < this.steps.length; i++) {\r\n\t\tif (i != 0) {\r\n\t\t\ts += \"/\";\r\n\t\t}\r\n\t\ts += this.steps[i].toString();\r\n\t}\r\n\treturn s;\r\n};\r\n\r\n// Step //////////////////////////////////////////////////////////////////////\r\n\r\nStep.prototype = new Object();\r\nStep.prototype.constructor = Step;\r\nStep.superclass = Object.prototype;\r\n\r\nfunction Step(axis, nodetest, preds) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(axis, nodetest, preds);\r\n\t}\r\n}\r\n\r\nStep.prototype.init = function(axis, nodetest, preds) {\r\n\tthis.axis = axis;\r\n\tthis.nodeTest = nodetest;\r\n\tthis.predicates = preds;\r\n};\r\n\r\nStep.prototype.toString = function() {\r\n\tvar s;\r\n\tswitch (this.axis) {\r\n\t\tcase Step.ANCESTOR:\r\n\t\t\ts = \"ancestor\";\r\n\t\t\tbreak;\r\n\t\tcase Step.ANCESTORORSELF:\r\n\t\t\ts = \"ancestor-or-self\";\r\n\t\t\tbreak;\r\n\t\tcase Step.ATTRIBUTE:\r\n\t\t\ts = \"attribute\";\r\n\t\t\tbreak;\r\n\t\tcase Step.CHILD:\r\n\t\t\ts = \"child\";\r\n\t\t\tbreak;\r\n\t\tcase Step.DESCENDANT:\r\n\t\t\ts = \"descendant\";\r\n\t\t\tbreak;\r\n\t\tcase Step.DESCENDANTORSELF:\r\n\t\t\ts = \"descendant-or-self\";\r\n\t\t\tbreak;\r\n\t\tcase Step.FOLLOWING:\r\n\t\t\ts = \"following\";\r\n\t\t\tbreak;\r\n\t\tcase Step.FOLLOWINGSIBLING:\r\n\t\t\ts = \"following-sibling\";\r\n\t\t\tbreak;\r\n\t\tcase Step.NAMESPACE:\r\n\t\t\ts = \"namespace\";\r\n\t\t\tbreak;\r\n\t\tcase Step.PARENT:\r\n\t\t\ts = \"parent\";\r\n\t\t\tbreak;\r\n\t\tcase Step.PRECEDING:\r\n\t\t\ts = \"preceding\";\r\n\t\t\tbreak;\r\n\t\tcase Step.PRECEDINGSIBLING:\r\n\t\t\ts = \"preceding-sibling\";\r\n\t\t\tbreak;\r\n\t\tcase Step.SELF:\r\n\t\t\ts = \"self\";\r\n\t\t\tbreak;\r\n\t}\r\n\ts += \"::\";\r\n\ts += this.nodeTest.toString();\r\n\tfor (var i = 0; i < this.predicates.length; i++) {\r\n\t\ts += \"[\" + this.predicates[i].toString() + \"]\";\r\n\t}\r\n\treturn s;\r\n};\r\n\r\nStep.ANCESTOR = 0;\r\nStep.ANCESTORORSELF = 1;\r\nStep.ATTRIBUTE = 2;\r\nStep.CHILD = 3;\r\nStep.DESCENDANT = 4;\r\nStep.DESCENDANTORSELF = 5;\r\nStep.FOLLOWING = 6;\r\nStep.FOLLOWINGSIBLING = 7;\r\nStep.NAMESPACE = 8;\r\nStep.PARENT = 9;\r\nStep.PRECEDING = 10;\r\nStep.PRECEDINGSIBLING = 11;\r\nStep.SELF = 12;\r\n\r\n// NodeTest //////////////////////////////////////////////////////////////////\r\n\r\nNodeTest.prototype = new Object();\r\nNodeTest.prototype.constructor = NodeTest;\r\nNodeTest.superclass = Object.prototype;\r\n\r\nfunction NodeTest(type, value) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(type, value);\r\n\t}\r\n}\r\n\r\nNodeTest.prototype.init = function(type, value) {\r\n\tthis.type = type;\r\n\tthis.value = value;\r\n};\r\n\r\nNodeTest.prototype.toString = function() {\r\n\tswitch (this.type) {\r\n\t\tcase NodeTest.NAMETESTANY:\r\n\t\t\treturn \"*\";\r\n\t\tcase NodeTest.NAMETESTPREFIXANY:\r\n\t\t\treturn this.value + \":*\";\r\n\t\tcase NodeTest.NAMETESTRESOLVEDANY:\r\n\t\t\treturn \"{\" + this.value + \"}*\";\r\n\t\tcase NodeTest.NAMETESTQNAME:\r\n\t\t\treturn this.value;\r\n\t\tcase NodeTest.NAMETESTRESOLVEDNAME:\r\n\t\t\treturn \"{\" + this.namespaceURI + \"}\" + this.value;\r\n\t\tcase NodeTest.COMMENT:\r\n\t\t\treturn \"comment()\";\r\n\t\tcase NodeTest.TEXT:\r\n\t\t\treturn \"text()\";\r\n\t\tcase NodeTest.PI:\r\n\t\t\tif (this.value != undefined) {\r\n\t\t\t\treturn \"processing-instruction(\\\"\" + this.value + \"\\\")\";\r\n\t\t\t}\r\n\t\t\treturn \"processing-instruction()\";\r\n\t\tcase NodeTest.NODE:\r\n\t\t\treturn \"node()\";\r\n\t}\r\n\treturn \"<unknown nodetest type>\";\r\n};\r\n\r\nNodeTest.prototype.matches = function (n, xpc) {\r\n    var nType = n.nodeType;\r\n\r\n\tswitch (this.type) {\r\n\t\tcase NodeTest.NAMETESTANY:\r\n\t\t\tif (nType === 2 /*Node.ATTRIBUTE_NODE*/\r\n\t\t\t\t\t|| nType === 1 /*Node.ELEMENT_NODE*/\r\n\t\t\t\t\t|| nType === XPathNamespace.XPATH_NAMESPACE_NODE) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\tcase NodeTest.NAMETESTPREFIXANY:\r\n\t\t\tif (nType === 2 /*Node.ATTRIBUTE_NODE*/ || nType === 1 /*Node.ELEMENT_NODE*/) {\r\n\t\t\t\tvar ns = xpc.namespaceResolver.getNamespace(this.value, xpc.expressionContextNode);\r\n\t\t\t\tif (ns == null) {\r\n\t\t\t\t\tthrow new Error(\"Cannot resolve QName \" + this.value);\r\n\t\t\t\t}\r\n\t\t\t\treturn ns === (n.namespaceURI || '');\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\tcase NodeTest.NAMETESTQNAME:\r\n\t\t\tif (nType === 2 /*Node.ATTRIBUTE_NODE*/\r\n\t\t\t\t\t|| nType === 1 /*Node.ELEMENT_NODE*/\r\n\t\t\t\t\t|| nType === XPathNamespace.XPATH_NAMESPACE_NODE) {\r\n\t\t\t\tvar test = Utilities.resolveQName(this.value, xpc.namespaceResolver, xpc.expressionContextNode, false);\r\n\t\t\t\tif (test[0] == null) {\r\n\t\t\t\t\tthrow new Error(\"Cannot resolve QName \" + this.value);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttest[0] = String(test[0]) || null;\r\n\t\t\t\ttest[1] = String(test[1]);\r\n\r\n\t\t\t\tvar node = [\r\n                    String(n.namespaceURI || '') || null,\r\n                    // localName will be null if the node was created with DOM1 createElement()\r\n                    String(n.localName || n.nodeName)\r\n                ];\r\n\r\n\t\t\t\tif (xpc.caseInsensitive) {\r\n\t\t\t\t\treturn test[0] === node[0] && test[1].toLowerCase() === node[1].toLowerCase();\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn test[0] === node[0] && test[1] === node[1];\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\tcase NodeTest.COMMENT:\r\n\t\t\treturn nType === 8 /*Node.COMMENT_NODE*/;\r\n\t\tcase NodeTest.TEXT:\r\n\t\t\treturn nType === 3 /*Node.TEXT_NODE*/ || nType == 4 /*Node.CDATA_SECTION_NODE*/;\r\n\t\tcase NodeTest.PI:\r\n\t\t\treturn nType === 7 /*Node.PROCESSING_INSTRUCTION_NODE*/\r\n\t\t\t\t&& (this.value == null || n.nodeName == this.value);\r\n\t\tcase NodeTest.NODE:\r\n\t\t\treturn nType === 9 /*Node.DOCUMENT_NODE*/\r\n\t\t\t\t|| nType === 1 /*Node.ELEMENT_NODE*/\r\n\t\t\t\t|| nType === 2 /*Node.ATTRIBUTE_NODE*/\r\n\t\t\t\t|| nType === 3 /*Node.TEXT_NODE*/\r\n\t\t\t\t|| nType === 4 /*Node.CDATA_SECTION_NODE*/\r\n\t\t\t\t|| nType === 8 /*Node.COMMENT_NODE*/\r\n\t\t\t\t|| nType === 7 /*Node.PROCESSING_INSTRUCTION_NODE*/;\r\n\t}\r\n\treturn false;\r\n};\r\n\r\nNodeTest.NAMETESTANY = 0;\r\nNodeTest.NAMETESTPREFIXANY = 1;\r\nNodeTest.NAMETESTQNAME = 2;\r\nNodeTest.COMMENT = 3;\r\nNodeTest.TEXT = 4;\r\nNodeTest.PI = 5;\r\nNodeTest.NODE = 6;\r\n\r\n// VariableReference /////////////////////////////////////////////////////////\r\n\r\nVariableReference.prototype = new Expression();\r\nVariableReference.prototype.constructor = VariableReference;\r\nVariableReference.superclass = Expression.prototype;\r\n\r\nfunction VariableReference(v) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(v);\r\n\t}\r\n}\r\n\r\nVariableReference.prototype.init = function(v) {\r\n\tthis.variable = v;\r\n};\r\n\r\nVariableReference.prototype.toString = function() {\r\n\treturn \"$\" + this.variable;\r\n};\r\n\r\nVariableReference.prototype.evaluate = function(c) {\r\n    var parts = Utilities.resolveQName(this.variable, c.namespaceResolver, c.contextNode, false);\r\n\r\n    if (parts[0] == null) {\r\n        throw new Error(\"Cannot resolve QName \" + fn);\r\n    }\r\n\tvar result = c.variableResolver.getVariable(parts[1], parts[0]);\r\n    if (!result) {\r\n        throw XPathException.fromMessage(\"Undeclared variable: \" + this.toString());\r\n    }\r\n    return result;\r\n};\r\n\r\n// FunctionCall //////////////////////////////////////////////////////////////\r\n\r\nFunctionCall.prototype = new Expression();\r\nFunctionCall.prototype.constructor = FunctionCall;\r\nFunctionCall.superclass = Expression.prototype;\r\n\r\nfunction FunctionCall(fn, args) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(fn, args);\r\n\t}\r\n}\r\n\r\nFunctionCall.prototype.init = function(fn, args) {\r\n\tthis.functionName = fn;\r\n\tthis.arguments = args;\r\n};\r\n\r\nFunctionCall.prototype.toString = function() {\r\n\tvar s = this.functionName + \"(\";\r\n\tfor (var i = 0; i < this.arguments.length; i++) {\r\n\t\tif (i > 0) {\r\n\t\t\ts += \", \";\r\n\t\t}\r\n\t\ts += this.arguments[i].toString();\r\n\t}\r\n\treturn s + \")\";\r\n};\r\n\r\nFunctionCall.prototype.evaluate = function(c) {\r\n    var f = FunctionResolver.getFunctionFromContext(this.functionName, c);\r\n\r\n    if (!f) {\r\n\t\tthrow new Error(\"Unknown function \" + this.functionName);\r\n\t}\r\n\r\n    var a = [c].concat(this.arguments);\r\n\treturn f.apply(c.functionResolver.thisArg, a);\r\n};\r\n\r\n// XString ///////////////////////////////////////////////////////////////////\r\n\r\nXString.prototype = new Expression();\r\nXString.prototype.constructor = XString;\r\nXString.superclass = Expression.prototype;\r\n\r\nfunction XString(s) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(s);\r\n\t}\r\n}\r\n\r\nXString.prototype.init = function(s) {\r\n\tthis.str = String(s);\r\n};\r\n\r\nXString.prototype.toString = function() {\r\n\treturn this.str;\r\n};\r\n\r\nXString.prototype.evaluate = function(c) {\r\n\treturn this;\r\n};\r\n\r\nXString.prototype.string = function() {\r\n\treturn this;\r\n};\r\n\r\nXString.prototype.number = function() {\r\n\treturn new XNumber(this.str);\r\n};\r\n\r\nXString.prototype.bool = function() {\r\n\treturn new XBoolean(this.str);\r\n};\r\n\r\nXString.prototype.nodeset = function() {\r\n\tthrow new Error(\"Cannot convert string to nodeset\");\r\n};\r\n\r\nXString.prototype.stringValue = function() {\r\n\treturn this.str;\r\n};\r\n\r\nXString.prototype.numberValue = function() {\r\n\treturn this.number().numberValue();\r\n};\r\n\r\nXString.prototype.booleanValue = function() {\r\n\treturn this.bool().booleanValue();\r\n};\r\n\r\nXString.prototype.equals = function(r) {\r\n\tif (Utilities.instance_of(r, XBoolean)) {\r\n\t\treturn this.bool().equals(r);\r\n\t}\r\n\tif (Utilities.instance_of(r, XNumber)) {\r\n\t\treturn this.number().equals(r);\r\n\t}\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithString(this, Operators.equals);\r\n\t}\r\n\treturn new XBoolean(this.str == r.str);\r\n};\r\n\r\nXString.prototype.notequal = function(r) {\r\n\tif (Utilities.instance_of(r, XBoolean)) {\r\n\t\treturn this.bool().notequal(r);\r\n\t}\r\n\tif (Utilities.instance_of(r, XNumber)) {\r\n\t\treturn this.number().notequal(r);\r\n\t}\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithString(this, Operators.notequal);\r\n\t}\r\n\treturn new XBoolean(this.str != r.str);\r\n};\r\n\r\nXString.prototype.lessthan = function(r) {\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithNumber(this.number(), Operators.greaterthanorequal);\r\n\t}\r\n\treturn this.number().lessthan(r.number());\r\n};\r\n\r\nXString.prototype.greaterthan = function(r) {\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithNumber(this.number(), Operators.lessthanorequal);\r\n\t}\r\n\treturn this.number().greaterthan(r.number());\r\n};\r\n\r\nXString.prototype.lessthanorequal = function(r) {\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithNumber(this.number(), Operators.greaterthan);\r\n\t}\r\n\treturn this.number().lessthanorequal(r.number());\r\n};\r\n\r\nXString.prototype.greaterthanorequal = function(r) {\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithNumber(this.number(), Operators.lessthan);\r\n\t}\r\n\treturn this.number().greaterthanorequal(r.number());\r\n};\r\n\r\n// XNumber ///////////////////////////////////////////////////////////////////\r\n\r\nXNumber.prototype = new Expression();\r\nXNumber.prototype.constructor = XNumber;\r\nXNumber.superclass = Expression.prototype;\r\n\r\nfunction XNumber(n) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(n);\r\n\t}\r\n}\r\n\r\nXNumber.prototype.init = function(n) {\r\n\tthis.num = typeof n === \"string\" ? this.parse(n) : Number(n);\r\n};\r\n\r\nXNumber.prototype.numberFormat = /^\\s*-?[0-9]*\\.?[0-9]+\\s*$/;\r\n\r\nXNumber.prototype.parse = function(s) {\r\n    // XPath representation of numbers is more restrictive than what Number() or parseFloat() allow\r\n    return this.numberFormat.test(s) ? parseFloat(s) : Number.NaN;\r\n};\r\n\r\nfunction padSmallNumber(numberStr) {\r\n\tvar parts = numberStr.split('e-');\r\n\tvar base = parts[0].replace('.', '');\r\n\tvar exponent = Number(parts[1]);\r\n\t\r\n\tfor (var i = 0; i < exponent - 1; i += 1) {\r\n\t\tbase = '0' + base;\r\n\t}\r\n\t\r\n\treturn '0.' + base;\r\n}\r\n\r\nfunction padLargeNumber(numberStr) {\r\n\tvar parts = numberStr.split('e');\r\n\tvar base = parts[0].replace('.', '');\r\n\tvar exponent = Number(parts[1]);\r\n\tvar zerosToAppend = exponent + 1 - base.length;\r\n\t\r\n\tfor (var i = 0; i < zerosToAppend; i += 1){\r\n\t\tbase += '0';\r\n\t}\r\n\t\r\n\treturn base;\r\n}\r\n\r\nXNumber.prototype.toString = function() {\r\n\tvar strValue = this.num.toString();\r\n\r\n\tif (strValue.indexOf('e-') !== -1) {\r\n\t\treturn padSmallNumber(strValue);\r\n\t}\r\n    \r\n\tif (strValue.indexOf('e') !== -1) {\r\n\t\treturn padLargeNumber(strValue);\r\n\t}\r\n\t\r\n\treturn strValue;\r\n};\r\n\r\nXNumber.prototype.evaluate = function(c) {\r\n\treturn this;\r\n};\r\n\r\nXNumber.prototype.string = function() {\r\n\t\r\n\t\r\n\treturn new XString(this.toString());\r\n};\r\n\r\nXNumber.prototype.number = function() {\r\n\treturn this;\r\n};\r\n\r\nXNumber.prototype.bool = function() {\r\n\treturn new XBoolean(this.num);\r\n};\r\n\r\nXNumber.prototype.nodeset = function() {\r\n\tthrow new Error(\"Cannot convert number to nodeset\");\r\n};\r\n\r\nXNumber.prototype.stringValue = function() {\r\n\treturn this.string().stringValue();\r\n};\r\n\r\nXNumber.prototype.numberValue = function() {\r\n\treturn this.num;\r\n};\r\n\r\nXNumber.prototype.booleanValue = function() {\r\n\treturn this.bool().booleanValue();\r\n};\r\n\r\nXNumber.prototype.negate = function() {\r\n\treturn new XNumber(-this.num);\r\n};\r\n\r\nXNumber.prototype.equals = function(r) {\r\n\tif (Utilities.instance_of(r, XBoolean)) {\r\n\t\treturn this.bool().equals(r);\r\n\t}\r\n\tif (Utilities.instance_of(r, XString)) {\r\n\t\treturn this.equals(r.number());\r\n\t}\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithNumber(this, Operators.equals);\r\n\t}\r\n\treturn new XBoolean(this.num == r.num);\r\n};\r\n\r\nXNumber.prototype.notequal = function(r) {\r\n\tif (Utilities.instance_of(r, XBoolean)) {\r\n\t\treturn this.bool().notequal(r);\r\n\t}\r\n\tif (Utilities.instance_of(r, XString)) {\r\n\t\treturn this.notequal(r.number());\r\n\t}\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithNumber(this, Operators.notequal);\r\n\t}\r\n\treturn new XBoolean(this.num != r.num);\r\n};\r\n\r\nXNumber.prototype.lessthan = function(r) {\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithNumber(this, Operators.greaterthanorequal);\r\n\t}\r\n\tif (Utilities.instance_of(r, XBoolean) || Utilities.instance_of(r, XString)) {\r\n\t\treturn this.lessthan(r.number());\r\n\t}\r\n\treturn new XBoolean(this.num < r.num);\r\n};\r\n\r\nXNumber.prototype.greaterthan = function(r) {\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithNumber(this, Operators.lessthanorequal);\r\n\t}\r\n\tif (Utilities.instance_of(r, XBoolean) || Utilities.instance_of(r, XString)) {\r\n\t\treturn this.greaterthan(r.number());\r\n\t}\r\n\treturn new XBoolean(this.num > r.num);\r\n};\r\n\r\nXNumber.prototype.lessthanorequal = function(r) {\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithNumber(this, Operators.greaterthan);\r\n\t}\r\n\tif (Utilities.instance_of(r, XBoolean) || Utilities.instance_of(r, XString)) {\r\n\t\treturn this.lessthanorequal(r.number());\r\n\t}\r\n\treturn new XBoolean(this.num <= r.num);\r\n};\r\n\r\nXNumber.prototype.greaterthanorequal = function(r) {\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithNumber(this, Operators.lessthan);\r\n\t}\r\n\tif (Utilities.instance_of(r, XBoolean) || Utilities.instance_of(r, XString)) {\r\n\t\treturn this.greaterthanorequal(r.number());\r\n\t}\r\n\treturn new XBoolean(this.num >= r.num);\r\n};\r\n\r\nXNumber.prototype.plus = function(r) {\r\n\treturn new XNumber(this.num + r.num);\r\n};\r\n\r\nXNumber.prototype.minus = function(r) {\r\n\treturn new XNumber(this.num - r.num);\r\n};\r\n\r\nXNumber.prototype.multiply = function(r) {\r\n\treturn new XNumber(this.num * r.num);\r\n};\r\n\r\nXNumber.prototype.div = function(r) {\r\n\treturn new XNumber(this.num / r.num);\r\n};\r\n\r\nXNumber.prototype.mod = function(r) {\r\n\treturn new XNumber(this.num % r.num);\r\n};\r\n\r\n// XBoolean //////////////////////////////////////////////////////////////////\r\n\r\nXBoolean.prototype = new Expression();\r\nXBoolean.prototype.constructor = XBoolean;\r\nXBoolean.superclass = Expression.prototype;\r\n\r\nfunction XBoolean(b) {\r\n\tif (arguments.length > 0) {\r\n\t\tthis.init(b);\r\n\t}\r\n}\r\n\r\nXBoolean.prototype.init = function(b) {\r\n\tthis.b = Boolean(b);\r\n};\r\n\r\nXBoolean.prototype.toString = function() {\r\n\treturn this.b.toString();\r\n};\r\n\r\nXBoolean.prototype.evaluate = function(c) {\r\n\treturn this;\r\n};\r\n\r\nXBoolean.prototype.string = function() {\r\n\treturn new XString(this.b);\r\n};\r\n\r\nXBoolean.prototype.number = function() {\r\n\treturn new XNumber(this.b);\r\n};\r\n\r\nXBoolean.prototype.bool = function() {\r\n\treturn this;\r\n};\r\n\r\nXBoolean.prototype.nodeset = function() {\r\n\tthrow new Error(\"Cannot convert boolean to nodeset\");\r\n};\r\n\r\nXBoolean.prototype.stringValue = function() {\r\n\treturn this.string().stringValue();\r\n};\r\n\r\nXBoolean.prototype.numberValue = function() {\r\n\treturn this.num().numberValue();\r\n};\r\n\r\nXBoolean.prototype.booleanValue = function() {\r\n\treturn this.b;\r\n};\r\n\r\nXBoolean.prototype.not = function() {\r\n\treturn new XBoolean(!this.b);\r\n};\r\n\r\nXBoolean.prototype.equals = function(r) {\r\n\tif (Utilities.instance_of(r, XString) || Utilities.instance_of(r, XNumber)) {\r\n\t\treturn this.equals(r.bool());\r\n\t}\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithBoolean(this, Operators.equals);\r\n\t}\r\n\treturn new XBoolean(this.b == r.b);\r\n};\r\n\r\nXBoolean.prototype.notequal = function(r) {\r\n\tif (Utilities.instance_of(r, XString) || Utilities.instance_of(r, XNumber)) {\r\n\t\treturn this.notequal(r.bool());\r\n\t}\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithBoolean(this, Operators.notequal);\r\n\t}\r\n\treturn new XBoolean(this.b != r.b);\r\n};\r\n\r\nXBoolean.prototype.lessthan = function(r) {\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithNumber(this.number(), Operators.greaterthanorequal);\r\n\t}\r\n\treturn this.number().lessthan(r.number());\r\n};\r\n\r\nXBoolean.prototype.greaterthan = function(r) {\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithNumber(this.number(), Operators.lessthanorequal);\r\n\t}\r\n\treturn this.number().greaterthan(r.number());\r\n};\r\n\r\nXBoolean.prototype.lessthanorequal = function(r) {\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithNumber(this.number(), Operators.greaterthan);\r\n\t}\r\n\treturn this.number().lessthanorequal(r.number());\r\n};\r\n\r\nXBoolean.prototype.greaterthanorequal = function(r) {\r\n\tif (Utilities.instance_of(r, XNodeSet)) {\r\n\t\treturn r.compareWithNumber(this.number(), Operators.lessthan);\r\n\t}\r\n\treturn this.number().greaterthanorequal(r.number());\r\n};\r\n\r\n// AVLTree ///////////////////////////////////////////////////////////////////\r\n\r\nAVLTree.prototype = new Object();\r\nAVLTree.prototype.constructor = AVLTree;\r\nAVLTree.superclass = Object.prototype;\r\n\r\nfunction AVLTree(n) {\r\n\tthis.init(n);\r\n}\r\n\r\nAVLTree.prototype.init = function(n) {\r\n\tthis.left = null;\r\n    this.right = null;\r\n\tthis.node = n;\r\n\tthis.depth = 1;\r\n};\r\n\r\nAVLTree.prototype.balance = function() {\r\n    var ldepth = this.left  == null ? 0 : this.left.depth;\r\n    var rdepth = this.right == null ? 0 : this.right.depth;\r\n\r\n\tif (ldepth > rdepth + 1) {\r\n        // LR or LL rotation\r\n        var lldepth = this.left.left  == null ? 0 : this.left.left.depth;\r\n        var lrdepth = this.left.right == null ? 0 : this.left.right.depth;\r\n\r\n        if (lldepth < lrdepth) {\r\n            // LR rotation consists of a RR rotation of the left child\r\n            this.left.rotateRR();\r\n            // plus a LL rotation of this node, which happens anyway\r\n        }\r\n        this.rotateLL();\r\n    } else if (ldepth + 1 < rdepth) {\r\n        // RR or RL rorarion\r\n\t\tvar rrdepth = this.right.right == null ? 0 : this.right.right.depth;\r\n\t\tvar rldepth = this.right.left  == null ? 0 : this.right.left.depth;\r\n\r\n        if (rldepth > rrdepth) {\r\n            // RR rotation consists of a LL rotation of the right child\r\n            this.right.rotateLL();\r\n            // plus a RR rotation of this node, which happens anyway\r\n        }\r\n        this.rotateRR();\r\n    }\r\n};\r\n\r\nAVLTree.prototype.rotateLL = function() {\r\n    // the left side is too long => rotate from the left (_not_ leftwards)\r\n    var nodeBefore = this.node;\r\n    var rightBefore = this.right;\r\n    this.node = this.left.node;\r\n    this.right = this.left;\r\n    this.left = this.left.left;\r\n    this.right.left = this.right.right;\r\n    this.right.right = rightBefore;\r\n    this.right.node = nodeBefore;\r\n    this.right.updateInNewLocation();\r\n    this.updateInNewLocation();\r\n};\r\n\r\nAVLTree.prototype.rotateRR = function() {\r\n    // the right side is too long => rotate from the right (_not_ rightwards)\r\n    var nodeBefore = this.node;\r\n    var leftBefore = this.left;\r\n    this.node = this.right.node;\r\n    this.left = this.right;\r\n    this.right = this.right.right;\r\n    this.left.right = this.left.left;\r\n    this.left.left = leftBefore;\r\n    this.left.node = nodeBefore;\r\n    this.left.updateInNewLocation();\r\n    this.updateInNewLocation();\r\n};\r\n\r\nAVLTree.prototype.updateInNewLocation = function() {\r\n    this.getDepthFromChildren();\r\n};\r\n\r\nAVLTree.prototype.getDepthFromChildren = function() {\r\n    this.depth = this.node == null ? 0 : 1;\r\n    if (this.left != null) {\r\n        this.depth = this.left.depth + 1;\r\n    }\r\n    if (this.right != null && this.depth <= this.right.depth) {\r\n        this.depth = this.right.depth + 1;\r\n    }\r\n};\r\n\r\nfunction nodeOrder(n1, n2) {\r\n\tif (n1 === n2) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (n1.compareDocumentPosition) {\r\n\t    var cpos = n1.compareDocumentPosition(n2);\r\n\r\n        if (cpos & 0x01) {\r\n            // not in the same document; return an arbitrary result (is there a better way to do this)\r\n            return 1;\r\n        }\r\n        if (cpos & 0x0A) {\r\n            // n2 precedes or contains n1\r\n            return 1;\r\n        }\r\n        if (cpos & 0x14) {\r\n            // n2 follows or is contained by n1\r\n            return -1;\r\n        }\r\n\r\n\t    return 0;\r\n\t}\r\n\r\n\tvar d1 = 0,\r\n\t    d2 = 0;\r\n\tfor (var m1 = n1; m1 != null; m1 = m1.parentNode || m1.ownerElement) {\r\n\t\td1++;\r\n\t}\r\n\tfor (var m2 = n2; m2 != null; m2 = m2.parentNode || m2.ownerElement) {\r\n\t\td2++;\r\n\t}\r\n\r\n    // step up to same depth\r\n\tif (d1 > d2) {\r\n\t\twhile (d1 > d2) {\r\n\t\t\tn1 = n1.parentNode || n1.ownerElement;\r\n\t\t\td1--;\r\n\t\t}\r\n\t\tif (n1 === n2) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t} else if (d2 > d1) {\r\n\t\twhile (d2 > d1) {\r\n\t\t\tn2 = n2.parentNode || n2.ownerElement;\r\n\t\t\td2--;\r\n\t\t}\r\n\t\tif (n1 === n2) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\r\n    var n1Par = n1.parentNode || n1.ownerElement,\r\n        n2Par = n2.parentNode || n2.ownerElement;\r\n\r\n    // find common parent\r\n\twhile (n1Par !== n2Par) {\r\n\t\tn1 = n1Par;\r\n\t\tn2 = n2Par;\r\n\t\tn1Par = n1.parentNode || n1.ownerElement;\r\n\t    n2Par = n2.parentNode || n2.ownerElement;\r\n\t}\r\n    \r\n    var n1isAttr = Utilities.isAttribute(n1);\r\n    var n2isAttr = Utilities.isAttribute(n2);\r\n    \r\n    if (n1isAttr && !n2isAttr) {\r\n        return -1;\r\n    }\r\n    if (!n1isAttr && n2isAttr) {\r\n        return 1;\r\n    }\r\n    \r\n    if(n1Par) {\r\n\t    var cn = n1isAttr ? n1Par.attributes : n1Par.childNodes,\r\n\t        len = cn.length;\r\n        for (var i = 0; i < len; i += 1) {\r\n            var n = cn[i];\r\n            if (n === n1) {\r\n                return -1;\r\n            }\r\n            if (n === n2) {\r\n                return 1;\r\n            }\r\n        }\r\n    }        \r\n    \r\n    throw new Error('Unexpected: could not determine node order');\r\n}\r\n\r\nAVLTree.prototype.add = function(n)  {\r\n\tif (n === this.node) {\r\n        return false;\r\n    }\r\n\r\n\tvar o = nodeOrder(n, this.node);\r\n\r\n    var ret = false;\r\n    if (o == -1) {\r\n        if (this.left == null) {\r\n            this.left = new AVLTree(n);\r\n            ret = true;\r\n        } else {\r\n            ret = this.left.add(n);\r\n            if (ret) {\r\n                this.balance();\r\n            }\r\n        }\r\n    } else if (o == 1) {\r\n        if (this.right == null) {\r\n            this.right = new AVLTree(n);\r\n            ret = true;\r\n        } else {\r\n            ret = this.right.add(n);\r\n            if (ret) {\r\n                this.balance();\r\n            }\r\n        }\r\n    }\r\n\r\n    if (ret) {\r\n        this.getDepthFromChildren();\r\n    }\r\n    return ret;\r\n};\r\n\r\n// XNodeSet //////////////////////////////////////////////////////////////////\r\n\r\nXNodeSet.prototype = new Expression();\r\nXNodeSet.prototype.constructor = XNodeSet;\r\nXNodeSet.superclass = Expression.prototype;\r\n\r\nfunction XNodeSet() {\r\n\tthis.init();\r\n}\r\n\r\nXNodeSet.prototype.init = function() {\r\n    this.tree = null;\r\n\tthis.nodes = [];\r\n\tthis.size = 0;\r\n};\r\n\r\nXNodeSet.prototype.toString = function() {\r\n\tvar p = this.first();\r\n\tif (p == null) {\r\n\t\treturn \"\";\r\n\t}\r\n\treturn this.stringForNode(p);\r\n};\r\n\r\nXNodeSet.prototype.evaluate = function(c) {\r\n\treturn this;\r\n};\r\n\r\nXNodeSet.prototype.string = function() {\r\n\treturn new XString(this.toString());\r\n};\r\n\r\nXNodeSet.prototype.stringValue = function() {\r\n\treturn this.toString();\r\n};\r\n\r\nXNodeSet.prototype.number = function() {\r\n\treturn new XNumber(this.string());\r\n};\r\n\r\nXNodeSet.prototype.numberValue = function() {\r\n\treturn Number(this.string());\r\n};\r\n\r\nXNodeSet.prototype.bool = function() {\r\n\treturn new XBoolean(this.booleanValue());\r\n};\r\n\r\nXNodeSet.prototype.booleanValue = function() {\r\n\treturn !!this.size;\r\n};\r\n\r\nXNodeSet.prototype.nodeset = function() {\r\n\treturn this;\r\n};\r\n\r\nXNodeSet.prototype.stringForNode = function(n) {\r\n\tif (n.nodeType == 9   /*Node.DOCUMENT_NODE*/ || \r\n        n.nodeType == 1   /*Node.ELEMENT_NODE */ || \r\n        n.nodeType === 11 /*Node.DOCUMENT_FRAGMENT*/) {\r\n\t\treturn this.stringForContainerNode(n);\r\n\t}\r\n    if (n.nodeType === 2 /* Node.ATTRIBUTE_NODE */) {\r\n        return n.value || n.nodeValue;\r\n    }\r\n\tif (n.isNamespaceNode) {\r\n\t\treturn n.namespace;\r\n\t}\r\n\treturn n.nodeValue;\r\n};\r\n\r\nXNodeSet.prototype.stringForContainerNode = function(n) {\r\n\tvar s = \"\";\r\n\tfor (var n2 = n.firstChild; n2 != null; n2 = n2.nextSibling) {\r\n        var nt = n2.nodeType;\r\n        //  Element,    Text,       CDATA,      Document,   Document Fragment\r\n        if (nt === 1 || nt === 3 || nt === 4 || nt === 9 || nt === 11) {\r\n            s += this.stringForNode(n2);\r\n        }\r\n\t}\r\n\treturn s;\r\n};\r\n\r\nXNodeSet.prototype.buildTree = function () {\r\n    if (!this.tree && this.nodes.length) {\r\n        this.tree = new AVLTree(this.nodes[0]);\r\n        for (var i = 1; i < this.nodes.length; i += 1) {\r\n            this.tree.add(this.nodes[i]);\r\n        }\r\n    }\r\n\r\n    return this.tree;\r\n};\r\n\r\nXNodeSet.prototype.first = function() {\r\n\tvar p = this.buildTree();\r\n\tif (p == null) {\r\n\t\treturn null;\r\n\t}\r\n\twhile (p.left != null) {\r\n\t\tp = p.left;\r\n\t}\r\n\treturn p.node;\r\n};\r\n\r\nXNodeSet.prototype.add = function(n) {\r\n    for (var i = 0; i < this.nodes.length; i += 1) {\r\n        if (n === this.nodes[i]) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    this.tree = null;\r\n    this.nodes.push(n);\r\n    this.size += 1;\r\n};\r\n\r\nXNodeSet.prototype.addArray = function(ns) {\r\n\tfor (var i = 0; i < ns.length; i += 1) {\r\n\t\tthis.add(ns[i]);\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns an array of the node set's contents in document order\r\n */\r\nXNodeSet.prototype.toArray = function() {\r\n\tvar a = [];\r\n\tthis.toArrayRec(this.buildTree(), a);\r\n\treturn a;\r\n};\r\n\r\nXNodeSet.prototype.toArrayRec = function(t, a) {\r\n\tif (t != null) {\r\n\t\tthis.toArrayRec(t.left, a);\r\n\t\ta.push(t.node);\r\n\t\tthis.toArrayRec(t.right, a);\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns an array of the node set's contents in arbitrary order\r\n */\r\nXNodeSet.prototype.toUnsortedArray = function () {\r\n    return this.nodes.slice();\r\n};\r\n\r\nXNodeSet.prototype.compareWithString = function(r, o) {\r\n\tvar a = this.toUnsortedArray();\r\n\tfor (var i = 0; i < a.length; i++) {\r\n\t\tvar n = a[i];\r\n\t\tvar l = new XString(this.stringForNode(n));\r\n\t\tvar res = o(l, r);\r\n\t\tif (res.booleanValue()) {\r\n\t\t\treturn res;\r\n\t\t}\r\n\t}\r\n\treturn new XBoolean(false);\r\n};\r\n\r\nXNodeSet.prototype.compareWithNumber = function(r, o) {\r\n\tvar a = this.toUnsortedArray();\r\n\tfor (var i = 0; i < a.length; i++) {\r\n\t\tvar n = a[i];\r\n\t\tvar l = new XNumber(this.stringForNode(n));\r\n\t\tvar res = o(l, r);\r\n\t\tif (res.booleanValue()) {\r\n\t\t\treturn res;\r\n\t\t}\r\n\t}\r\n\treturn new XBoolean(false);\r\n};\r\n\r\nXNodeSet.prototype.compareWithBoolean = function(r, o) {\r\n\treturn o(this.bool(), r);\r\n};\r\n\r\nXNodeSet.prototype.compareWithNodeSet = function(r, o) {\r\n\tvar arr = this.toUnsortedArray();\r\n\tvar oInvert = function (lop, rop) { return o(rop, lop); };\r\n\t\r\n\tfor (var i = 0; i < arr.length; i++) {\r\n\t\tvar l = new XString(this.stringForNode(arr[i]));\r\n\r\n\t\tvar res = r.compareWithString(l, oInvert);\r\n\t\tif (res.booleanValue()) {\r\n\t\t\treturn res;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn new XBoolean(false);\r\n};\r\n\r\nXNodeSet.prototype.equals = function(r) {\r\n\tif (Utilities.instance_of(r, XString)) {\r\n\t\treturn this.compareWithString(r, Operators.equals);\r\n\t}\r\n\tif (Utilities.instance_of(r, XNumber)) {\r\n\t\treturn this.compareWithNumber(r, Operators.equals);\r\n\t}\r\n\tif (Utilities.instance_of(r, XBoolean)) {\r\n\t\treturn this.compareWithBoolean(r, Operators.equals);\r\n\t}\r\n\treturn this.compareWithNodeSet(r, Operators.equals);\r\n};\r\n\r\nXNodeSet.prototype.notequal = function(r) {\r\n\tif (Utilities.instance_of(r, XString)) {\r\n\t\treturn this.compareWithString(r, Operators.notequal);\r\n\t}\r\n\tif (Utilities.instance_of(r, XNumber)) {\r\n\t\treturn this.compareWithNumber(r, Operators.notequal);\r\n\t}\r\n\tif (Utilities.instance_of(r, XBoolean)) {\r\n\t\treturn this.compareWithBoolean(r, Operators.notequal);\r\n\t}\r\n\treturn this.compareWithNodeSet(r, Operators.notequal);\r\n};\r\n\r\nXNodeSet.prototype.lessthan = function(r) {\r\n\tif (Utilities.instance_of(r, XString)) {\r\n\t\treturn this.compareWithNumber(r.number(), Operators.lessthan);\r\n\t}\r\n\tif (Utilities.instance_of(r, XNumber)) {\r\n\t\treturn this.compareWithNumber(r, Operators.lessthan);\r\n\t}\r\n\tif (Utilities.instance_of(r, XBoolean)) {\r\n\t\treturn this.compareWithBoolean(r, Operators.lessthan);\r\n\t}\r\n\treturn this.compareWithNodeSet(r, Operators.lessthan);\r\n};\r\n\r\nXNodeSet.prototype.greaterthan = function(r) {\r\n\tif (Utilities.instance_of(r, XString)) {\r\n\t\treturn this.compareWithNumber(r.number(), Operators.greaterthan);\r\n\t}\r\n\tif (Utilities.instance_of(r, XNumber)) {\r\n\t\treturn this.compareWithNumber(r, Operators.greaterthan);\r\n\t}\r\n\tif (Utilities.instance_of(r, XBoolean)) {\r\n\t\treturn this.compareWithBoolean(r, Operators.greaterthan);\r\n\t}\r\n\treturn this.compareWithNodeSet(r, Operators.greaterthan);\r\n};\r\n\r\nXNodeSet.prototype.lessthanorequal = function(r) {\r\n\tif (Utilities.instance_of(r, XString)) {\r\n\t\treturn this.compareWithNumber(r.number(), Operators.lessthanorequal);\r\n\t}\r\n\tif (Utilities.instance_of(r, XNumber)) {\r\n\t\treturn this.compareWithNumber(r, Operators.lessthanorequal);\r\n\t}\r\n\tif (Utilities.instance_of(r, XBoolean)) {\r\n\t\treturn this.compareWithBoolean(r, Operators.lessthanorequal);\r\n\t}\r\n\treturn this.compareWithNodeSet(r, Operators.lessthanorequal);\r\n};\r\n\r\nXNodeSet.prototype.greaterthanorequal = function(r) {\r\n\tif (Utilities.instance_of(r, XString)) {\r\n\t\treturn this.compareWithNumber(r.number(), Operators.greaterthanorequal);\r\n\t}\r\n\tif (Utilities.instance_of(r, XNumber)) {\r\n\t\treturn this.compareWithNumber(r, Operators.greaterthanorequal);\r\n\t}\r\n\tif (Utilities.instance_of(r, XBoolean)) {\r\n\t\treturn this.compareWithBoolean(r, Operators.greaterthanorequal);\r\n\t}\r\n\treturn this.compareWithNodeSet(r, Operators.greaterthanorequal);\r\n};\r\n\r\nXNodeSet.prototype.union = function(r) {\r\n\tvar ns = new XNodeSet();\r\n    ns.addArray(this.toUnsortedArray());\r\n\tns.addArray(r.toUnsortedArray());\r\n\treturn ns;\r\n};\r\n\r\n// XPathNamespace ////////////////////////////////////////////////////////////\r\n\r\nXPathNamespace.prototype = new Object();\r\nXPathNamespace.prototype.constructor = XPathNamespace;\r\nXPathNamespace.superclass = Object.prototype;\r\n\r\nfunction XPathNamespace(pre, ns, p) {\r\n\tthis.isXPathNamespace = true;\r\n\tthis.ownerDocument = p.ownerDocument;\r\n\tthis.nodeName = \"#namespace\";\r\n\tthis.prefix = pre;\r\n\tthis.localName = pre;\r\n\tthis.namespaceURI = ns;\r\n\tthis.nodeValue = ns;\r\n\tthis.ownerElement = p;\r\n\tthis.nodeType = XPathNamespace.XPATH_NAMESPACE_NODE;\r\n}\r\n\r\nXPathNamespace.prototype.toString = function() {\r\n\treturn \"{ \\\"\" + this.prefix + \"\\\", \\\"\" + this.namespaceURI + \"\\\" }\";\r\n};\r\n\r\n// Operators /////////////////////////////////////////////////////////////////\r\n\r\nvar Operators = new Object();\r\n\r\nOperators.equals = function(l, r) {\r\n\treturn l.equals(r);\r\n};\r\n\r\nOperators.notequal = function(l, r) {\r\n\treturn l.notequal(r);\r\n};\r\n\r\nOperators.lessthan = function(l, r) {\r\n\treturn l.lessthan(r);\r\n};\r\n\r\nOperators.greaterthan = function(l, r) {\r\n\treturn l.greaterthan(r);\r\n};\r\n\r\nOperators.lessthanorequal = function(l, r) {\r\n\treturn l.lessthanorequal(r);\r\n};\r\n\r\nOperators.greaterthanorequal = function(l, r) {\r\n\treturn l.greaterthanorequal(r);\r\n};\r\n\r\n// XPathContext //////////////////////////////////////////////////////////////\r\n\r\nXPathContext.prototype = new Object();\r\nXPathContext.prototype.constructor = XPathContext;\r\nXPathContext.superclass = Object.prototype;\r\n\r\nfunction XPathContext(vr, nr, fr) {\r\n\tthis.variableResolver = vr != null ? vr : new VariableResolver();\r\n\tthis.namespaceResolver = nr != null ? nr : new NamespaceResolver();\r\n\tthis.functionResolver = fr != null ? fr : new FunctionResolver();\r\n}\r\n\r\n// VariableResolver //////////////////////////////////////////////////////////\r\n\r\nVariableResolver.prototype = new Object();\r\nVariableResolver.prototype.constructor = VariableResolver;\r\nVariableResolver.superclass = Object.prototype;\r\n\r\nfunction VariableResolver() {\r\n}\r\n\r\nVariableResolver.prototype.getVariable = function(ln, ns) {\r\n\treturn null;\r\n};\r\n\r\n// FunctionResolver //////////////////////////////////////////////////////////\r\n\r\nFunctionResolver.prototype = new Object();\r\nFunctionResolver.prototype.constructor = FunctionResolver;\r\nFunctionResolver.superclass = Object.prototype;\r\n\r\nfunction FunctionResolver(thisArg) {\r\n\tthis.thisArg = thisArg != null ? thisArg : Functions;\r\n\tthis.functions = new Object();\r\n\tthis.addStandardFunctions();\r\n}\r\n\r\nFunctionResolver.prototype.addStandardFunctions = function() {\r\n\tthis.functions[\"{}last\"] = Functions.last;\r\n\tthis.functions[\"{}position\"] = Functions.position;\r\n\tthis.functions[\"{}count\"] = Functions.count;\r\n\tthis.functions[\"{}id\"] = Functions.id;\r\n\tthis.functions[\"{}local-name\"] = Functions.localName;\r\n\tthis.functions[\"{}namespace-uri\"] = Functions.namespaceURI;\r\n\tthis.functions[\"{}name\"] = Functions.name;\r\n\tthis.functions[\"{}string\"] = Functions.string;\r\n\tthis.functions[\"{}concat\"] = Functions.concat;\r\n\tthis.functions[\"{}starts-with\"] = Functions.startsWith;\r\n\tthis.functions[\"{}contains\"] = Functions.contains;\r\n\tthis.functions[\"{}substring-before\"] = Functions.substringBefore;\r\n\tthis.functions[\"{}substring-after\"] = Functions.substringAfter;\r\n\tthis.functions[\"{}substring\"] = Functions.substring;\r\n\tthis.functions[\"{}string-length\"] = Functions.stringLength;\r\n\tthis.functions[\"{}normalize-space\"] = Functions.normalizeSpace;\r\n\tthis.functions[\"{}translate\"] = Functions.translate;\r\n\tthis.functions[\"{}boolean\"] = Functions.boolean_;\r\n\tthis.functions[\"{}not\"] = Functions.not;\r\n\tthis.functions[\"{}true\"] = Functions.true_;\r\n\tthis.functions[\"{}false\"] = Functions.false_;\r\n\tthis.functions[\"{}lang\"] = Functions.lang;\r\n\tthis.functions[\"{}number\"] = Functions.number;\r\n\tthis.functions[\"{}sum\"] = Functions.sum;\r\n\tthis.functions[\"{}floor\"] = Functions.floor;\r\n\tthis.functions[\"{}ceiling\"] = Functions.ceiling;\r\n\tthis.functions[\"{}round\"] = Functions.round;\r\n};\r\n\r\nFunctionResolver.prototype.addFunction = function(ns, ln, f) {\r\n\tthis.functions[\"{\" + ns + \"}\" + ln] = f;\r\n};\r\n\r\nFunctionResolver.getFunctionFromContext = function(qName, context) {\r\n    var parts = Utilities.resolveQName(qName, context.namespaceResolver, context.contextNode, false);\r\n\r\n    if (parts[0] === null) {\r\n        throw new Error(\"Cannot resolve QName \" + name);\r\n    }\r\n\r\n    return context.functionResolver.getFunction(parts[1], parts[0]);\r\n};\r\n\r\nFunctionResolver.prototype.getFunction = function(localName, namespace) {\r\n\treturn this.functions[\"{\" + namespace + \"}\" + localName];\r\n};\r\n\r\n// NamespaceResolver /////////////////////////////////////////////////////////\r\n\r\nNamespaceResolver.prototype = new Object();\r\nNamespaceResolver.prototype.constructor = NamespaceResolver;\r\nNamespaceResolver.superclass = Object.prototype;\r\n\r\nfunction NamespaceResolver() {\r\n}\r\n\r\nNamespaceResolver.prototype.getNamespace = function(prefix, n) {\r\n\tif (prefix == \"xml\") {\r\n\t\treturn XPath.XML_NAMESPACE_URI;\r\n\t} else if (prefix == \"xmlns\") {\r\n\t\treturn XPath.XMLNS_NAMESPACE_URI;\r\n\t}\r\n\tif (n.nodeType == 9 /*Node.DOCUMENT_NODE*/) {\r\n\t\tn = n.documentElement;\r\n\t} else if (n.nodeType == 2 /*Node.ATTRIBUTE_NODE*/) {\r\n\t\tn = PathExpr.prototype.getOwnerElement(n);\r\n\t} else if (n.nodeType != 1 /*Node.ELEMENT_NODE*/) {\r\n\t\tn = n.parentNode;\r\n\t}\r\n\twhile (n != null && n.nodeType == 1 /*Node.ELEMENT_NODE*/) {\r\n\t\tvar nnm = n.attributes;\r\n\t\tfor (var i = 0; i < nnm.length; i++) {\r\n\t\t\tvar a = nnm.item(i);\r\n\t\t\tvar aname = a.name || a.nodeName;\r\n\t\t\tif ((aname === \"xmlns\" && prefix === \"\")\r\n\t\t\t\t\t|| aname === \"xmlns:\" + prefix) {\r\n\t\t\t\treturn String(a.value || a.nodeValue);\r\n\t\t\t}\r\n\t\t}\r\n\t\tn = n.parentNode;\r\n\t}\r\n\treturn null;\r\n};\r\n\r\n// Functions /////////////////////////////////////////////////////////////////\r\n\r\nvar Functions = new Object();\r\n\r\nFunctions.last = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length != 1) {\r\n\t\tthrow new Error(\"Function last expects ()\");\r\n\t}\r\n\treturn new XNumber(c.contextSize);\r\n};\r\n\r\nFunctions.position = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length != 1) {\r\n\t\tthrow new Error(\"Function position expects ()\");\r\n\t}\r\n\treturn new XNumber(c.contextPosition);\r\n};\r\n\r\nFunctions.count = function() {\r\n\tvar c = arguments[0];\r\n\tvar ns;\r\n\tif (arguments.length != 2 || !Utilities.instance_of(ns = arguments[1].evaluate(c), XNodeSet)) {\r\n\t\tthrow new Error(\"Function count expects (node-set)\");\r\n\t}\r\n\treturn new XNumber(ns.size);\r\n};\r\n\r\nFunctions.id = function() {\r\n\tvar c = arguments[0];\r\n\tvar id;\r\n\tif (arguments.length != 2) {\r\n\t\tthrow new Error(\"Function id expects (object)\");\r\n\t}\r\n\tid = arguments[1].evaluate(c);\r\n\tif (Utilities.instance_of(id, XNodeSet)) {\r\n\t\tid = id.toArray().join(\" \");\r\n\t} else {\r\n\t\tid = id.stringValue();\r\n\t}\r\n\tvar ids = id.split(/[\\x0d\\x0a\\x09\\x20]+/);\r\n\tvar count = 0;\r\n\tvar ns = new XNodeSet();\r\n\tvar doc = c.contextNode.nodeType == 9 /*Node.DOCUMENT_NODE*/\r\n\t\t\t? c.contextNode\r\n\t\t\t: c.contextNode.ownerDocument;\r\n\tfor (var i = 0; i < ids.length; i++) {\r\n\t\tvar n;\r\n\t\tif (doc.getElementById) {\r\n\t\t\tn = doc.getElementById(ids[i]);\r\n\t\t} else {\r\n\t\t\tn = Utilities.getElementById(doc, ids[i]);\r\n\t\t}\r\n\t\tif (n != null) {\r\n\t\t\tns.add(n);\r\n\t\t\tcount++;\r\n\t\t}\r\n\t}\r\n\treturn ns;\r\n};\r\n\r\nFunctions.localName = function() {\r\n\tvar c = arguments[0];\r\n\tvar n;\r\n\tif (arguments.length == 1) {\r\n\t\tn = c.contextNode;\r\n\t} else if (arguments.length == 2) {\r\n\t\tn = arguments[1].evaluate(c).first();\r\n\t} else {\r\n\t\tthrow new Error(\"Function local-name expects (node-set?)\");\r\n\t}\r\n\tif (n == null) {\r\n\t\treturn new XString(\"\");\r\n\t}\r\n\r\n\treturn new XString(n.localName ||     //  standard elements and attributes\r\n\t                   n.baseName  ||     //  IE\r\n\t\t\t\t\t   n.target    ||     //  processing instructions\r\n                       n.nodeName  ||     //  DOM1 elements\r\n\t\t\t\t\t   \"\");               //  fallback\r\n};\r\n\r\nFunctions.namespaceURI = function() {\r\n\tvar c = arguments[0];\r\n\tvar n;\r\n\tif (arguments.length == 1) {\r\n\t\tn = c.contextNode;\r\n\t} else if (arguments.length == 2) {\r\n\t\tn = arguments[1].evaluate(c).first();\r\n\t} else {\r\n\t\tthrow new Error(\"Function namespace-uri expects (node-set?)\");\r\n\t}\r\n\tif (n == null) {\r\n\t\treturn new XString(\"\");\r\n\t}\r\n\treturn new XString(n.namespaceURI);\r\n};\r\n\r\nFunctions.name = function() {\r\n\tvar c = arguments[0];\r\n\tvar n;\r\n\tif (arguments.length == 1) {\r\n\t\tn = c.contextNode;\r\n\t} else if (arguments.length == 2) {\r\n\t\tn = arguments[1].evaluate(c).first();\r\n\t} else {\r\n\t\tthrow new Error(\"Function name expects (node-set?)\");\r\n\t}\r\n\tif (n == null) {\r\n\t\treturn new XString(\"\");\r\n\t}\r\n\tif (n.nodeType == 1 /*Node.ELEMENT_NODE*/) {\r\n\t\treturn new XString(n.nodeName);\r\n\t} else if (n.nodeType == 2 /*Node.ATTRIBUTE_NODE*/) {\r\n\t\treturn new XString(n.name || n.nodeName);\r\n\t} else if (n.nodeType === 7 /*Node.PROCESSING_INSTRUCTION_NODE*/) {\r\n\t    return new XString(n.target || n.nodeName);\r\n\t} else if (n.localName == null) {\r\n\t\treturn new XString(\"\");\r\n\t} else {\r\n\t\treturn new XString(n.localName);\r\n\t}\r\n};\r\n\r\nFunctions.string = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length == 1) {\r\n\t\treturn new XString(XNodeSet.prototype.stringForNode(c.contextNode));\r\n\t} else if (arguments.length == 2) {\r\n\t\treturn arguments[1].evaluate(c).string();\r\n\t}\r\n\tthrow new Error(\"Function string expects (object?)\");\r\n};\r\n\r\nFunctions.concat = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length < 3) {\r\n\t\tthrow new Error(\"Function concat expects (string, string, string*)\");\r\n\t}\r\n\tvar s = \"\";\r\n\tfor (var i = 1; i < arguments.length; i++) {\r\n\t\ts += arguments[i].evaluate(c).stringValue();\r\n\t}\r\n\treturn new XString(s);\r\n};\r\n\r\nFunctions.startsWith = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length != 3) {\r\n\t\tthrow new Error(\"Function startsWith expects (string, string)\");\r\n\t}\r\n\tvar s1 = arguments[1].evaluate(c).stringValue();\r\n\tvar s2 = arguments[2].evaluate(c).stringValue();\r\n\treturn new XBoolean(s1.substring(0, s2.length) == s2);\r\n};\r\n\r\nFunctions.contains = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length != 3) {\r\n\t\tthrow new Error(\"Function contains expects (string, string)\");\r\n\t}\r\n\tvar s1 = arguments[1].evaluate(c).stringValue();\r\n\tvar s2 = arguments[2].evaluate(c).stringValue();\r\n\treturn new XBoolean(s1.indexOf(s2) !== -1);\r\n};\r\n\r\nFunctions.substringBefore = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length != 3) {\r\n\t\tthrow new Error(\"Function substring-before expects (string, string)\");\r\n\t}\r\n\tvar s1 = arguments[1].evaluate(c).stringValue();\r\n\tvar s2 = arguments[2].evaluate(c).stringValue();\r\n\treturn new XString(s1.substring(0, s1.indexOf(s2)));\r\n};\r\n\r\nFunctions.substringAfter = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length != 3) {\r\n\t\tthrow new Error(\"Function substring-after expects (string, string)\");\r\n\t}\r\n\tvar s1 = arguments[1].evaluate(c).stringValue();\r\n\tvar s2 = arguments[2].evaluate(c).stringValue();\r\n\tif (s2.length == 0) {\r\n\t\treturn new XString(s1);\r\n\t}\r\n\tvar i = s1.indexOf(s2);\r\n\tif (i == -1) {\r\n\t\treturn new XString(\"\");\r\n\t}\r\n\treturn new XString(s1.substring(i + s2.length));\r\n};\r\n\r\nFunctions.substring = function() {\r\n\tvar c = arguments[0];\r\n\tif (!(arguments.length == 3 || arguments.length == 4)) {\r\n\t\tthrow new Error(\"Function substring expects (string, number, number?)\");\r\n\t}\r\n\tvar s = arguments[1].evaluate(c).stringValue();\r\n\tvar n1 = Math.round(arguments[2].evaluate(c).numberValue()) - 1;\r\n\tvar n2 = arguments.length == 4 ? n1 + Math.round(arguments[3].evaluate(c).numberValue()) : undefined;\r\n\treturn new XString(s.substring(n1, n2));\r\n};\r\n\r\nFunctions.stringLength = function() {\r\n\tvar c = arguments[0];\r\n\tvar s;\r\n\tif (arguments.length == 1) {\r\n\t\ts = XNodeSet.prototype.stringForNode(c.contextNode);\r\n\t} else if (arguments.length == 2) {\r\n\t\ts = arguments[1].evaluate(c).stringValue();\r\n\t} else {\r\n\t\tthrow new Error(\"Function string-length expects (string?)\");\r\n\t}\r\n\treturn new XNumber(s.length);\r\n};\r\n\r\nFunctions.normalizeSpace = function() {\r\n\tvar c = arguments[0];\r\n\tvar s;\r\n\tif (arguments.length == 1) {\r\n\t\ts = XNodeSet.prototype.stringForNode(c.contextNode);\r\n\t} else if (arguments.length == 2) {\r\n\t\ts = arguments[1].evaluate(c).stringValue();\r\n\t} else {\r\n\t\tthrow new Error(\"Function normalize-space expects (string?)\");\r\n\t}\r\n\tvar i = 0;\r\n\tvar j = s.length - 1;\r\n\twhile (Utilities.isSpace(s.charCodeAt(j))) {\r\n\t\tj--;\r\n\t}\r\n\tvar t = \"\";\r\n\twhile (i <= j && Utilities.isSpace(s.charCodeAt(i))) {\r\n\t\ti++;\r\n\t}\r\n\twhile (i <= j) {\r\n\t\tif (Utilities.isSpace(s.charCodeAt(i))) {\r\n\t\t\tt += \" \";\r\n\t\t\twhile (i <= j && Utilities.isSpace(s.charCodeAt(i))) {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tt += s.charAt(i);\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\treturn new XString(t);\r\n};\r\n\r\nFunctions.translate = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length != 4) {\r\n\t\tthrow new Error(\"Function translate expects (string, string, string)\");\r\n\t}\r\n\tvar s1 = arguments[1].evaluate(c).stringValue();\r\n\tvar s2 = arguments[2].evaluate(c).stringValue();\r\n\tvar s3 = arguments[3].evaluate(c).stringValue();\r\n\tvar map = [];\r\n\tfor (var i = 0; i < s2.length; i++) {\r\n\t\tvar j = s2.charCodeAt(i);\r\n\t\tif (map[j] == undefined) {\r\n\t\t\tvar k = i > s3.length ? \"\" : s3.charAt(i);\r\n\t\t\tmap[j] = k;\r\n\t\t}\r\n\t}\r\n\tvar t = \"\";\r\n\tfor (var i = 0; i < s1.length; i++) {\r\n\t\tvar c = s1.charCodeAt(i);\r\n\t\tvar r = map[c];\r\n\t\tif (r == undefined) {\r\n\t\t\tt += s1.charAt(i);\r\n\t\t} else {\r\n\t\t\tt += r;\r\n\t\t}\r\n\t}\r\n\treturn new XString(t);\r\n};\r\n\r\nFunctions.boolean_ = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length != 2) {\r\n\t\tthrow new Error(\"Function boolean expects (object)\");\r\n\t}\r\n\treturn arguments[1].evaluate(c).bool();\r\n};\r\n\r\nFunctions.not = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length != 2) {\r\n\t\tthrow new Error(\"Function not expects (object)\");\r\n\t}\r\n\treturn arguments[1].evaluate(c).bool().not();\r\n};\r\n\r\nFunctions.true_ = function() {\r\n\tif (arguments.length != 1) {\r\n\t\tthrow new Error(\"Function true expects ()\");\r\n\t}\r\n\treturn new XBoolean(true);\r\n};\r\n\r\nFunctions.false_ = function() {\r\n\tif (arguments.length != 1) {\r\n\t\tthrow new Error(\"Function false expects ()\");\r\n\t}\r\n\treturn new XBoolean(false);\r\n};\r\n\r\nFunctions.lang = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length != 2) {\r\n\t\tthrow new Error(\"Function lang expects (string)\");\r\n\t}\r\n\tvar lang;\r\n\tfor (var n = c.contextNode; n != null && n.nodeType != 9 /*Node.DOCUMENT_NODE*/; n = n.parentNode) {\r\n\t\tvar a = n.getAttributeNS(XPath.XML_NAMESPACE_URI, \"lang\");\r\n\t\tif (a != null) {\r\n\t\t\tlang = String(a);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tif (lang == null) {\r\n\t\treturn new XBoolean(false);\r\n\t}\r\n\tvar s = arguments[1].evaluate(c).stringValue();\r\n\treturn new XBoolean(lang.substring(0, s.length) == s\r\n\t\t\t\t&& (lang.length == s.length || lang.charAt(s.length) == '-'));\r\n};\r\n\r\nFunctions.number = function() {\r\n\tvar c = arguments[0];\r\n\tif (!(arguments.length == 1 || arguments.length == 2)) {\r\n\t\tthrow new Error(\"Function number expects (object?)\");\r\n\t}\r\n\tif (arguments.length == 1) {\r\n\t\treturn new XNumber(XNodeSet.prototype.stringForNode(c.contextNode));\r\n\t}\r\n\treturn arguments[1].evaluate(c).number();\r\n};\r\n\r\nFunctions.sum = function() {\r\n\tvar c = arguments[0];\r\n\tvar ns;\r\n\tif (arguments.length != 2 || !Utilities.instance_of((ns = arguments[1].evaluate(c)), XNodeSet)) {\r\n\t\tthrow new Error(\"Function sum expects (node-set)\");\r\n\t}\r\n\tns = ns.toUnsortedArray();\r\n\tvar n = 0;\r\n\tfor (var i = 0; i < ns.length; i++) {\r\n\t\tn += new XNumber(XNodeSet.prototype.stringForNode(ns[i])).numberValue();\r\n\t}\r\n\treturn new XNumber(n);\r\n};\r\n\r\nFunctions.floor = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length != 2) {\r\n\t\tthrow new Error(\"Function floor expects (number)\");\r\n\t}\r\n\treturn new XNumber(Math.floor(arguments[1].evaluate(c).numberValue()));\r\n};\r\n\r\nFunctions.ceiling = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length != 2) {\r\n\t\tthrow new Error(\"Function ceiling expects (number)\");\r\n\t}\r\n\treturn new XNumber(Math.ceil(arguments[1].evaluate(c).numberValue()));\r\n};\r\n\r\nFunctions.round = function() {\r\n\tvar c = arguments[0];\r\n\tif (arguments.length != 2) {\r\n\t\tthrow new Error(\"Function round expects (number)\");\r\n\t}\r\n\treturn new XNumber(Math.round(arguments[1].evaluate(c).numberValue()));\r\n};\r\n\r\n// Utilities /////////////////////////////////////////////////////////////////\r\n\r\nvar Utilities = new Object();\r\n\r\nUtilities.isAttribute = function (val) {\r\n    return val && (val.nodeType === 2 || val.ownerElement);\r\n}\r\n\r\nUtilities.splitQName = function(qn) {\r\n\tvar i = qn.indexOf(\":\");\r\n\tif (i == -1) {\r\n\t\treturn [ null, qn ];\r\n\t}\r\n\treturn [ qn.substring(0, i), qn.substring(i + 1) ];\r\n};\r\n\r\nUtilities.resolveQName = function(qn, nr, n, useDefault) {\r\n\tvar parts = Utilities.splitQName(qn);\r\n\tif (parts[0] != null) {\r\n\t\tparts[0] = nr.getNamespace(parts[0], n);\r\n\t} else {\r\n\t\tif (useDefault) {\r\n\t\t\tparts[0] = nr.getNamespace(\"\", n);\r\n\t\t\tif (parts[0] == null) {\r\n\t\t\t\tparts[0] = \"\";\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tparts[0] = \"\";\r\n\t\t}\r\n\t}\r\n\treturn parts;\r\n};\r\n\r\nUtilities.isSpace = function(c) {\r\n\treturn c == 0x9 || c == 0xd || c == 0xa || c == 0x20;\r\n};\r\n\r\nUtilities.isLetter = function(c) {\r\n\treturn c >= 0x0041 && c <= 0x005A ||\r\n\t\tc >= 0x0061 && c <= 0x007A ||\r\n\t\tc >= 0x00C0 && c <= 0x00D6 ||\r\n\t\tc >= 0x00D8 && c <= 0x00F6 ||\r\n\t\tc >= 0x00F8 && c <= 0x00FF ||\r\n\t\tc >= 0x0100 && c <= 0x0131 ||\r\n\t\tc >= 0x0134 && c <= 0x013E ||\r\n\t\tc >= 0x0141 && c <= 0x0148 ||\r\n\t\tc >= 0x014A && c <= 0x017E ||\r\n\t\tc >= 0x0180 && c <= 0x01C3 ||\r\n\t\tc >= 0x01CD && c <= 0x01F0 ||\r\n\t\tc >= 0x01F4 && c <= 0x01F5 ||\r\n\t\tc >= 0x01FA && c <= 0x0217 ||\r\n\t\tc >= 0x0250 && c <= 0x02A8 ||\r\n\t\tc >= 0x02BB && c <= 0x02C1 ||\r\n\t\tc == 0x0386 ||\r\n\t\tc >= 0x0388 && c <= 0x038A ||\r\n\t\tc == 0x038C ||\r\n\t\tc >= 0x038E && c <= 0x03A1 ||\r\n\t\tc >= 0x03A3 && c <= 0x03CE ||\r\n\t\tc >= 0x03D0 && c <= 0x03D6 ||\r\n\t\tc == 0x03DA ||\r\n\t\tc == 0x03DC ||\r\n\t\tc == 0x03DE ||\r\n\t\tc == 0x03E0 ||\r\n\t\tc >= 0x03E2 && c <= 0x03F3 ||\r\n\t\tc >= 0x0401 && c <= 0x040C ||\r\n\t\tc >= 0x040E && c <= 0x044F ||\r\n\t\tc >= 0x0451 && c <= 0x045C ||\r\n\t\tc >= 0x045E && c <= 0x0481 ||\r\n\t\tc >= 0x0490 && c <= 0x04C4 ||\r\n\t\tc >= 0x04C7 && c <= 0x04C8 ||\r\n\t\tc >= 0x04CB && c <= 0x04CC ||\r\n\t\tc >= 0x04D0 && c <= 0x04EB ||\r\n\t\tc >= 0x04EE && c <= 0x04F5 ||\r\n\t\tc >= 0x04F8 && c <= 0x04F9 ||\r\n\t\tc >= 0x0531 && c <= 0x0556 ||\r\n\t\tc == 0x0559 ||\r\n\t\tc >= 0x0561 && c <= 0x0586 ||\r\n\t\tc >= 0x05D0 && c <= 0x05EA ||\r\n\t\tc >= 0x05F0 && c <= 0x05F2 ||\r\n\t\tc >= 0x0621 && c <= 0x063A ||\r\n\t\tc >= 0x0641 && c <= 0x064A ||\r\n\t\tc >= 0x0671 && c <= 0x06B7 ||\r\n\t\tc >= 0x06BA && c <= 0x06BE ||\r\n\t\tc >= 0x06C0 && c <= 0x06CE ||\r\n\t\tc >= 0x06D0 && c <= 0x06D3 ||\r\n\t\tc == 0x06D5 ||\r\n\t\tc >= 0x06E5 && c <= 0x06E6 ||\r\n\t\tc >= 0x0905 && c <= 0x0939 ||\r\n\t\tc == 0x093D ||\r\n\t\tc >= 0x0958 && c <= 0x0961 ||\r\n\t\tc >= 0x0985 && c <= 0x098C ||\r\n\t\tc >= 0x098F && c <= 0x0990 ||\r\n\t\tc >= 0x0993 && c <= 0x09A8 ||\r\n\t\tc >= 0x09AA && c <= 0x09B0 ||\r\n\t\tc == 0x09B2 ||\r\n\t\tc >= 0x09B6 && c <= 0x09B9 ||\r\n\t\tc >= 0x09DC && c <= 0x09DD ||\r\n\t\tc >= 0x09DF && c <= 0x09E1 ||\r\n\t\tc >= 0x09F0 && c <= 0x09F1 ||\r\n\t\tc >= 0x0A05 && c <= 0x0A0A ||\r\n\t\tc >= 0x0A0F && c <= 0x0A10 ||\r\n\t\tc >= 0x0A13 && c <= 0x0A28 ||\r\n\t\tc >= 0x0A2A && c <= 0x0A30 ||\r\n\t\tc >= 0x0A32 && c <= 0x0A33 ||\r\n\t\tc >= 0x0A35 && c <= 0x0A36 ||\r\n\t\tc >= 0x0A38 && c <= 0x0A39 ||\r\n\t\tc >= 0x0A59 && c <= 0x0A5C ||\r\n\t\tc == 0x0A5E ||\r\n\t\tc >= 0x0A72 && c <= 0x0A74 ||\r\n\t\tc >= 0x0A85 && c <= 0x0A8B ||\r\n\t\tc == 0x0A8D ||\r\n\t\tc >= 0x0A8F && c <= 0x0A91 ||\r\n\t\tc >= 0x0A93 && c <= 0x0AA8 ||\r\n\t\tc >= 0x0AAA && c <= 0x0AB0 ||\r\n\t\tc >= 0x0AB2 && c <= 0x0AB3 ||\r\n\t\tc >= 0x0AB5 && c <= 0x0AB9 ||\r\n\t\tc == 0x0ABD ||\r\n\t\tc == 0x0AE0 ||\r\n\t\tc >= 0x0B05 && c <= 0x0B0C ||\r\n\t\tc >= 0x0B0F && c <= 0x0B10 ||\r\n\t\tc >= 0x0B13 && c <= 0x0B28 ||\r\n\t\tc >= 0x0B2A && c <= 0x0B30 ||\r\n\t\tc >= 0x0B32 && c <= 0x0B33 ||\r\n\t\tc >= 0x0B36 && c <= 0x0B39 ||\r\n\t\tc == 0x0B3D ||\r\n\t\tc >= 0x0B5C && c <= 0x0B5D ||\r\n\t\tc >= 0x0B5F && c <= 0x0B61 ||\r\n\t\tc >= 0x0B85 && c <= 0x0B8A ||\r\n\t\tc >= 0x0B8E && c <= 0x0B90 ||\r\n\t\tc >= 0x0B92 && c <= 0x0B95 ||\r\n\t\tc >= 0x0B99 && c <= 0x0B9A ||\r\n\t\tc == 0x0B9C ||\r\n\t\tc >= 0x0B9E && c <= 0x0B9F ||\r\n\t\tc >= 0x0BA3 && c <= 0x0BA4 ||\r\n\t\tc >= 0x0BA8 && c <= 0x0BAA ||\r\n\t\tc >= 0x0BAE && c <= 0x0BB5 ||\r\n\t\tc >= 0x0BB7 && c <= 0x0BB9 ||\r\n\t\tc >= 0x0C05 && c <= 0x0C0C ||\r\n\t\tc >= 0x0C0E && c <= 0x0C10 ||\r\n\t\tc >= 0x0C12 && c <= 0x0C28 ||\r\n\t\tc >= 0x0C2A && c <= 0x0C33 ||\r\n\t\tc >= 0x0C35 && c <= 0x0C39 ||\r\n\t\tc >= 0x0C60 && c <= 0x0C61 ||\r\n\t\tc >= 0x0C85 && c <= 0x0C8C ||\r\n\t\tc >= 0x0C8E && c <= 0x0C90 ||\r\n\t\tc >= 0x0C92 && c <= 0x0CA8 ||\r\n\t\tc >= 0x0CAA && c <= 0x0CB3 ||\r\n\t\tc >= 0x0CB5 && c <= 0x0CB9 ||\r\n\t\tc == 0x0CDE ||\r\n\t\tc >= 0x0CE0 && c <= 0x0CE1 ||\r\n\t\tc >= 0x0D05 && c <= 0x0D0C ||\r\n\t\tc >= 0x0D0E && c <= 0x0D10 ||\r\n\t\tc >= 0x0D12 && c <= 0x0D28 ||\r\n\t\tc >= 0x0D2A && c <= 0x0D39 ||\r\n\t\tc >= 0x0D60 && c <= 0x0D61 ||\r\n\t\tc >= 0x0E01 && c <= 0x0E2E ||\r\n\t\tc == 0x0E30 ||\r\n\t\tc >= 0x0E32 && c <= 0x0E33 ||\r\n\t\tc >= 0x0E40 && c <= 0x0E45 ||\r\n\t\tc >= 0x0E81 && c <= 0x0E82 ||\r\n\t\tc == 0x0E84 ||\r\n\t\tc >= 0x0E87 && c <= 0x0E88 ||\r\n\t\tc == 0x0E8A ||\r\n\t\tc == 0x0E8D ||\r\n\t\tc >= 0x0E94 && c <= 0x0E97 ||\r\n\t\tc >= 0x0E99 && c <= 0x0E9F ||\r\n\t\tc >= 0x0EA1 && c <= 0x0EA3 ||\r\n\t\tc == 0x0EA5 ||\r\n\t\tc == 0x0EA7 ||\r\n\t\tc >= 0x0EAA && c <= 0x0EAB ||\r\n\t\tc >= 0x0EAD && c <= 0x0EAE ||\r\n\t\tc == 0x0EB0 ||\r\n\t\tc >= 0x0EB2 && c <= 0x0EB3 ||\r\n\t\tc == 0x0EBD ||\r\n\t\tc >= 0x0EC0 && c <= 0x0EC4 ||\r\n\t\tc >= 0x0F40 && c <= 0x0F47 ||\r\n\t\tc >= 0x0F49 && c <= 0x0F69 ||\r\n\t\tc >= 0x10A0 && c <= 0x10C5 ||\r\n\t\tc >= 0x10D0 && c <= 0x10F6 ||\r\n\t\tc == 0x1100 ||\r\n\t\tc >= 0x1102 && c <= 0x1103 ||\r\n\t\tc >= 0x1105 && c <= 0x1107 ||\r\n\t\tc == 0x1109 ||\r\n\t\tc >= 0x110B && c <= 0x110C ||\r\n\t\tc >= 0x110E && c <= 0x1112 ||\r\n\t\tc == 0x113C ||\r\n\t\tc == 0x113E ||\r\n\t\tc == 0x1140 ||\r\n\t\tc == 0x114C ||\r\n\t\tc == 0x114E ||\r\n\t\tc == 0x1150 ||\r\n\t\tc >= 0x1154 && c <= 0x1155 ||\r\n\t\tc == 0x1159 ||\r\n\t\tc >= 0x115F && c <= 0x1161 ||\r\n\t\tc == 0x1163 ||\r\n\t\tc == 0x1165 ||\r\n\t\tc == 0x1167 ||\r\n\t\tc == 0x1169 ||\r\n\t\tc >= 0x116D && c <= 0x116E ||\r\n\t\tc >= 0x1172 && c <= 0x1173 ||\r\n\t\tc == 0x1175 ||\r\n\t\tc == 0x119E ||\r\n\t\tc == 0x11A8 ||\r\n\t\tc == 0x11AB ||\r\n\t\tc >= 0x11AE && c <= 0x11AF ||\r\n\t\tc >= 0x11B7 && c <= 0x11B8 ||\r\n\t\tc == 0x11BA ||\r\n\t\tc >= 0x11BC && c <= 0x11C2 ||\r\n\t\tc == 0x11EB ||\r\n\t\tc == 0x11F0 ||\r\n\t\tc == 0x11F9 ||\r\n\t\tc >= 0x1E00 && c <= 0x1E9B ||\r\n\t\tc >= 0x1EA0 && c <= 0x1EF9 ||\r\n\t\tc >= 0x1F00 && c <= 0x1F15 ||\r\n\t\tc >= 0x1F18 && c <= 0x1F1D ||\r\n\t\tc >= 0x1F20 && c <= 0x1F45 ||\r\n\t\tc >= 0x1F48 && c <= 0x1F4D ||\r\n\t\tc >= 0x1F50 && c <= 0x1F57 ||\r\n\t\tc == 0x1F59 ||\r\n\t\tc == 0x1F5B ||\r\n\t\tc == 0x1F5D ||\r\n\t\tc >= 0x1F5F && c <= 0x1F7D ||\r\n\t\tc >= 0x1F80 && c <= 0x1FB4 ||\r\n\t\tc >= 0x1FB6 && c <= 0x1FBC ||\r\n\t\tc == 0x1FBE ||\r\n\t\tc >= 0x1FC2 && c <= 0x1FC4 ||\r\n\t\tc >= 0x1FC6 && c <= 0x1FCC ||\r\n\t\tc >= 0x1FD0 && c <= 0x1FD3 ||\r\n\t\tc >= 0x1FD6 && c <= 0x1FDB ||\r\n\t\tc >= 0x1FE0 && c <= 0x1FEC ||\r\n\t\tc >= 0x1FF2 && c <= 0x1FF4 ||\r\n\t\tc >= 0x1FF6 && c <= 0x1FFC ||\r\n\t\tc == 0x2126 ||\r\n\t\tc >= 0x212A && c <= 0x212B ||\r\n\t\tc == 0x212E ||\r\n\t\tc >= 0x2180 && c <= 0x2182 ||\r\n\t\tc >= 0x3041 && c <= 0x3094 ||\r\n\t\tc >= 0x30A1 && c <= 0x30FA ||\r\n\t\tc >= 0x3105 && c <= 0x312C ||\r\n\t\tc >= 0xAC00 && c <= 0xD7A3 ||\r\n\t\tc >= 0x4E00 && c <= 0x9FA5 ||\r\n\t\tc == 0x3007 ||\r\n\t\tc >= 0x3021 && c <= 0x3029;\r\n};\r\n\r\nUtilities.isNCNameChar = function(c) {\r\n\treturn c >= 0x0030 && c <= 0x0039\r\n\t\t|| c >= 0x0660 && c <= 0x0669\r\n\t\t|| c >= 0x06F0 && c <= 0x06F9\r\n\t\t|| c >= 0x0966 && c <= 0x096F\r\n\t\t|| c >= 0x09E6 && c <= 0x09EF\r\n\t\t|| c >= 0x0A66 && c <= 0x0A6F\r\n\t\t|| c >= 0x0AE6 && c <= 0x0AEF\r\n\t\t|| c >= 0x0B66 && c <= 0x0B6F\r\n\t\t|| c >= 0x0BE7 && c <= 0x0BEF\r\n\t\t|| c >= 0x0C66 && c <= 0x0C6F\r\n\t\t|| c >= 0x0CE6 && c <= 0x0CEF\r\n\t\t|| c >= 0x0D66 && c <= 0x0D6F\r\n\t\t|| c >= 0x0E50 && c <= 0x0E59\r\n\t\t|| c >= 0x0ED0 && c <= 0x0ED9\r\n\t\t|| c >= 0x0F20 && c <= 0x0F29\r\n\t\t|| c == 0x002E\r\n\t\t|| c == 0x002D\r\n\t\t|| c == 0x005F\r\n\t\t|| Utilities.isLetter(c)\r\n\t\t|| c >= 0x0300 && c <= 0x0345\r\n\t\t|| c >= 0x0360 && c <= 0x0361\r\n\t\t|| c >= 0x0483 && c <= 0x0486\r\n\t\t|| c >= 0x0591 && c <= 0x05A1\r\n\t\t|| c >= 0x05A3 && c <= 0x05B9\r\n\t\t|| c >= 0x05BB && c <= 0x05BD\r\n\t\t|| c == 0x05BF\r\n\t\t|| c >= 0x05C1 && c <= 0x05C2\r\n\t\t|| c == 0x05C4\r\n\t\t|| c >= 0x064B && c <= 0x0652\r\n\t\t|| c == 0x0670\r\n\t\t|| c >= 0x06D6 && c <= 0x06DC\r\n\t\t|| c >= 0x06DD && c <= 0x06DF\r\n\t\t|| c >= 0x06E0 && c <= 0x06E4\r\n\t\t|| c >= 0x06E7 && c <= 0x06E8\r\n\t\t|| c >= 0x06EA && c <= 0x06ED\r\n\t\t|| c >= 0x0901 && c <= 0x0903\r\n\t\t|| c == 0x093C\r\n\t\t|| c >= 0x093E && c <= 0x094C\r\n\t\t|| c == 0x094D\r\n\t\t|| c >= 0x0951 && c <= 0x0954\r\n\t\t|| c >= 0x0962 && c <= 0x0963\r\n\t\t|| c >= 0x0981 && c <= 0x0983\r\n\t\t|| c == 0x09BC\r\n\t\t|| c == 0x09BE\r\n\t\t|| c == 0x09BF\r\n\t\t|| c >= 0x09C0 && c <= 0x09C4\r\n\t\t|| c >= 0x09C7 && c <= 0x09C8\r\n\t\t|| c >= 0x09CB && c <= 0x09CD\r\n\t\t|| c == 0x09D7\r\n\t\t|| c >= 0x09E2 && c <= 0x09E3\r\n\t\t|| c == 0x0A02\r\n\t\t|| c == 0x0A3C\r\n\t\t|| c == 0x0A3E\r\n\t\t|| c == 0x0A3F\r\n\t\t|| c >= 0x0A40 && c <= 0x0A42\r\n\t\t|| c >= 0x0A47 && c <= 0x0A48\r\n\t\t|| c >= 0x0A4B && c <= 0x0A4D\r\n\t\t|| c >= 0x0A70 && c <= 0x0A71\r\n\t\t|| c >= 0x0A81 && c <= 0x0A83\r\n\t\t|| c == 0x0ABC\r\n\t\t|| c >= 0x0ABE && c <= 0x0AC5\r\n\t\t|| c >= 0x0AC7 && c <= 0x0AC9\r\n\t\t|| c >= 0x0ACB && c <= 0x0ACD\r\n\t\t|| c >= 0x0B01 && c <= 0x0B03\r\n\t\t|| c == 0x0B3C\r\n\t\t|| c >= 0x0B3E && c <= 0x0B43\r\n\t\t|| c >= 0x0B47 && c <= 0x0B48\r\n\t\t|| c >= 0x0B4B && c <= 0x0B4D\r\n\t\t|| c >= 0x0B56 && c <= 0x0B57\r\n\t\t|| c >= 0x0B82 && c <= 0x0B83\r\n\t\t|| c >= 0x0BBE && c <= 0x0BC2\r\n\t\t|| c >= 0x0BC6 && c <= 0x0BC8\r\n\t\t|| c >= 0x0BCA && c <= 0x0BCD\r\n\t\t|| c == 0x0BD7\r\n\t\t|| c >= 0x0C01 && c <= 0x0C03\r\n\t\t|| c >= 0x0C3E && c <= 0x0C44\r\n\t\t|| c >= 0x0C46 && c <= 0x0C48\r\n\t\t|| c >= 0x0C4A && c <= 0x0C4D\r\n\t\t|| c >= 0x0C55 && c <= 0x0C56\r\n\t\t|| c >= 0x0C82 && c <= 0x0C83\r\n\t\t|| c >= 0x0CBE && c <= 0x0CC4\r\n\t\t|| c >= 0x0CC6 && c <= 0x0CC8\r\n\t\t|| c >= 0x0CCA && c <= 0x0CCD\r\n\t\t|| c >= 0x0CD5 && c <= 0x0CD6\r\n\t\t|| c >= 0x0D02 && c <= 0x0D03\r\n\t\t|| c >= 0x0D3E && c <= 0x0D43\r\n\t\t|| c >= 0x0D46 && c <= 0x0D48\r\n\t\t|| c >= 0x0D4A && c <= 0x0D4D\r\n\t\t|| c == 0x0D57\r\n\t\t|| c == 0x0E31\r\n\t\t|| c >= 0x0E34 && c <= 0x0E3A\r\n\t\t|| c >= 0x0E47 && c <= 0x0E4E\r\n\t\t|| c == 0x0EB1\r\n\t\t|| c >= 0x0EB4 && c <= 0x0EB9\r\n\t\t|| c >= 0x0EBB && c <= 0x0EBC\r\n\t\t|| c >= 0x0EC8 && c <= 0x0ECD\r\n\t\t|| c >= 0x0F18 && c <= 0x0F19\r\n\t\t|| c == 0x0F35\r\n\t\t|| c == 0x0F37\r\n\t\t|| c == 0x0F39\r\n\t\t|| c == 0x0F3E\r\n\t\t|| c == 0x0F3F\r\n\t\t|| c >= 0x0F71 && c <= 0x0F84\r\n\t\t|| c >= 0x0F86 && c <= 0x0F8B\r\n\t\t|| c >= 0x0F90 && c <= 0x0F95\r\n\t\t|| c == 0x0F97\r\n\t\t|| c >= 0x0F99 && c <= 0x0FAD\r\n\t\t|| c >= 0x0FB1 && c <= 0x0FB7\r\n\t\t|| c == 0x0FB9\r\n\t\t|| c >= 0x20D0 && c <= 0x20DC\r\n\t\t|| c == 0x20E1\r\n\t\t|| c >= 0x302A && c <= 0x302F\r\n\t\t|| c == 0x3099\r\n\t\t|| c == 0x309A\r\n\t\t|| c == 0x00B7\r\n\t\t|| c == 0x02D0\r\n\t\t|| c == 0x02D1\r\n\t\t|| c == 0x0387\r\n\t\t|| c == 0x0640\r\n\t\t|| c == 0x0E46\r\n\t\t|| c == 0x0EC6\r\n\t\t|| c == 0x3005\r\n\t\t|| c >= 0x3031 && c <= 0x3035\r\n\t\t|| c >= 0x309D && c <= 0x309E\r\n\t\t|| c >= 0x30FC && c <= 0x30FE;\r\n};\r\n\r\nUtilities.coalesceText = function(n) {\r\n\tfor (var m = n.firstChild; m != null; m = m.nextSibling) {\r\n\t\tif (m.nodeType == 3 /*Node.TEXT_NODE*/ || m.nodeType == 4 /*Node.CDATA_SECTION_NODE*/) {\r\n\t\t\tvar s = m.nodeValue;\r\n\t\t\tvar first = m;\r\n\t\t\tm = m.nextSibling;\r\n\t\t\twhile (m != null && (m.nodeType == 3 /*Node.TEXT_NODE*/ || m.nodeType == 4 /*Node.CDATA_SECTION_NODE*/)) {\r\n\t\t\t\ts += m.nodeValue;\r\n\t\t\t\tvar del = m;\r\n\t\t\t\tm = m.nextSibling;\r\n\t\t\t\tdel.parentNode.removeChild(del);\r\n\t\t\t}\r\n\t\t\tif (first.nodeType == 4 /*Node.CDATA_SECTION_NODE*/) {\r\n\t\t\t\tvar p = first.parentNode;\r\n\t\t\t\tif (first.nextSibling == null) {\r\n\t\t\t\t\tp.removeChild(first);\r\n\t\t\t\t\tp.appendChild(p.ownerDocument.createTextNode(s));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar next = first.nextSibling;\r\n\t\t\t\t\tp.removeChild(first);\r\n\t\t\t\t\tp.insertBefore(p.ownerDocument.createTextNode(s), next);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfirst.nodeValue = s;\r\n\t\t\t}\r\n\t\t\tif (m == null) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else if (m.nodeType == 1 /*Node.ELEMENT_NODE*/) {\r\n\t\t\tUtilities.coalesceText(m);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nUtilities.instance_of = function(o, c) {\r\n\twhile (o != null) {\r\n\t\tif (o.constructor === c) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (o === Object) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\to = o.constructor.superclass;\r\n\t}\r\n\treturn false;\r\n};\r\n\r\nUtilities.getElementById = function(n, id) {\r\n\t// Note that this does not check the DTD to check for actual\r\n\t// attributes of type ID, so this may be a bit wrong.\r\n\tif (n.nodeType == 1 /*Node.ELEMENT_NODE*/) {\r\n\t\tif (n.getAttribute(\"id\") == id\r\n\t\t\t\t|| n.getAttributeNS(null, \"id\") == id) {\r\n\t\t\treturn n;\r\n\t\t}\r\n\t}\r\n\tfor (var m = n.firstChild; m != null; m = m.nextSibling) {\r\n\t\tvar res = Utilities.getElementById(m, id);\r\n\t\tif (res != null) {\r\n\t\t\treturn res;\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\n// XPathException ////////////////////////////////////////////////////////////\r\n\r\nvar XPathException = (function () {\r\n    function getMessage(code, exception) {\r\n        var msg = exception ? \": \" + exception.toString() : \"\";\r\n        switch (code) {\r\n            case XPathException.INVALID_EXPRESSION_ERR:\r\n                return \"Invalid expression\" + msg;\r\n            case XPathException.TYPE_ERR:\r\n                return \"Type error\" + msg;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function XPathException(code, error, message) {\r\n        var err = Error.call(this, getMessage(code, error) || message);\r\n\r\n        err.code = code;\r\n        err.exception = error;\r\n\r\n        return err;\r\n    }\r\n\r\n    XPathException.prototype = Object.create(Error.prototype);\r\n    XPathException.prototype.constructor = XPathException;\r\n    XPathException.superclass = Error;\r\n\r\n    XPathException.prototype.toString = function() {\r\n        return this.message;\r\n    };\r\n\r\n    XPathException.fromMessage = function(message, error) {\r\n        return new XPathException(null, error, message);\r\n    };\r\n\r\n    XPathException.INVALID_EXPRESSION_ERR = 51;\r\n    XPathException.TYPE_ERR = 52;\r\n\r\n    return XPathException;\r\n})();\r\n\r\n// XPathExpression ///////////////////////////////////////////////////////////\r\n\r\nXPathExpression.prototype = {};\r\nXPathExpression.prototype.constructor = XPathExpression;\r\nXPathExpression.superclass = Object.prototype;\r\n\r\nfunction XPathExpression(e, r, p) {\r\n\tthis.xpath = p.parse(e);\r\n\tthis.context = new XPathContext();\r\n\tthis.context.namespaceResolver = new XPathNSResolverWrapper(r);\r\n}\r\n\r\nXPathExpression.prototype.evaluate = function(n, t, res) {\r\n\tthis.context.expressionContextNode = n;\r\n\tvar result = this.xpath.evaluate(this.context);\r\n\treturn new XPathResult(result, t);\r\n}\r\n\r\n// XPathNSResolverWrapper ////////////////////////////////////////////////////\r\n\r\nXPathNSResolverWrapper.prototype = {};\r\nXPathNSResolverWrapper.prototype.constructor = XPathNSResolverWrapper;\r\nXPathNSResolverWrapper.superclass = Object.prototype;\r\n\r\nfunction XPathNSResolverWrapper(r) {\r\n\tthis.xpathNSResolver = r;\r\n}\r\n\r\nXPathNSResolverWrapper.prototype.getNamespace = function(prefix, n) {\r\n    if (this.xpathNSResolver == null) {\r\n        return null;\r\n    }\r\n\treturn this.xpathNSResolver.lookupNamespaceURI(prefix);\r\n};\r\n\r\n// NodeXPathNSResolver ///////////////////////////////////////////////////////\r\n\r\nNodeXPathNSResolver.prototype = {};\r\nNodeXPathNSResolver.prototype.constructor = NodeXPathNSResolver;\r\nNodeXPathNSResolver.superclass = Object.prototype;\r\n\r\nfunction NodeXPathNSResolver(n) {\r\n\tthis.node = n;\r\n\tthis.namespaceResolver = new NamespaceResolver();\r\n}\r\n\r\nNodeXPathNSResolver.prototype.lookupNamespaceURI = function(prefix) {\r\n\treturn this.namespaceResolver.getNamespace(prefix, this.node);\r\n};\r\n\r\n// XPathResult ///////////////////////////////////////////////////////////////\r\n\r\nXPathResult.prototype = {};\r\nXPathResult.prototype.constructor = XPathResult;\r\nXPathResult.superclass = Object.prototype;\r\n\r\nfunction XPathResult(v, t) {\r\n\tif (t == XPathResult.ANY_TYPE) {\r\n\t\tif (v.constructor === XString) {\r\n\t\t\tt = XPathResult.STRING_TYPE;\r\n\t\t} else if (v.constructor === XNumber) {\r\n\t\t\tt = XPathResult.NUMBER_TYPE;\r\n\t\t} else if (v.constructor === XBoolean) {\r\n\t\t\tt = XPathResult.BOOLEAN_TYPE;\r\n\t\t} else if (v.constructor === XNodeSet) {\r\n\t\t\tt = XPathResult.UNORDERED_NODE_ITERATOR_TYPE;\r\n\t\t}\r\n\t}\r\n\tthis.resultType = t;\r\n\tswitch (t) {\r\n\t\tcase XPathResult.NUMBER_TYPE:\r\n\t\t\tthis.numberValue = v.numberValue();\r\n\t\t\treturn;\r\n\t\tcase XPathResult.STRING_TYPE:\r\n\t\t\tthis.stringValue = v.stringValue();\r\n\t\t\treturn;\r\n\t\tcase XPathResult.BOOLEAN_TYPE:\r\n\t\t\tthis.booleanValue = v.booleanValue();\r\n\t\t\treturn;\r\n\t\tcase XPathResult.ANY_UNORDERED_NODE_TYPE:\r\n\t\tcase XPathResult.FIRST_ORDERED_NODE_TYPE:\r\n\t\t\tif (v.constructor === XNodeSet) {\r\n\t\t\t\tthis.singleNodeValue = v.first();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase XPathResult.UNORDERED_NODE_ITERATOR_TYPE:\r\n\t\tcase XPathResult.ORDERED_NODE_ITERATOR_TYPE:\r\n\t\t\tif (v.constructor === XNodeSet) {\r\n\t\t\t\tthis.invalidIteratorState = false;\r\n\t\t\t\tthis.nodes = v.toArray();\r\n\t\t\t\tthis.iteratorIndex = 0;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE:\r\n\t\tcase XPathResult.ORDERED_NODE_SNAPSHOT_TYPE:\r\n\t\t\tif (v.constructor === XNodeSet) {\r\n\t\t\t\tthis.nodes = v.toArray();\r\n\t\t\t\tthis.snapshotLength = this.nodes.length;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\tthrow new XPathException(XPathException.TYPE_ERR);\r\n};\r\n\r\nXPathResult.prototype.iterateNext = function() {\r\n\tif (this.resultType != XPathResult.UNORDERED_NODE_ITERATOR_TYPE\r\n\t\t\t&& this.resultType != XPathResult.ORDERED_NODE_ITERATOR_TYPE) {\r\n\t\tthrow new XPathException(XPathException.TYPE_ERR);\r\n\t}\r\n\treturn this.nodes[this.iteratorIndex++];\r\n};\r\n\r\nXPathResult.prototype.snapshotItem = function(i) {\r\n\tif (this.resultType != XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE\r\n\t\t\t&& this.resultType != XPathResult.ORDERED_NODE_SNAPSHOT_TYPE) {\r\n\t\tthrow new XPathException(XPathException.TYPE_ERR);\r\n\t}\r\n\treturn this.nodes[i];\r\n};\r\n\r\nXPathResult.ANY_TYPE = 0;\r\nXPathResult.NUMBER_TYPE = 1;\r\nXPathResult.STRING_TYPE = 2;\r\nXPathResult.BOOLEAN_TYPE = 3;\r\nXPathResult.UNORDERED_NODE_ITERATOR_TYPE = 4;\r\nXPathResult.ORDERED_NODE_ITERATOR_TYPE = 5;\r\nXPathResult.UNORDERED_NODE_SNAPSHOT_TYPE = 6;\r\nXPathResult.ORDERED_NODE_SNAPSHOT_TYPE = 7;\r\nXPathResult.ANY_UNORDERED_NODE_TYPE = 8;\r\nXPathResult.FIRST_ORDERED_NODE_TYPE = 9;\r\n\r\n// DOM 3 XPath support ///////////////////////////////////////////////////////\r\n\r\nfunction installDOM3XPathSupport(doc, p) {\r\n\tdoc.createExpression = function(e, r) {\r\n\t\ttry {\r\n\t\t\treturn new XPathExpression(e, r, p);\r\n\t\t} catch (e) {\r\n\t\t\tthrow new XPathException(XPathException.INVALID_EXPRESSION_ERR, e);\r\n\t\t}\r\n\t};\r\n\tdoc.createNSResolver = function(n) {\r\n\t\treturn new NodeXPathNSResolver(n);\r\n\t};\r\n\tdoc.evaluate = function(e, cn, r, t, res) {\r\n\t\tif (t < 0 || t > 9) {\r\n\t\t\tthrow { code: 0, toString: function() { return \"Request type not supported\"; } };\r\n\t\t}\r\n        return doc.createExpression(e, r, p).evaluate(cn, t, res);\r\n\t};\r\n};\r\n\r\n// ---------------------------------------------------------------------------\r\n\r\n// Install DOM 3 XPath support for the current document.\r\ntry {\r\n\tvar shouldInstall = true;\r\n\ttry {\r\n\t\tif (document.implementation\r\n\t\t\t\t&& document.implementation.hasFeature\r\n\t\t\t\t&& document.implementation.hasFeature(\"XPath\", null)) {\r\n\t\t\tshouldInstall = false;\r\n\t\t}\r\n\t} catch (e) {\r\n\t}\r\n\tif (shouldInstall) {\r\n\t\tinstallDOM3XPathSupport(document, new XPathParser());\r\n\t}\r\n} catch (e) {\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n// exports for node.js\r\n\r\ninstallDOM3XPathSupport(exports, new XPathParser());\r\n\r\n(function() {\r\n    var parser = new XPathParser();\r\n\r\n    var defaultNSResolver = new NamespaceResolver();\r\n    var defaultFunctionResolver = new FunctionResolver();\r\n    var defaultVariableResolver = new VariableResolver();\r\n\r\n    function makeNSResolverFromFunction(func) {\r\n        return {\r\n            getNamespace: function (prefix, node) {\r\n                var ns = func(prefix, node);\r\n\r\n                return ns || defaultNSResolver.getNamespace(prefix, node);\r\n            }\r\n        };\r\n    }\r\n\r\n    function makeNSResolverFromObject(obj) {\r\n        return makeNSResolverFromFunction(obj.getNamespace.bind(obj));\r\n    }\r\n\r\n    function makeNSResolverFromMap(map) {\r\n        return makeNSResolverFromFunction(function (prefix) {\r\n            return map[prefix];\r\n        });\r\n    }\r\n\r\n    function makeNSResolver(resolver) {\r\n        if (resolver && typeof resolver.getNamespace === \"function\") {\r\n            return makeNSResolverFromObject(resolver);\r\n        }\r\n\r\n        if (typeof resolver === \"function\") {\r\n            return makeNSResolverFromFunction(resolver);\r\n        }\r\n\r\n        // assume prefix -> uri mapping\r\n        if (typeof resolver === \"object\") {\r\n            return makeNSResolverFromMap(resolver);\r\n        }\r\n\r\n        return defaultNSResolver;\r\n    }\r\n\r\n    /** Converts native JavaScript types to their XPath library equivalent */\r\n    function convertValue(value) {\r\n        if (value === null ||\r\n            typeof value === \"undefined\" ||\r\n            value instanceof XString ||\r\n            value instanceof XBoolean ||\r\n            value instanceof XNumber ||\r\n            value instanceof XNodeSet) {\r\n            return value;\r\n        }\r\n\r\n        switch (typeof value) {\r\n            case \"string\": return new XString(value);\r\n            case \"boolean\": return new XBoolean(value);\r\n            case \"number\": return new XNumber(value);\r\n        }\r\n\r\n        // assume node(s)\r\n        var ns = new XNodeSet();\r\n        ns.addArray([].concat(value));\r\n        return ns;\r\n    }\r\n\r\n    function makeEvaluator(func) {\r\n        return function (context) {\r\n            var args = Array.prototype.slice.call(arguments, 1).map(function (arg) {\r\n                return arg.evaluate(context);\r\n            });\r\n            var result = func.apply(this, [].concat(context, args));\r\n            return convertValue(result);\r\n        };\r\n    }\r\n\r\n    function makeFunctionResolverFromFunction(func) {\r\n        return {\r\n            getFunction: function (name, namespace) {\r\n                var found = func(name, namespace);\r\n                if (found) {\r\n                    return makeEvaluator(found);\r\n                }\r\n                return defaultFunctionResolver.getFunction(name, namespace);\r\n            }\r\n        };\r\n    }\r\n\r\n    function makeFunctionResolverFromObject(obj) {\r\n        return makeFunctionResolverFromFunction(obj.getFunction.bind(obj));\r\n    }\r\n\r\n    function makeFunctionResolverFromMap(map) {\r\n        return makeFunctionResolverFromFunction(function (name) {\r\n            return map[name];\r\n        });\r\n    }\r\n\r\n    function makeFunctionResolver(resolver) {\r\n        if (resolver && typeof resolver.getFunction === \"function\") {\r\n            return makeFunctionResolverFromObject(resolver);\r\n        }\r\n\r\n        if (typeof resolver === \"function\") {\r\n            return makeFunctionResolverFromFunction(resolver);\r\n        }\r\n\r\n        // assume map\r\n        if (typeof resolver === \"object\") {\r\n            return makeFunctionResolverFromMap(resolver);\r\n        }\r\n\r\n        return defaultFunctionResolver;\r\n    }\r\n\r\n    function makeVariableResolverFromFunction(func) {\r\n        return {\r\n            getVariable: function (name, namespace) {\r\n                var value = func(name, namespace);\r\n                return convertValue(value);\r\n            }\r\n        };\r\n    }\r\n\r\n    function makeVariableResolver(resolver) {\r\n        if (resolver) {\r\n            if (typeof resolver.getVariable === \"function\") {\r\n                return makeVariableResolverFromFunction(resolver.getVariable.bind(resolver));\r\n            }\r\n\r\n            if (typeof resolver === \"function\") {\r\n                return makeVariableResolverFromFunction(resolver);\r\n            }\r\n\r\n            // assume map\r\n            if (typeof resolver === \"object\") {\r\n                return makeVariableResolverFromFunction(function (name) {\r\n                    return resolver[name];\r\n                });\r\n            }\r\n        }\r\n\r\n        return defaultVariableResolver;\r\n    }\r\n\r\n    function makeContext(options) {\r\n        var context = new XPathContext();\r\n\r\n        if (options) {\r\n            context.namespaceResolver = makeNSResolver(options.namespaces);\r\n            context.functionResolver = makeFunctionResolver(options.functions);\r\n            context.variableResolver = makeVariableResolver(options.variables);\r\n            context.expressionContextNode = options.node;\r\n        } else {\r\n            context.namespaceResolver = defaultNSResolver;\r\n        }\r\n\r\n        return context;\r\n    }\r\n\r\n    function evaluate(parsedExpression, options) {\r\n        var context = makeContext(options);\r\n\r\n        return parsedExpression.evaluate(context);\r\n    }\r\n\r\n    var evaluatorPrototype = {\r\n        evaluate: function (options) {\r\n            return evaluate(this.expression, options);\r\n        }\r\n\r\n        ,evaluateNumber: function (options) {\r\n            return this.evaluate(options).numberValue();\r\n        }\r\n\r\n        ,evaluateString: function (options) {\r\n            return this.evaluate(options).stringValue();\r\n        }\r\n\r\n        ,evaluateBoolean: function (options) {\r\n            return this.evaluate(options).booleanValue();\r\n        }\r\n\r\n        ,evaluateNodeSet: function (options) {\r\n            return this.evaluate(options).nodeset();\r\n        }\r\n\r\n        ,select: function (options) {\r\n            return this.evaluateNodeSet(options).toArray()\r\n        }\r\n\r\n        ,select1: function (options) {\r\n            return this.select(options)[0];\r\n        }\r\n    };\r\n\r\n    function parse(xpath) {\r\n        var parsed = parser.parse(xpath);\r\n\r\n        return Object.create(evaluatorPrototype, {\r\n            expression: {\r\n                value: parsed\r\n            }\r\n        });\r\n    }\r\n\r\n    exports.parse = parse;\r\n})();\r\n\r\nexports.XPath = XPath;\r\nexports.XPathParser = XPathParser;\r\nexports.XPathResult = XPathResult;\r\n\r\nexports.Step = Step;\r\nexports.NodeTest = NodeTest;\r\nexports.BarOperation = BarOperation;\r\n\r\nexports.NamespaceResolver = NamespaceResolver;\r\nexports.FunctionResolver = FunctionResolver;\r\nexports.VariableResolver = VariableResolver;\r\n\r\nexports.Utilities = Utilities;\r\n\r\nexports.XPathContext = XPathContext;\r\nexports.XNodeSet = XNodeSet;\r\nexports.XBoolean = XBoolean;\r\nexports.XString = XString;\r\nexports.XNumber = XNumber;\r\n\r\n// helper\r\nexports.select = function(e, doc, single) {\r\n\treturn exports.selectWithResolver(e, doc, null, single);\r\n};\r\n\r\nexports.useNamespaces = function(mappings) {\r\n\tvar resolver = {\r\n\t\tmappings: mappings || {},\r\n\t\tlookupNamespaceURI: function(prefix) {\r\n\t\t\treturn this.mappings[prefix];\r\n\t\t}\r\n\t};\r\n\r\n\treturn function(e, doc, single) {\r\n\t\treturn exports.selectWithResolver(e, doc, resolver, single);\r\n\t};\r\n};\r\n\r\nexports.selectWithResolver = function(e, doc, resolver, single) {\r\n\tvar expression = new XPathExpression(e, resolver, new XPathParser());\r\n\tvar type = XPathResult.ANY_TYPE;\r\n\r\n\tvar result = expression.evaluate(doc, type, null);\r\n\r\n\tif (result.resultType == XPathResult.STRING_TYPE) {\r\n\t\tresult = result.stringValue;\r\n\t}\r\n\telse if (result.resultType == XPathResult.NUMBER_TYPE) {\r\n\t\tresult = result.numberValue;\r\n\t}\r\n\telse if (result.resultType == XPathResult.BOOLEAN_TYPE) {\r\n\t\tresult = result.booleanValue;\r\n\t}\r\n\telse {\r\n\t\tresult = result.nodes;\r\n\t\tif (single) {\r\n\t\t\tresult = result[0];\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nexports.select1 = function(e, doc) {\r\n\treturn exports.select(e, doc, true);\r\n};\r\n\r\n// end non-node wrapper\r\n})(xpath);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/xpath/xpath.js\n// module id = 15\n// module chunks = 0","const XPathNode = require('./XPathNode');\nconst xPathParser = require('js-xpath');\nconst util = require('util');\n\nclass XPathNodes {\n  constructor(nodes = []) {\n    if (\n      !Array.isArray(nodes) ||\n      nodes.filter(i => !(i instanceof XPathNode)).length\n    ) {\n      throw new Error('Expecting array of XPathNode elements.');\n    }\n\n    this._nodes = nodes;\n  }\n\n  get nodes() {\n    return this._nodes;\n  }\n  get length() {\n    return this._nodes.length;\n  }\n\n  add(node) {\n    if (!(node instanceof XPathNode)) {\n      throw new Error('Expecting XPathNode element.');\n    }\n\n    this._nodes.push(node);\n  }\n\n  static fromString(xPath) {\n    const parsed = xPathParser.parse(xPath);\n    const rows = parsed.steps.map(i => i.toXPath());\n    return new XPathNodes(\n      rows.map((row) => {\n        return XPathNode.fromString(row);\n      })\n    );\n  }\n\n  toString(relative = false) {\n    if (!this.nodes || this.nodes.length < 1) return '';\n\n    const result = this.nodes.reduce(\n      (results, node) => {\n        return [...results, node.toString()];\n      },\n      []\n    );\n\n    const initial = relative ? '//' : '/';\n    return `${initial}${result.join('/')}`;\n  }\n}\n\nmodule.exports = XPathNodes;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/types/XPathNodes.js\n// module id = 16\n// module chunks = 0"],"sourceRoot":""}